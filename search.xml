<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript-学习笔记（10）</title>
    <url>/2020/07/22/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8810%EF%BC%89/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JavaScript 学习笔记（1）：基本语法</title>
    <url>/2020/07/03/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h4><ol>
<li><p>文本编辑器：VSCode<br>去(官网)[<a href="https://code.visualstudio.com/]下载" target="_blank" rel="noopener">https://code.visualstudio.com/]下载</a> vscode，安装时一路点 next，最后在应用商店选择下载一个 javascript 的插件，需要中文界面的话可以搜索安装”Chinese”插件。</p>
</li>
<li><p>浏览器：Firefox 浏览器（或者 Chrome）。</p>
</li>
<li><p>js 的位置：Html 的文档里的<code>&lt;script&gt;</code>标签里，或者是别起一个后缀名为”.js”的文件，再在<code>&lt;script&gt;</code>标签的<code>src</code>属性引用它。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"example.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>运行，打开浏览器的开发者模式，进入控制台，然后把代码放在输入框中，再点上面的<code>运行</code>即可运行代码，如图所示。<br><img src="https://pic4.zhimg.com/80/v2-6e5927f48e6c9f6eaac9ad93d2fa8767.png" alt="Image"></p>
</li>
</ol>
<h4 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h4><ol>
<li><p>语句结尾不需加上分号，但建议在末尾加上分号，这是一种良好的习惯。</p>
</li>
<li><p>注释：</p>
<ul>
<li>单句的注释是在语句前加上<code>//</code>，如<code>// console.log(&quot;Test&quot;);</code>；</li>
<li>一段代码的注释是在代码前加上<code>/*</code>，在代码后加上 <code>/*</code>，如：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">alert("document");</span></span><br><span class="line"><span class="comment">console.log("Daoli");</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>变量（variable）</p>
<ul>
<li>变量不需要提前声明，不过提前声明是个良好的编程习惯。下面的语句是声明。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br></pre></td></tr></table></figure>

<p>亦可直接声明赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>变量区分大小写；</li>
<li>变量名不允许包含空格或标点符号（除了美元符号<code>$</code>）。</li>
</ul>
</li>
<li><p>数据类型</p>
<ul>
<li>js 是一种弱类型语言，可以在任何时候改变变量的数据类型。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">num = <span class="string">"jinl"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串：由零个或多个字符构成，字符包括但不限于字母、数字、标点符号和空格，字符串必需包括在引号里；</li>
<li>数值：数值不限于是整数，js 可以使用带小数点的数值；</li>
<li>布尔值：只有两种取值：<code>true</code> 或者 <code>false</code>。</li>
</ul>
</li>
<li><p>数组</p>
<ul>
<li>声明：可选给定数组的长度；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array_0 = <span class="built_in">Array</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> array_1 = <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>赋值：直接<code>array_0[index] = &quot;str&quot;</code>,或者：<code>var array_0 = new(&quot;str1&quot;, &quot;str2&quot;, &quot;str3&quot;, &quot;str4&quot;)</code>；</li>
<li></li>
</ul>
</li>
<li><p>对象</p>
<ul>
<li>与数组类似，对象也使用一个名字表示一组值。每个值是对象的一个属性。前面代表键，冒号后面代表值。</li>
<li>创建方法：使用花括号语法：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test_obj = &#123;</span><br><span class="line">  name: <span class="string">"apple"</span>,</span><br><span class="line">  year: <span class="number">1999</span>,</span><br><span class="line">  eat_or_not: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>访问属性：取对象里的键。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = test_obj(<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-操作"><a href="#3-操作" class="headerlink" title="3. 操作"></a>3. 操作</h4><ol>
<li>加减乘除的符咒分别是<code>+-*/</code>，用法与其它的语言一样。</li>
<li>可以使用<code>i++</code>以用<code>i += 1</code>这种方式。</li>
<li>js 的<code>+</code>可以将字符串与数值相连接，连接后是一个更长的字符串，如<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"101"</span> + <span class="number">11</span>;</span><br><span class="line"><span class="comment">// str === "10111"</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-条件语句"><a href="#4-条件语句" class="headerlink" title="4. 条件语句"></a>4. 条件语句</h4><ol>
<li><p>与 C 语的中的用法一致，基本语法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>比较操作符包括：大于(<code>&gt;</code>)、小于(<code>&lt;</code>)、大于等于(<code>&gt;=</code>)、小于等于(<code>&lt;=</code>)以及等于(<code>==</code>)与不等于(<code>!=</code>)。<br>其中要注意的是<code>==</code>不表示一定相等，比如下面的例子中，<code>a</code>与<code>b</code>是相等的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">  alert(<span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候就需要另一种等号(<code>===</code>)，这个等号会进行严格的比较，同理，不相等要比较需要使用(<code>!==</code>)来比较。<br>我个人的建议是，一律使用<code>===</code>与<code>!==</code>。</p>
</li>
<li><p>逻辑操作符<br>与<code>&amp;&amp;</code>，或<code>||</code>，非<code>！</code>。</p>
</li>
</ol>
<h4 id="5-循环"><a href="#5-循环" class="headerlink" title="5. 循环"></a>5. 循环</h4><ol>
<li>while 循环。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line">   statement；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>do-while 循环。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  statement;</span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure></li>
<li>for 循环<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (initial condition; test condition; alter condition) &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
实例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">10</span>; index++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h4><ol>
<li>定义示例函数：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test是函数名，params是参数，true是返回值。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  alert(params);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>调用示例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bool = test(<span class="string">"Test!"</span>);</span><br></pre></td></tr></table></figure></li>
<li>变量作用域：如果函数内使用了 var 对象，那么就被视为局部变量，否则为全局变量。</li>
</ol>
<h4 id="7-对象"><a href="#7-对象" class="headerlink" title="7. 对象"></a>7. 对象</h4><ol>
<li><p>对象是自包含的数据集合，包含在对象的数组可以通过属性(property)和方法(method)来访问。<br>js 里，属性和方法都使用“点”语法来访问。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">object.property;</span><br><span class="line">object.method();</span><br></pre></td></tr></table></figure></li>
<li><p>内建对象：一般使用<code>new</code>的关键字去新建一个对象的实例。如新建一个数组对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 学习笔记（2）</title>
    <url>/2020/07/05/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1. DOM"></a>1. DOM</h4><ol>
<li><p>DOM 的 D 指的是<code>Document</code>（文档），O 指的<code>Object</code>（对象），M 指的是<code>Model</code>（模型）。</p>
</li>
<li><p>JS 的对象包括三种，分别是：</p>
<ul>
<li>用户定义对象，不过在这里很少用。</li>
<li>内建对象，包括 Math、Array 等内建对象。</li>
<li>宿主对象，由浏览器提供的对象。</li>
</ul>
</li>
<li><p>模型，即将文档用“树”图表示出来，如例图所示：<br><img src="https://pic4.zhimg.com/80/v2-908a37eed3d355f8539d8552c8e725f6.png" alt="Image"><br>根元素是 html，有两个子分支 head 与 body，它们处于同一层次，属于兄弟关系，他们也分别有不同的子元素。</p>
</li>
</ol>
<h4 id="2-节点node"><a href="#2-节点node" class="headerlink" title="2. 节点node"></a>2. 节点<code>node</code></h4><p>节点包括元素节点、文本节点和属性结点。</p>
<ol>
<li>元素节点：标签的名字即元素的名字，如文本段落元素的名字是“p”，列表项元素的名字是“li”。</li>
<li>文本节点：<p>元素包含文本，它是一个文本节点。大多文本节点被包括在元素节点的内部。并非所有的元素节点都包含有文本节点，如<code>&lt;ul&gt;&lt;li&gt;Test&lt;/li&gt;&lt;/ul&gt;</code>中的<code>&lt;ul&gt;</code>没有直接包含文本节点，包括其它元素节点，后者即<code>&lt;li&gt;</code>包含文本节点。</li>
<li>属性节点：用来对元素做出更具体的描述。例如几乎所有的元素都有一个 title 属性，可以利用这个属性对包含在元素里的东西做出准确详细的描述：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>此处应有文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
里面的<code>title=&quot;test&quot;</code>是属性节点。</li>
</ol>
<h4 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h4><p>CSS 即层叠样式表，可以告诉浏览器该如何显示文档内容。</p>
<ol>
<li>样式的声明可放在文档中的<code>&lt;head&gt;</code>里，亦可另起一文件。</li>
<li>语法：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">selector</span> &#123;</span><br><span class="line">  <span class="attribute">property</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
例子：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这个会自动应用于文档里所有的 p 元素。</li>
<li>id 属性：独一无二的标识符，只可用于一处。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#id</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"id"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>class 属性：可应用于所有元素中。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-获取节点"><a href="#4-获取节点" class="headerlink" title="4. 获取节点"></a>4. 获取节点</h4><ol>
<li>getElementById，获取具体某个 id 的节点。<br>使用方法:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id_element = <span class="built_in">document</span>.getElementById(id_name);</span><br></pre></td></tr></table></figure></li>
<li>getElementsByClassName，获取所有使用该 class 的节点，返回的是一个数组。注意<code>getElementsByClassName</code>中间的 <code>elements</code>有加<code>s</code>。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> class_element = <span class="built_in">document</span>.getElementsByClassName(class_name);</span><br></pre></td></tr></table></figure></li>
<li>getElementsByTagName，获取所有名为该 TagName 的节点，返回的是一个数组。注意<code>getElementsByTagName</code>中间的 <code>elements</code>有加<code>s</code>。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tag_element = <span class="built_in">document</span>.getElementsByTagName(tag_name);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="5-获取和设置属性"><a href="#5-获取和设置属性" class="headerlink" title="5. 获取和设置属性"></a>5. 获取和设置属性</h4><ol>
<li><p>获取属性：<code>getAttribute</code>，获取想要查询的属性值，参数为查询属性的名字。<br><code>getAttribute</code>不能通过<code>document</code>节点调用，只用被元素节点调用。<br>使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先得到节点值</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="comment">// 再获取其中的属性值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  alert(lis[i].getAttribute(<span class="string">"title"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置属性：<code>setAttribute</code>，设置具体的属性值，参数为属性名字和属性值。同样只用被元素节点调用。<br>使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先得到节点值</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="comment">// 再修改其中的属性值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  alert(lis[i].getAttribute(<span class="string">"title"</span>));</span><br><span class="line">  lis[i].setAttribute(<span class="string">"title"</span>, <span class="string">"li_tag"</span>);</span><br><span class="line">  alert(lis[i].getAttribute(<span class="string">"title"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 学习笔记（3）：图片库</title>
    <url>/2020/07/07/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-为什么要使用图片库"><a href="#1-为什么要使用图片库" class="headerlink" title="1. 为什么要使用图片库"></a>1. 为什么要使用图片库</h4><p>可以把所有的图片都放到一个网页里，不过当图片过多时，会导致网页体积过大。<br>因此，为每张图片分别创建一个网页的解决方案。<br>使用 js 来伊娃衅片是最佳选择：把整个图片库的浏览链接集中在图片库主页里，当用户点击了这个主页里的某个 图片链接时，才把相应的图片传送过去。</p>
<h4 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h4><ol>
<li>文件：准备几张图片，放在一个 images 的目录里，再创建一个<code>gallery.html</code>文件，与 images 同目录。</li>
<li>标记：使用无序列表<code>&lt;ul&gt;</code>来标记图片链接，<br>标记清单：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Image Gallery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Snapshots<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span> <span class="attr">title</span>=<span class="string">"a dog east something"</span>&gt;</span> dog <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/follower.jpg"</span> <span class="attr">title</span>=<span class="string">"a follower "</span>&gt;</span>follower<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/part.jpg"</span> <span class="attr">title</span>=<span class="string">"a part here"</span>&gt;</span>part<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/sea.jpg"</span> <span class="attr">title</span>=<span class="string">"the sea "</span>&gt;</span>sea<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/star.jpg"</span> <span class="attr">title</span>=<span class="string">"water star"</span>&gt;</span>star<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-改进"><a href="#3-改进" class="headerlink" title="3. 改进"></a>3. 改进</h4><p>点击某个链接后可以留在当前页面；<br>点击链接后可以看到图片以及可以看到图片清单。</p>
<p>方法：<br>增加一个占位符图片，当没有点时，显示一个默认图片，当点击图片的链接时，拦截网页的默认行为，将图片显示为所点击链接的图片。<br>将<code>&lt;img id=&quot;default&quot; src=&quot;images/default.jpg&quot; alt=&quot;My image gallery&quot;&gt;;</code>插入无序列表后。新建一个名为<code>default</code>的 id 样式表，样式可自定义。<br>显示结果：<br><img src="https://pic4.zhimg.com/80/v2-8a4beab26883ec8160922259ee3da143.png" alt="Image"></p>
<h4 id="4-实现"><a href="#4-实现" class="headerlink" title="4. 实现"></a>4. 实现</h4><ol>
<li><p>代码：要修改占位符的显示，只需将占位符的<code>src</code>属性修改为相对应的图片属性即可，需要使用的 js 方法有<code>getAttribute()</code>和<code>setAttribute()</code>。<br>具体代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// whic_pic 是元素结点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_pic</span>(<span class="params">whic_pic</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取href属性</span></span><br><span class="line">  <span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br><span class="line">  <span class="comment">// 获取默认结点</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">"default"</span>);</span><br><span class="line">  <span class="comment">// 设置属性</span></span><br><span class="line">  placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">placeholder.src = source;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用：</p>
<ul>
<li>在同目录下创建一个名为<code>show_pic.js</code>的文件，将上述代码放进去，再在<code>gallery.html</code>的<code>&lt;head&gt;</code>标签里写入<code>&lt;script src=&quot;show_pic.js&quot;&gt;&lt;/script&gt;</code>。</li>
<li>要点击某个链接触发事件时，需要使用<code>onclick</code>事件处理函数。添加事件处理函数的语法是<code>event=&quot;javaScript Statement(s)</code>，所以调用<code>show_pic</code>的方法是：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onclick = <span class="string">"show_pic(this)"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>拦截网页默认操作：当某个元素添加了事件处理函数后，如果那段 js 代码返回的值是 true，那么 onclick 事件处理函数就认为这个链接被点击了；如果返回的的 false，那么就认为没有被点击。例如<code>onclick=&quot;return false&quot;</code>这个事件处理函数就会被浏览器认为没有点击，那么也不会调用默认的函数了。所以具体的代码为：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onclick = <span class="string">"show_pic(this); return false"</span>;</span><br></pre></td></tr></table></figure>

<p>详细代码为：<br>// 目前只有手动添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"a dog east something"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    dog</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/follower.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"a follower "</span></span></span><br><span class="line"><span class="tag">    &gt;</span>follower<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/part.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"a part here"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>part<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/sea.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"the sea "</span></span></span><br><span class="line"><span class="tag">    &gt;</span>sea<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/star.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"water star"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>star<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在已经完成了图片库，无论点击哪个都不会跳转了。<br><img src="https://pic4.zhimg.com/80/v2-a4bcfbfb4a0f1de277c6e4451b4bbbf9.png" alt="Image"></p>
</li>
</ol>
<h4 id="5-扩展"><a href="#5-扩展" class="headerlink" title="5. 扩展"></a>5. 扩展</h4><blockquote>
<p>添加切换图片时可以显示不同的文本功能。之前在每个 a 属性里都设置了 title 属性，只要用<code>getAttribute</code>函数就可以将其提取出来，然后可以插入到 HTML 文档中。<br>为此需要学习几个新的 Dom 属性。</p>
</blockquote>
<ol>
<li><p>childNodes 属性：在节点树上，这个属性可以获取元素所有的子元素，是一个数组。使用方法：<code>var children = element.childNodes</code>，例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取body节点，因为一个文档只有一个body标签，所以只需取第一个元素即可</span></span><br><span class="line"><span class="keyword">var</span> body_element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 获取子元素</span></span><br><span class="line"><span class="keyword">var</span> body_children = body_element.childNodes;</span><br></pre></td></tr></table></figure>

<p>实测：将以下代码放进<code>show_pic.js</code>里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count_body</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body_element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> num = body_element.childNodes.length;</span><br><span class="line">  alert(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了使文档加载时使用，再添加<code>window.onload = count_body;</code>到 js 文件里，接着打开文档，弹出计算的所有的 body 子元素属性了。</p>
</li>
<li><p>nodeType 属性<br>body 应该只有 3 个子元素，但是显示的数字却比 3 大，只为文档树的节点类型并非只有元素节点一种。文档里几乎每一样东西都是一个节点，甚至连空格和换行符都是。<br>第一个节点都有 nodeType 属性，nodeType 的值并不是英文，元素节点的 nodeType 是 1，属性节点的值是 2，文本节点的是 3。<br>比如<code>body_elemnt.nodeType</code>的值是 1.</p>
</li>
<li><p>标记添加描述<br>在<code>&lt;img&gt;</code>下添加<code>&lt;p id=&quot;description&quot;&gt;Choose an image&lt;/p&gt;</code>这一段文本节点。</p>
</li>
<li><p>获取该结点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取title属性</span></span><br><span class="line"><span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line"><span class="comment">// 获取p结点</span></span><br><span class="line"><span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>实现文本切换<br>使用 DOM 提供的<code>nodeValue</code>属性，它可以得到和设置节点的值。<br><code>&lt;p&gt;</code>元素本身是<code>nodeValue</code>是一个空值，需要的是<code>&lt;p&gt;</code>子元素包含的值。<br>因此使用方法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p_element.childNodes[<span class="number">0</span>].nodeValue;</span><br></pre></td></tr></table></figure></li>
<li><p>firstChild 和 lastChild 属性<br>firstChild 是获取节点的第一个元素，lastChild 是获取最后一个元素。<br>即<code>node.childNodes[0] === node.firstChild</code>。<br>使用这两个元素更简洁了。</p>
</li>
<li><p>利用 nodeValue 刷新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将p元素赋值给nodeValue</span></span><br><span class="line">p_element.firstChild.nodeValue = title;</span><br></pre></td></tr></table></figure>

<p>最终代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// whic_pic 是元素结点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_pic</span>(<span class="params">whic_pic</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取href属性</span></span><br><span class="line">  <span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br><span class="line">  <span class="comment">// 获取默认结点</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">"default"</span>);</span><br><span class="line">  <span class="comment">// 设置属性</span></span><br><span class="line">  placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br><span class="line">  <span class="comment">// 获取title属性</span></span><br><span class="line">  <span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">  <span class="comment">// 获取p结点</span></span><br><span class="line">  <span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br><span class="line">  <span class="comment">// 将p元素赋值给nodeValue</span></span><br><span class="line">  p_element.firstChild.nodeValue = title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>几个新 DOM 属性：</p>
<ul>
<li>childNodes</li>
<li>nodeType</li>
<li>firstChild</li>
<li>lastChild</li>
</ul>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a>。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（4）</title>
    <url>/2020/07/08/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/</url>
    <content><![CDATA[<h3 id="平衡退化"><a href="#平衡退化" class="headerlink" title="平衡退化"></a>平衡退化</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><ol>
<li><p>定义：网站的访问者有可能使用不支持 js 的浏览器（虽说现在应该没有了），又或者是禁止网页使用 js（因为弹窗广告），所以需要在浏览器不支持 js 的情况下浏览网站，这就是平稳退化（graceful degradation）。</p>
</li>
<li><p>例子：新窗口打开一个链接，许多电子商务网站的结算页面都有指向服务条款的链接，与其让用户手动点击打开，不如自动打开一个新窗口来显示相关信息。<br>js 使用 window 对象的<code>open()</code>方法来创建新的浏览器窗口。使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url 表示要打开的链接，name 表示是新窗口的名字，方便js调用，features 表示的是新窗口的属性。</span></span><br><span class="line"><span class="built_in">window</span>.open(url, name, features);</span><br></pre></td></tr></table></figure></li>
<li><p>具体应用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop_up</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(url, <span class="string">"pop_up"</span>, <span class="string">"weight=300, height=400"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数不会对网页的访问有任何影响，影响到网页的只有：如何使用此函数。可以使用伪协议（pseudo-protocol)。</p>
</li>
</ol>
<h4 id="2-伪协议"><a href="#2-伪协议" class="headerlink" title="2. 伪协议"></a>2. 伪协议</h4><ol>
<li><p>真协议用来在计算机之间传输数据包，如 HTTP 协议。伪协议使用非标准化协议，可以通过一个链接来调用 js 函数。</p>
</li>
<li><p>具体应用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"pop_up('https://zhihu.com'); return false;"</span>&gt;</span></span><br><span class="line">  知乎网</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>上述代码同样无法平稳退化。要使得平稳退化，须得在 a 标签的 href 属性加上 url 链接。具体如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"https://zhihu.com"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onclick</span>=<span class="string">"pop_up('https://zhihu.com'); return false;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  知乎网</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简化一下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"https://zhihu.com"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onclick</span>=<span class="string">"pop_up(this.getAttribute('href')); return false;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  知乎网</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更简明的引用方法————<code>this.href</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://zhihu.com"</span> <span class="attr">onclick</span>=<span class="string">"pop_up(this.href); return false;"</span>&gt;</span></span><br><span class="line">  知乎网</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="分离-JavaScript"><a href="#分离-JavaScript" class="headerlink" title="分离 JavaScript"></a>分离 JavaScript</h3><h4 id="1-分离"><a href="#1-分离" class="headerlink" title="1. 分离"></a>1. 分离</h4><ol>
<li><p>使用类似于 CSS 的方法，比如使用下面这个语句来表明“当这个链接点击时，也可以调用<code>pop_up</code>函数”。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://zhihu.com"</span> <span class="attr">class</span>=<span class="string">"pop_up"</span>&gt;</span>知乎网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js 语言不强制事件必须在 HTML 文档上处理，因此可以在外部把事件添加到某个元素上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.event = action;</span><br></pre></td></tr></table></figure>

<p>可以使用 id 或者 className 或者 TagName 来确定元素，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getElementById(id).event = action;</span><br></pre></td></tr></table></figure>

<p>涉及多个元素时，可以用<code>getElementByTagName</code>以及<code>getAttribute</code>把事件添加到特定属性的元素上。<br>具体操作为：</p>
<ul>
<li>先用使用<code>getElementByTagName</code>获取元素数组。</li>
<li>遍历数组。</li>
<li>再根据属性值<code>class==pop_up</code>筛选出那个元素。</li>
<li>把这个链接的<code>href</code>属性值传递给<code>pop_up()</code>函数。</li>
<li>取消这个链接的默认行为。</li>
</ul>
<p>具体代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (links[i].getAttribute(<span class="string">"class"</span>) === <span class="string">"pop_up"</span>) &#123;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      pop_up(<span class="keyword">this</span>.getAttribute(<span class="string">"href"</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要把上述代码存入一个外部 js 文件，就等于把这些操作从 html 分离出来了。</p>
</li>
<li><p>上述代码存入外部文件后，会无法正常运行。<br>因为这个语句的第一语使用了 document 这个对象，js 文件加载的时候文档可能会不完整。所以要等文档全部加载后才能运行，这时可以使用 window.onload 函数，当触发这个函数时，document 对象已经存在。<br>所以最终代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = prepareLinks;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareLinks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (links[i].getAttribute(<span class="string">"class"</span>) === <span class="string">"pop_up"</span>) &#123;</span><br><span class="line">      links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        pop_up(<span class="keyword">this</span>.getAttribute(<span class="string">"href"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h3><pre><code>某些支持js脚本的古老浏览器，也不一定能正常工作。</code></pre><h4 id="1-对象检测-object-detection"><a href="#1-对象检测-object-detection" class="headerlink" title="1. 对象检测(object detection)"></a>1. 对象检测(object detection)</h4><ol>
<li><p>js 万物皆是对象，所以只要判断是否有对应的对象存在即可。</p>
</li>
<li><p>根据条件表达的求值结果，使用<code>if</code>语句来决定应该执行什么操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (method) &#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如，有一个使用了<code>getElementById()</code>方法的函数，就可以在调用前检查浏览器是否支持这个函数。使用对象检测时，要删掉方法名后面的括号，如果不删掉，测试的是方法的结果，无论方法存不存在。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById)&#123;</span><br><span class="line">   statements using getElementById;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果浏览器不支持方法的话，那么将永远无法调用。</p>
</li>
<li><p>上面使用的方法有一个不足之处是，会增加花括号，多了以后会导致代码阅读困难。<br>改进方法是换一种方式。改为“当不支持这个方法是，就结束”。具体代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!getElementById) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以在把 onclick 事件加到链接时，可以加一 if 语来判断浏览器是否支持。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = prepareLinks;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareLinks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementsByTagName) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (links[i].getAttribute(<span class="string">"class"</span>) === <span class="string">"pop_up"</span>) &#123;</span><br><span class="line">      links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        pop_up(<span class="keyword">this</span>.getAttribute(<span class="string">"href"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-嗅探技术"><a href="#2-嗅探技术" class="headerlink" title="2. 嗅探技术"></a>2. 嗅探技术</h4><ol>
<li>定义：指通过提取浏览器供应商提供的信息来解决向后兼容的问题。</li>
<li>理论上可行，不过随着浏览器的发展，这种技术已经被淘汰了。</li>
</ol>
<h3 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h3><h4 id="1-少访问-DOM-和减少标记"><a href="#1-少访问-DOM-和减少标记" class="headerlink" title="1. 少访问 DOM 和减少标记"></a>1. 少访问 DOM 和减少标记</h4><ol>
<li><p>以下面的代码为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>))&#123;</span><br><span class="line">  <span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt;links.length; i++)&#123;</span><br><span class="line">    statements......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码可以运行，但相同的操作重复了两次，浪费了性能，所以可以进行优化一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line"><span class="keyword">if</span> (links.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;links.length; i++)&#123;</span><br><span class="line">    statements......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-合并和放置脚本"><a href="#2-合并和放置脚本" class="headerlink" title="2. 合并和放置脚本"></a>2. 合并和放置脚本</h4><ol>
<li>包含脚本的方式是使用外部文件，而不是包在<code>&lt;script&gt;</code>里。并且可以把 funtionA.js、funtionB.js 和 futntionC.js 合并到同一个文件，这样就可以减少加载页面时发送的请求。</li>
<li>把脚本放在<code>&lt;head&gt;</code>标签会有一个问题，位于<code>&lt;head&gt;</code>块中的脚本会导致浏览器无法并行加载其它文件（如图像和其它脚本）。</li>
<li>把<code>&lt;script&gt;</code>标签都放在文档的末尾，<code>&lt;/body&gt;</code>的标记之前，可以使页面变得更快。</li>
</ol>
<h4 id="3-压缩脚本"><a href="#3-压缩脚本" class="headerlink" title="3. 压缩脚本"></a>3. 压缩脚本</h4><ol>
<li>定义：把脚本中不必要的字节，如空格和注释，统统删除，从而达到压缩文件的目的。有的甚至会重写部分代码，使用更短的变量名等。</li>
<li>精简后的代码很难看懂，却能减少文件大小，很多情况下，应该有两版本，一个是工作副本，可以修改并添加注释，一个是精简副本，用于放在站点上。为了区分，一般会在精简版本的文件名上加上 min 字符。</li>
<li>代码压缩工具：<ul>
<li>Douglas Crockford 的 JSMin <a href="http://www.crockford.com/javascript/jsmin.html" target="_blank" rel="noopener">http://www.crockford.com/javascript/jsmin.html</a>;</li>
<li>雅虎的 YUI compressor <a href="http://developer.yahoo.com/yui/compressor" target="_blank" rel="noopener">http://developer.yahoo.com/yui/compressor</a></li>
<li>谷歌的 Closure Compiler <a href="http://closure-compiler.appspot.com/home" target="_blank" rel="noopener">http://closure-compiler.appspot.com/home</a></li>
</ul>
</li>
</ol>
<p>几个 DOM 脚本编辑工作相关的概念和实践：</p>
<ul>
<li>平稳退化</li>
<li>分离 Javascript</li>
<li>向后兼容</li>
<li>性能考虑</li>
</ul>
<blockquote>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（5）：图片库改进</title>
    <url>/2020/07/11/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89/</url>
    <content><![CDATA[<p>审视一下之前的图片库，思考一下：</p>
<h4 id="支持平稳退化？"><a href="#支持平稳退化？" class="headerlink" title="支持平稳退化？"></a>支持平稳退化？</h4><ol>
<li><p>当 js 被禁用后，用户点击链接时会自动调动原来 a 标签的方法，同样可以查看所有的图片，网页的基本功能没有受到损害。</p>
</li>
<li><p>使用伪协仪的话就没戏了。</p>
</li>
</ol>
<h4 id="js-与-html-标记分离吗？"><a href="#js-与-html-标记分离吗？" class="headerlink" title="js 与 html 标记分离吗？"></a>js 与 html 标记分离吗？</h4><ol>
<li><p>不分离，<code>onclick</code>事件直接插在标记文档里。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"a dog east something"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    dog</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>为了让浏览器知道与哪些链接有着不一样的行为，可以添加一个<code>class</code>属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span> <span class="attr">class</span>=<span class="string">"gallerypic"</span> <span class="attr">title</span>=<span class="string">"a dog east something"</span>&gt;</span></span><br><span class="line">    dog</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是这种方法太麻烦了，可以直接给整个清单设置一个 ID。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"image_gallery"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span> <span class="attr">title</span>=<span class="string">"a dog east something"</span>&gt;</span> dog <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/follower.jpg"</span> <span class="attr">title</span>=<span class="string">"a follower "</span>&gt;</span>follower<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/part.jpg"</span> <span class="attr">title</span>=<span class="string">"a part here"</span>&gt;</span>part<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/sea.jpg"</span> <span class="attr">title</span>=<span class="string">"the sea "</span>&gt;</span>sea<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/star.jpg"</span> <span class="attr">title</span>=<span class="string">"water star"</span>&gt;</span>star<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>只有一个“挂钩”，但是也足够了。</p>
</li>
<li><p>添加事件处理函数<br>具体操作：</p>
<ul>
<li><p>检查是否支持<code>getElementsByTagName</code>和<code>getElementById</code>；</p>
</li>
<li><p>检查是否存在有<code>id=image_gallery</code>的元素；</p>
</li>
<li><p>遍历<code>image_gallery</code>的所有链接；</p>
</li>
<li><p>设置 <code>onclick</code> 事件，让其关联操作：</p>
<ul>
<li>将这个链接作为参数传递给<code>show_pic</code>函数；</li>
<li>取消链接被点击时的默认行为，不让浏览打开该链接。</li>
</ul>
</li>
</ul>
<p>具体代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepare_gallery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">document</span>.getElementsByTagName || <span class="built_in">document</span>.getElementById))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!gallery) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  links = gallery.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 把整个link元素传进去</span></span><br><span class="line">      show_pic(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>共享 onload<br>当有多个函数需要 onload 时使用，那么可以创建一个匿名函数来绑定指令。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  first_function();</span><br><span class="line">  second_function();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这是最简单的处理方式，还有一个弹性最佳的解决方案。这个方案需要写一点代码，但一不旦有了那些代码，把函数绑定到<code>window.onload</code>事件就行了。<br>这个函数名是<code>addLoadEvent</code>，要完成的操作有：</p>
<ul>
<li>把现在的<code>window.load</code>事件处理函数的值存入变量<code>oldonload</code>。</li>
<li>如果处理函数还没有绑定函数，就像平时那样把新函数添加给它。</li>
<li>如果已经绑定了函数，就把新函数追加到现有指令的末尾。<br>具体代码：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = func;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      oldonload();</span><br><span class="line">      func();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果需要把函数加到队列里去，只需写以下代码：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addLoadEvent(first_function);</span><br><span class="line">addLoadEvent(second_function);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="不要做太多的假设"><a href="#不要做太多的假设" class="headerlink" title="不要做太多的假设"></a>不要做太多的假设</h4><ol>
<li><p>检查元素是否存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"placeholder"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 如果 id为 `description`存在，那么执行修改文字，否则忽略</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"description"</span>)) &#123;</span><br><span class="line">  <span class="comment">// 获取title属性</span></span><br><span class="line">  <span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">  <span class="comment">// 获取p结点</span></span><br><span class="line">  <span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br><span class="line">  <span class="comment">// 将p元素赋值给nodeValue</span></span><br><span class="line">  p_element.firstChild.nodeValue = title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全部代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_pic</span>(<span class="params">whic_pic</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"default"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 获取 href 属性</span></span><br><span class="line">  <span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br><span class="line">  <span class="comment">// 获取默认结点</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">"default"</span>);</span><br><span class="line">  <span class="comment">// 如果 id为 `description`存在，那么执行修改文字，否则忽略</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"description"</span>)) &#123;</span><br><span class="line">    <span class="comment">// 设置属性</span></span><br><span class="line">    placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br><span class="line">    <span class="comment">// 获取 title 属性</span></span><br><span class="line">    <span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">    <span class="comment">// 获取 p 结点</span></span><br><span class="line">    <span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br><span class="line">    <span class="comment">// 将 p 元素赋值给 nodeValue</span></span><br><span class="line">    p_element.firstChild.nodeValue = title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改进后即使不存在要找的元素，也不会发生错误。</p>
</li>
<li><p>如果 palceholder 图片在文档中删去，并在浏览器刷新页面，就会出现无论点击哪个链接，都没有任何响应。<br>因为 prepare_gallery 函数取消了 onclick 事件的默认行为。其实是否要返回一个 false 用来取消默认行为，应该由 show_pic 函数决定。show_pic 返回两个可值的值。</p>
<ul>
<li>如果切换图片成功，返回 true；</li>
<li>否则，返回 false。<br>为了修正该问题，应该在返回前验证返回值，来决定是否阻止默认行为，如果返回 true，则更新。可以利用<code>!</code>来对 show_pic 的返回值取反。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !show_pic(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
如果 show_pic 返回 true，那么就返回 false，浏览器会取消默认行为；<br>如果返回 false，那就返回 true，浏览器会使用 onclick 的默认行为。<br>所以最终代码为：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepare_gallery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">document</span>.getElementsByTagName || <span class="built_in">document</span>.getElementById))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!gallery) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  links = gallery.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !show_pic(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ol>
<li><p>检查 title 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = which_pic.getAttribute(<span class="string">"title"</span>);</span><br></pre></td></tr></table></figure>

<p>为了检查 title 属性是否真的存在，可以测试是否为 null。当不存在时，可以设置为空字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (which_pic.getAttribute(<span class="string">"title"</span>)) &#123;</span><br><span class="line">  <span class="keyword">var</span> text = which_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> text = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成同一操作的其它方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = which_pic.getAttribute(<span class="string">"title"</span>)</span><br><span class="line">  ? which_pic.getAttribute(<span class="string">"title"</span>)</span><br><span class="line">  : <span class="string">""</span>;</span><br></pre></td></tr></table></figure>

<p>上面的<code>?</code>是一个三元操作符（ternary operator）。问号的后面是<code>text</code>的两种取值可能，如果<code>which_pic.getAttribute(&quot;title&quot;)</code>的返回值不为空，那么将其赋给<code>text</code>；如果返回值为空值，那么<code>text</code>将被赋为第二个值。<br>三元操作符是<code>if/else</code>的一种变形体，比较简短，逻辑表达不怎么明显，不习惯的话可以用回<code>if/else</code>表达式。</p>
</li>
<li><p>增加了几项检查，函数的代码也变多了。实际工作中，需要自己决定是否真的需要检查，它们针对的是 HTML 文档有可能不在你控制范围内的情况。理想情况下，应该不需要对 HTML 文档做太多的假设。</p>
</li>
</ol>
<h4 id="键盘访问"><a href="#键盘访问" class="headerlink" title="键盘访问"></a>键盘访问</h4><ol>
<li><p><code>prepare_gallery()</code>的核心代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !show_pic(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>也可以使用三元操作符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>用鼠标点击时是没有任何问题的，但是用键盘来的话就不一定了。<br>使用 tab 键是可以移动链接的，再按回车键就可以启用当前链接。<br>使用<code>onkeypress</code>来处理键盘事件，按下键盘的按键会触发该事件。复制一份指令即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line">links[i].onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>更简单的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// js函数之间是可以赋值的</span></span><br><span class="line">links[i].onkeypress = links[i].onclick;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这就是 js 和 html 分离带来的好处<br>把所有的函数和事件都放在了外部文件，只需要修改 js 代码，而不用去修改 html 代码。</p>
</li>
<li><p>onkeypress 的问题<br>在某些浏览器里，按 Tag 键都会触发该函数，现在应该没有这种奇怪的浏览器了。<br>最好不要使用<code>onkeypress</code>事件处理函数，<code>onclick</code>事件处理已经能满足要求，对键盘的支持也相当完美。<br>最终代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_pic</span>(<span class="params">whic_pic</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"default"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 获取 href 属性</span></span><br><span class="line">  <span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br><span class="line">  <span class="comment">// 获取默认结点</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">"default"</span>);</span><br><span class="line">  <span class="comment">// 设置属性</span></span><br><span class="line">  <span class="comment">// 如果 id为 `description`存在，那么执行修改文字，否则忽略</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"description"</span>)) &#123;</span><br><span class="line">    placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br><span class="line">    <span class="comment">// 获取 title 属性</span></span><br><span class="line">    <span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">    <span class="comment">// 获取 p 结点</span></span><br><span class="line">    <span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br><span class="line">    <span class="comment">// 将 p 元素赋值给 nodeValue</span></span><br><span class="line">    p_element.firstChild.nodeValue = title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepare_gallery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">document</span>.getElementsByTagName || <span class="built_in">document</span>.getElementById))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!gallery) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  links = gallery.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="js-与-css-结合"><a href="#js-与-css-结合" class="headerlink" title="js 与 css 结合"></a>js 与 css 结合</h4><ol>
<li><p>id 可以使用在 CSS 样式表里，比如，把图片清单的项目符号去掉，可以得用<code>image_gallery</code>写如下的 CSS 语句。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#image_gallery</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将这些 CSS 语句存入一个外部文件如<code>layout.css</code>，然后再从 gallery.html 的头部<head>引用其。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"layout.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以将其改变为横向</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#image_gallery</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-53bc454ddb197b6284a55ade119fa8c9.png" alt="Image"></p>
</li>
</ol>
<h4 id="DOM-Core-和-HTML-DOM"><a href="#DOM-Core-和-HTML-DOM" class="headerlink" title="DOM Core 和 HTML-DOM"></a>DOM Core 和 HTML-DOM</h4><ol>
<li><p>已经使用的 DOM 方法：</p>
<ul>
<li>getElementById</li>
<li>getElementsByTagName</li>
<li>getAttribute</li>
<li>setAttribute</li>
</ul>
<p>HTML-DOM 提供了一个 forms 对象，可以把下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"form"</span>);</span><br></pre></td></tr></table></figure>

<p>简化为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.forms;</span><br></pre></td></tr></table></figure>

<p>把图片 src 取出来的语句：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.getAttribute(<span class="string">"src"</span>);</span><br></pre></td></tr></table></figure>

<p>简化为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.src;</span><br></pre></td></tr></table></figure>

<p>HTML-DOM 的代码会很短，但是只能用来处理 Web 文档。<br>用 HTML-DOM 重写 show_pic 的话，可以变得更简短：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br></pre></td></tr></table></figure>

<p>简化为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = whic_pic.href;</span><br></pre></td></tr></table></figure>

<p>设置属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br></pre></td></tr></table></figure>

<p>可改为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">placeholder.src = source;</span><br></pre></td></tr></table></figure>
</li>
<li><p>即使了解 HTML-DOM，也要了解 DOM-sore，即使你只决定使用一种，毕竟要阅读别人编写的脚本。</p>
</li>
</ol>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>无</p>
<blockquote>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（7）：CSS-DOM</title>
    <url>/2020/07/18/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89/</url>
    <content><![CDATA[<p>笔记内容：</p>
<ul>
<li>styele 属性</li>
<li>检索样式</li>
<li>改变样式</li>
</ul>
<h4 id="网页的结构"><a href="#网页的结构" class="headerlink" title="网页的结构"></a>网页的结构</h4><ul>
<li><p>三位一体：</p>
<ul>
<li>结构层：由 HTML 或 XHTML 之类的标记语言负责创建；</li>
<li>表示层：由 CSS 负责完成，CSS 描述页面内容应该如何呈现；</li>
<li>行为层：负责内容应该如何响应事件这一问题，js 和 DOM 主宰的领域。</li>
</ul>
</li>
<li><p>分离：</p>
<ul>
<li>使用（X）HTML 搭建文档的结构；</li>
<li>使用 CSS 去设置文档的呈现效果；</li>
<li>使用 DOM 脚本去实现文档的行为。</li>
</ul>
<p>这三种技术之间存在重叠区域。</p>
</li>
</ul>
<h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p>style 属性 包含元素的样式，查询该属性返蜀犬吠日的是一个对象而不是一个简单的字符串。样式存在对象的属性里：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.style.property;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>获取样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 style 的 color 属性：</span></span><br><span class="line">element.style.color;</span><br><span class="line"><span class="comment">// 获取 style 的 font-family 属性：</span></span><br><span class="line">elements.style.fontFamily;</span><br></pre></td></tr></table></figure>

<p>一般样式属性的返回值与它们的设置值都采用同样的计量单位。如果果 font-size 以 em 为单位，那么返回的值也是以 em 为单位。</p>
<p>style 属性只能能过内嵌的方式来获取，一旦样式在外部，则获取不到。</p>
</li>
<li><p>设置样式<br>style 对象的名个属性是可以读写的，可以使用赋值操作来更新样式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.style.property = value;</span><br></pre></td></tr></table></figure>
<p>赋值操作符可以设置任何一种样式，比如 font 之类的速记属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">para.style.font = <span class="string">"2em 'times', serif"</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="DOM-脚本设置样式"><a href="#DOM-脚本设置样式" class="headerlink" title="DOM 脚本设置样式"></a>DOM 脚本设置样式</h4><p>虽然 DOM 设置样式很容易，但是在大多数场合下，应该使用 CSS 去声明样式。</p>
<ul>
<li><p>根据元素的位置设置样式<br>找到该元素后，直接给该元素的 style 对应的属性赋值即可。</p>
</li>
<li><p>根据条件反复设置样式<br>找到元素后，根据条件设置样式。比如表格里隔一个行设置一个背景色，就需要根据条件设置值。</p>
</li>
<li><p>响应事件<br>一般最好使用 CSS 为文档设置样式，但也有一些 CSS 不能处理或者难以部署的情况，这时需要用上 DOM。比如浏览器不能识别伪类的时候，可以使用 js 来解决。</p>
</li>
<li><p>className 属性<br>之前的都是用 DOM 直接设置或修改样式，这是直接让“行为层”干“表示层”的活。<br>与其让 DOM 直接改变元素的样式，不如能过 js 更新元素的 classic 属性。</p>
</li>
</ul>
<h4 id="对函数进行抽象"><a href="#对函数进行抽象" class="headerlink" title="对函数进行抽象"></a>对函数进行抽象</h4><p>一些函数可以做一些小小的改动可以变得更通用，这个过程叫抽象（abstraction）。<br>比如下面这个函数的对象仅适用于 h1 元素，以及 classname 的值为 intro 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleHeaderSiblings</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementsByTagName) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> headers = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"h1"</span>);</span><br><span class="line">  <span class="keyword">var</span> elem;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; headers.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 查找下一个元素节点</span></span><br><span class="line">    elem = getNextElement(headers[i].nextSibling);</span><br><span class="line">    elem.className += <span class="string">"intro"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加两个具体的参数，就可以使其成为更通用的函数：添加 tag 和 theclass 两个参数，并把 h1 改为 tag，intro 改为 theclass。为了增加可读性，把 headers 改为 elems.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleHeaderSiblings</span>(<span class="params">tag, theclass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementsByTagName) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName(tag);</span><br><span class="line">  alert(theclass);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elems.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 查找下一个元素节点</span></span><br><span class="line">    elem = getNextElement(elems[i].nextSibling);</span><br><span class="line">    elem.className += <span class="string">" "</span> + theclass;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，函数的抽象化就完成了。<br>无论何时，发现函数可以抽象，都应该马上去做，这总是一个好主意。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>CSS-DOM 针对的是如何得到和设置 style 对象的各种属性。<br>style 属性不支持外部 css 设置的样式，不过仍然可以利用 style 属性去改变 html 元素的呈现效果。<br>不过一般都应该选择更新 classname 属性，而不是直接更新 style 对象的相关属性。<br>使用 js 干 css 的活无非就俩原因，一是 css 无法干这种活，二是一些残疾浏览器不支持最新属性。js 能够重复执行一组操作，这是 css 做不了的。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（6）：动态创建标记</title>
    <url>/2020/07/13/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89/</url>
    <content><![CDATA[<p>网页的结构由标记语言创建，js 可用来改变细节而不改变结构。<br>同样，js 也可用来改变网页的结构和内容。</p>
<h4 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h4><ol>
<li><p><code>document.write</code>：<br><code>write</code>方法可以把字符串插入到文档里。<br>使用方法，编辑 test.html 文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt; 这是一个段落 &lt;/p&gt;"</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-4bd0170134f423a47cb3fe7ac79348e8.png" alt="Image"></p>
<p>缺点：这样做会使得标记与 js 代码混杂在一起，代码即不容易理解，也无法享受代码与结构分离的好处。应避免<code>&lt;body&gt;</code>乱用<code>&lt;script&gt;</code>标签，尽量减少使用<code>document.write</code>。</p>
</li>
<li><p>innerHTML 属性<br>innerHTML 属性可以用来读写给定元素里的 HTML 内容。<br>读，编辑 test.html 文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">em</span>&gt;</span>my<span class="tag">&lt;/<span class="name">em</span>&gt;</span> content!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后编写 example.js （记得把 example.js 文件加到 HTML 文件里面）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">  alert(test.innerHTML);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-29ea46299e5678b96642faeb3e882c10.png" alt="Image"><br>结果显示，innerHTML 只是粗暴地把元素里面所有的代码找出来。当需要把插入大段的 HTML 文件时，它就有用武之地了。</p>
<p>写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">  test.innerHTML = <span class="string">"&lt;p&gt; Insert in &lt;em&gt;innerHTML&lt;/em&gt; &lt;/p&gt;"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-0c88b799d4b1fd0fd6738b5d74f8adbe.png" alt="Image"><br>直接赋值对应的即可，赋值后会把原来的 html 代码覆盖掉。<br>这是 HTML 专有属性，不能用于其它标记语言文档，如 xhtml 文档。</p>
</li>
</ol>
<h4 id="DOM-方法"><a href="#DOM-方法" class="headerlink" title="DOM 方法"></a>DOM 方法</h4><ol>
<li><p>添加节点<br>编辑 test.html，让<code>id=test</code>的 div 标签内容为空。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把一段文本插入到上面的 div 元素，用 DOM 的话来形容，添加一个 p 元素节点，再把这个节点作为 div 元素的子节点。<br>具体步骤：</p>
<ol>
<li>createElement 创建一个新元素:<br>语法：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(nodeName);</span><br></pre></td></tr></table></figure>
创造一个 p 元素结点并赋值给一个变量：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br></pre></td></tr></table></figure></li>
<li>appendChild 把新元素插入节点数：<br>使用 appendChild 方法。<br>语法：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parent.appendChild(child);</span><br></pre></td></tr></table></figure>
例子：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line"><span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">test.appendChild(para);</span><br></pre></td></tr></table></figure>
或者：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).appendChild(<span class="built_in">document</span>.createElement(<span class="string">"p"</span>));</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>添加文本节点<br>使用 crateTextNode 方法。<br>语法与 createElement 相似：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createTextNode(text);</span><br></pre></td></tr></table></figure>

<p>创建一个内容为 “test”的文本节点并赋值变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure>

<p>使用 appendChild 添加到 p 元素结点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">para.appendChild(txt);</span><br></pre></td></tr></table></figure>

<p>最终代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">  <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">  test.appendChild(para);</span><br><span class="line">  <span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="string">"test"</span>);</span><br><span class="line">  para.appendChild(txt);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-e4775390176cc0a1ea597996f86e110c.png" alt="Image"></p>
</li>
<li><p>一个复杂的例子：<br>创建一个以下节点：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">em</span>&gt;</span>my<span class="tag">&lt;/<span class="name">em</span>&gt;</span> content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个 html 包含一个 p 元素节点，p 元素里又包含一个文本节点“This is”，一个 em 结点和一个文本节点“contents.”。<br>那么只要依次创建加入即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">  <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">  test.appendChild(para);</span><br><span class="line">  <span class="comment">// 添加第一个文本节点</span></span><br><span class="line">  <span class="keyword">var</span> txt_0 = <span class="built_in">document</span>.createTextNode(<span class="string">"This is "</span>);</span><br><span class="line">  para.appendChild(txt_0);</span><br><span class="line">  <span class="comment">// 添加em节点</span></span><br><span class="line">  <span class="keyword">var</span> em = <span class="built_in">document</span>.createElement(<span class="string">"em"</span>);</span><br><span class="line">  <span class="keyword">var</span> em_txt = <span class="built_in">document</span>.createTextNode(<span class="string">"my"</span>);</span><br><span class="line">  em.appendChild(em_txt);</span><br><span class="line">  para.appendChild(em);</span><br><span class="line">  <span class="comment">// 添加第三个节点</span></span><br><span class="line">  <span class="keyword">var</span> text_1 = <span class="built_in">document</span>.createTextNode(<span class="string">" content."</span>);</span><br><span class="line">  para.appendChild(text_1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-5d46cb4a7a2ddad1f8f81aac97231905.png" alt="Image"></p>
</li>
</ol>
<h4 id="图片库"><a href="#图片库" class="headerlink" title="图片库"></a>图片库</h4><p>里面只有一个图片和一段文字是为<code>show_pic</code>服务，这很些元素的存在是为了让 DOM 处理它们，那么使用 DOM 来创建它们是最合适的。</p>
<ol>
<li><p>先把文档里的相关元素删掉。</p>
</li>
<li><p>先编写一个函数 <code>prepare_placeholder</code> 并把它放进 <code>show_pic.js</code>文件，然后在文档加载时调用此函数。</p>
</li>
<li><p>函数的任务：</p>
<ol>
<li>创建一个 img 元素节点；</li>
<li>设置这个节点的 id 属性；</li>
<li>设置这个节点的 src 属性；</li>
<li>设置这个节点的 alt 属性；</li>
<li>创建一个 p 元素节点；</li>
<li>设置这个节点的 id 属性；</li>
<li>创建一个文本节点；</li>
<li>把这个文本节点追加到 p 元素上；</li>
<li>把 p 元素和 img 元素插入到 gallery.html 文档里。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建img元素</span></span><br><span class="line"><span class="keyword">var</span> placeholder = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">placeholder.setAttribute(<span class="string">"id"</span>, <span class="string">"default"</span>);</span><br><span class="line">placeholder.setAttribute(<span class="string">"src"</span>, <span class="string">"images/default.jpg"</span>);</span><br><span class="line">placeholder.setAttribute(<span class="string">"alt"</span>, <span class="string">"my image gallery"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建p元素</span></span><br><span class="line"><span class="keyword">var</span> description = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">description.setAttribute(<span class="string">"id"</span>, <span class="string">"description"</span>);</span><br><span class="line"><span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="string">"choose an image"</span>);</span><br><span class="line">description.appendChild(txt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入到文档中</span></span><br><span class="line"><span class="keyword">var</span> body_element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line">body_element.appendChild(placeholder);</span><br><span class="line">body_element.appendChild(description);</span><br></pre></td></tr></table></figure>

<p>上述代码有一个完成工作了，但是一切都是依赖于这些元素刚好在 body 标签的末尾。如果在中间的话，就需要用到其它方法了。</p>
</li>
<li><p>已有元素前插入元素<br>DOM 提供了名为 <code>insertBefore()</code> 方法。使用此方法时，必须告诉它三件事：</p>
<ol>
<li>新元素：你想插入的元素；</li>
<li>目标元素：你想反把这个元素插入到哪个元素之前；</li>
<li>父元素：目标元素的父元素。</li>
</ol>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentElement.insertBefore(newElement, targetElement);</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">gallery.parentElement.insertBefore(placeholder, gallery);</span><br></pre></td></tr></table></figure>

<p>这样就把元素插入到图片元素之前了。</p>
</li>
<li><p>元素后插入元素<br>DOM 没有提供这个方法，但是可以自己写一个 <code>insertAtfer</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newElement, targetElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取父元素</span></span><br><span class="line">  <span class="keyword">var</span> parent = targetElement.parentNode;</span><br><span class="line">  <span class="comment">// 如果最后一个结点元素与目标结点相同</span></span><br><span class="line">  <span class="keyword">if</span> (parent.lastChild == targetElement) &#123;</span><br><span class="line">    <span class="comment">// 直接加到末尾</span></span><br><span class="line">    parent.appendChild(newElement);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 找到目标结点的下一个结点，再插入到结点前</span></span><br><span class="line">    parent.insertBefore(newElement, targetElement.nextSibling);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法和<code>insertAfter</code>一样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentElement.insertAfter(newElement, targetElement);</span><br></pre></td></tr></table></figure>

<p>还需要测试浏览器是否支持，所以最终代码清单为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepare_placeholder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.createElement) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.createTextNode) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建img元素</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">  placeholder.setAttribute(<span class="string">"id"</span>, <span class="string">"default"</span>);</span><br><span class="line">  placeholder.setAttribute(<span class="string">"src"</span>, <span class="string">"images/default.jpg"</span>);</span><br><span class="line">  placeholder.setAttribute(<span class="string">"alt"</span>, <span class="string">"my image gallery"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建p元素</span></span><br><span class="line">  <span class="keyword">var</span> description = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">  description.setAttribute(<span class="string">"id"</span>, <span class="string">"description"</span>);</span><br><span class="line">  <span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="string">"choose an image"</span>);</span><br><span class="line">  description.appendChild(txt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">  insertAfter(placeholder, gallery);</span><br><span class="line">  insertAfter(description, placeholder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前为止，创建的这些新内容对这个页面来说并不算是新的，比如，页面加载后，标记中就已经存在 title 属性了。通过<code>createElement</code>添加的新段落也是基于嵌入在脚本中的标记添加的，实际上，我们创建的所有一切都包含在初始页面。</p>
</li>
</ol>
<p>那么怎么才能真正得到原来不存在初始页面的内容呢？</p>
<h4 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h4><p>使用 Ajax 就可以做到只更新页面中的一小部分，其它内容都不需要重新加载。<br>Ajax 的主要优势是对页面的请求以异步方式发送到服务器。</p>
<ol>
<li><p>XMLHttpRequest 对象<br>将下面的代码放进 ajax.html。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"new"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./scripts/addLoadEvent.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./scripts/getHTTPObject.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./scripts/getNewContent.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 addLoadEvent.js、getHTTPObject.js 和 getNewContent.js 都位于 scripts 的文件夹中。<br>为了模拟服务器响应，在 ajax.html 同目录下创建一个 example.txt 文件，包含以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This was loaded as asynchronously!</span><br></pre></td></tr></table></figure>

<p>该文件充当服务器的输出。</p>
<p>为了兼容不同 IE 版本的浏览器，需要写很多兼容代码，不过 IE 早就应该扫进历史的垃圾堆里了，所以就不兼容了。<br>创建一个 XMLHttpRequest 对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHTTPObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = getHTTPObject();</span><br></pre></td></tr></table></figure>

<p>XMLHttpRequest 对象有许多方法，其中最有用的是 open 方法，它用来指定服务器上将要访问的文件，指定请求的类型：GET、POST 或 SEND。该方法第三个参数用于指定请求是否以异步方式发送和处理。</p>
<p>在 getNewContent.js 文件中添加以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewContent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = getHTTPObject();</span><br><span class="line">  <span class="keyword">if</span> (request) &#123;</span><br><span class="line">    <span class="comment">// 发起请求同一目录下的文件</span></span><br><span class="line">    request.open(<span class="string">"GET"</span>, <span class="string">"example.txt"</span>, <span class="literal">true</span>);</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 取出并保存数据</span></span><br><span class="line">        <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">        <span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(request.responseText);</span><br><span class="line">        para.appendChild(txt);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"new"</span>).appendChild(para);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    request.send(<span class="literal">null</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Sorry, your browser doesn't support XMLHttpRequest"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>request.readyState</code> 有 5 个可能的值：</p>
<ul>
<li>0 表示初始化</li>
<li>1 表示正在加载</li>
<li>2 表示加载完毕</li>
<li>3 表示正在交互</li>
<li>4 表示完成</li>
</ul>
<p>只要 readyState 属性的值变成了 4，就可以访问服务器发送回来的数据。<br>responseText 是保存文本字符串的数据，responseXML 属性是保存 Content-Type 头部中指定为“text/xml”的数据，一个是 DocumentFragment 对象。</p>
<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-199048ce82aa77a1efe6ff8bc57269c6.png" alt="Image"></p>
<p>异步请求有一个异步性的问题，脚本发送 XMLHttpRequest 请求之后，仍会继续执行，不会等待响应返回。<br>可以试着加两个警告框，在函数结尾和 onreadystateChange 后添加。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewContent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = getHTTPObject();</span><br><span class="line">  <span class="keyword">if</span> (request) &#123;</span><br><span class="line">    <span class="comment">// 发起请求同一目录下的文件</span></span><br><span class="line">    request.open(<span class="string">"GET"</span>, <span class="string">"example.txt"</span>, <span class="literal">true</span>);</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        alert(<span class="string">"respose received"</span>);</span><br><span class="line">        <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">        <span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(request.responseText);</span><br><span class="line">        para.appendChild(txt);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"new"</span>).appendChild(para);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    request.send(<span class="literal">null</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Sorry, your browser doesn't support XMLHttpRequest"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  alert(<span class="string">"function done"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果显示在函数结尾处的弹窗更快。</p>
</li>
<li><p>Hijax，渐进增强地使用 Ajax。<br>登录表单添加 Ajax 功能，需要拦截提交表单的请求（Hijax），让 XMLHttpRequest 请求代为发送，再取消 onsubmit 的默认请求。这样登录就更方便，用户感觉就更快了。</p>
</li>
</ol>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>本次学习了几种不同的向浏览器里的文档动态添加标记的方法。<br>传统：</p>
<ul>
<li>document.write 方法</li>
<li>innerHTML 属性</li>
</ul>
<p>DOM 方法：</p>
<ul>
<li>createElement 方法</li>
<li>createTextNode 方法</li>
<li>appendChild 方法</li>
<li>insertBefore 方法</li>
</ul>
<p>用 createElement 和 createTextNode 创造的只是孤儿，要用 appendChild 和 insertBefore 才能把这些孤儿插入到文档的节点树，呈现在浏览器的窗口。</p>
<p>对图片库的改进和 insertAfter 方法的创建，还有 Ajax 和 异步请求。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（8）：动画</title>
    <url>/2020/07/20/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%888%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JavaScript-学习笔记（8）：动画效果"><a href="#JavaScript-学习笔记（8）：动画效果" class="headerlink" title="JavaScript-学习笔记（8）：动画效果"></a>JavaScript-学习笔记（8）：动画效果</h1><p>动画是 CSS-DOM 最具动感的内容，让网页上的元素动起来。</p>
<h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p>js 可以按照预定的时间重复调用函数，，这意味着我们可以随着时间的失衡而不断改变某个元素的样式。</p>
<ul>
<li><p>位置：网页元素在浏览器窗口里的位置是一种表示性信息，一般由 CSS 负责。例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">element</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面的 DOM 代码实现了同样的效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">element.style.top = <span class="string">"50px"</span>;</span><br><span class="line">element.style.left = <span class="string">"100px"</span>;</span><br></pre></td></tr></table></figure>

<p>假设有这么一个元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span>Wheel<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再用 js 设置位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加到<code>windows.onload</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = func;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      oldonload();</span><br><span class="line">      func();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">addLoadEvent(positionMessage);</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-1e23b6fa027df6909b85e241f1859807.png" alt="Image"></p>
<p>再编写一个移动的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.left = <span class="string">"200px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-1e3e5ff744e8dfe2761e9107a0015e05.png" alt="Image"></p>
<p>这是立即改变位置，要想获得动画效果，还要让位置随着时间的改变而不断改变。</p>
</li>
<li><p>时间</p>
<p>js 的 setTimeout 能够让某个经过一段预定的时间后才开始执行。<br>用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">variable = setTimeout(<span class="string">"function"</span>, interval);</span><br></pre></td></tr></table></figure>

<p>可以用 clearTimeout 的函数来消 “等待执行”队列的某个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">clearTimeout(variable);</span><br></pre></td></tr></table></figure>

<p>修改 postitonMessage 函数，让其在 5 秒后才调用 moveMessage 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line">  movement = setTimeout(<span class="string">"moveMessage()"</span>, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>positionMessage 依旧在加载时调用。</p>
</li>
<li><p>时间递增量</p>
<p>动画应该是一个渐变的过程，元素应该从出发点逐步移动到目的点，而不是一下子跳过去。</p>
<p>更新 moveMessage 函数，让元素以逐渐移动的方式发生。步骤：</p>
<ul>
<li>获得元素的当前位置；</li>
<li>如果元素已经到达目的地，则退出；</li>
<li>如果元素尚未到达它的目的地，则把它向目的地移动；</li>
<li>一段时间后重复上述步骤。</li>
</ul>
<p>获取位置的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left);</span><br><span class="line"><span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.top);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有使用 DOM 脚本或 style 属性分配位置后，这里的 parseInt 才起作用。</p>
</blockquote>
<p>编辑 moveMessage 函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  <span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left);</span><br><span class="line">  <span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.top);</span><br><span class="line">  <span class="comment">// 如果相等就退出递归</span></span><br><span class="line">  <span class="keyword">if</span> (xpos == <span class="number">200</span> &amp;&amp; ypos == <span class="number">100</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 如果不相等就继续加减</span></span><br><span class="line">  <span class="keyword">if</span> (xpos &lt; <span class="number">200</span>) xpos++;</span><br><span class="line">  <span class="keyword">if</span> (xpos &gt; <span class="number">200</span>) xpos--;</span><br><span class="line">  <span class="keyword">if</span> (ypos &lt; <span class="number">100</span>) ypos++;</span><br><span class="line">  <span class="keyword">if</span> (ypos &gt; <span class="number">100</span>) ypos--;</span><br><span class="line">  elem.style.left = xpos + <span class="string">"px"</span>;</span><br><span class="line">  elem.style.top = ypos + <span class="string">"px"</span>;</span><br><span class="line">  <span class="comment">// 每隔10毫秒递归</span></span><br><span class="line">  movement = setTimeout(<span class="string">"moveMessage()"</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象</p>
<p>上面的代码只能完成特定的函数，如果把里面的常数改为变量，那么就通用性就会大大提升。</p>
<p>将移动元素的 ID、元素的目的地的位置，以及停顿间隔改为变量。<br>定义一个新的函数 <code>function moveElement(elementID, final_x, final_y, interval)</code>，具体代码为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveElement</span>(<span class="params">elementID, final_x, final_y, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(elementID)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(elementID);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left);</span><br><span class="line">  <span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.top);</span><br><span class="line">  <span class="comment">// 如果相等就退出递归</span></span><br><span class="line">  <span class="keyword">if</span> (xpos == final_x &amp;&amp; ypos == final_y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 如果不相等就继续加减</span></span><br><span class="line">  <span class="keyword">if</span> (xpos &lt; final_x) xpos++;</span><br><span class="line">  <span class="keyword">if</span> (xpos &gt; final_x) xpos--;</span><br><span class="line">  <span class="keyword">if</span> (ypos &lt; final_y) ypos++;</span><br><span class="line">  <span class="keyword">if</span> (ypos &gt; final_y) ypos--;</span><br><span class="line">  elem.style.left = xpos + <span class="string">"px"</span>;</span><br><span class="line">  elem.style.top = ypos + <span class="string">"px"</span>;</span><br><span class="line">  <span class="comment">// 每隔 interval 毫秒递归</span></span><br><span class="line">  <span class="keyword">var</span> reqpeat =</span><br><span class="line">    <span class="string">"moveElement('"</span> +</span><br><span class="line">    elementID +</span><br><span class="line">    <span class="string">"',"</span> +</span><br><span class="line">    final_x +</span><br><span class="line">    <span class="string">","</span> +</span><br><span class="line">    final_y +</span><br><span class="line">    <span class="string">","</span> +</span><br><span class="line">    interval +</span><br><span class="line">    <span class="string">")"</span>;</span><br><span class="line">  movement = setTimeout(reqpeat, interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 moveElement 函数。<br>创建一个名为 message.html 的文件，包含一个 <code>id=message</code> 的 p 元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Position<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span>Wheel<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再编写一个 positionMessage.js 的文件，添加 positionMessage() 函数：<br><code>id=message2</code> 的 p 元素，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line">  moveElement(<span class="string">"message"</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addLoadEvent(positionMessage);</span><br></pre></td></tr></table></figure>

<p>再在 HTML 文件上添加相对应的 js 文件，就可以显示出简单的动画效果。<br>改变 interval 的值即可改变动画的速度，改变 x 和 y 的值即可改变最终位置。</p>
<p>添加一个 <code>id=message2</code> 的 p 元素，<code>&lt;p id=&quot;message2&quot;&gt;Whoal&lt;/p&gt;</code>，再在 positionMessage 函数中添加相对应的操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> elem_2 = <span class="built_in">document</span>.getElementById(<span class="string">"message2"</span>);</span><br><span class="line">  elem_2.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem_2.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem_2.style.top = <span class="string">"50px"</span>;</span><br><span class="line"></span><br><span class="line">  moveElement(<span class="string">"message"</span>, <span class="number">125</span>, <span class="number">25</span>, <span class="number">10</span>);</span><br><span class="line">  moveElement(<span class="string">"message2"</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-ca5004a8c28eeed4108b85f6fafd05ab.png" alt="Image"></p>
</li>
</ul>
<h4 id="实用的动画"><a href="#实用的动画" class="headerlink" title="实用的动画"></a>实用的动画</h4><p>上面的动画用处不大，还有可能使用户厌烦。</p>
<ul>
<li><p>提出问题：有一个怨念一系列链接的网页。当用用户的鼠标指针悬停在某个链接上时，展示预览一张图片。<br>添加一个文件 list.html，代码为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web Design<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web Design<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>These are the things you should know:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"linklist"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./structure.html"</span>&gt;</span>structure<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./presentation.html"</span>&gt;</span>presentation<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./behavior.html"</span>&gt;</span>behavior<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这次需要在 onmouseover 事件被触发时显示一张图片。</p>
</li>
<li><p>解决问题：</p>
<ul>
<li>为所有的预览图片生成一张“集体照”形式的图片；</li>
<li>隐藏这张集体照图片的绝大部分。</li>
<li>当用户把鼠标指针悬停在某个链接上方时，只显示这张“集体照”图片相应的部分。</li>
</ul>
<p>集体照：<br><img src="https://pic4.zhimg.com/80/v2-488b3f4eef617e261baf1f1d07cb26ce.png" alt="Image"><br>添加到 list.html 最后面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./topic.png"</span> <span class="attr">alt</span>=<span class="string">"building blocks of web Design"</span> <span class="attr">id</span>=<span class="string">"preview"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>CSS</p>
<p>css 的 overflow 属性用来处理一个元素的尺寸超出其容器尺寸的情况。<br>overflow 属性有 4 种取值：visible（不作任何改动）、hidden（将溢出部分隐藏）、scroll（隐藏，但提供一个滚动条）和 auto（类似 scroll，但只有溢出时才显示滚动条）。</p>
<p>这里选取 hidden 属性。</p>
<p>添加 div，将 img 包进去，再添加对应的样式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"slideshow"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./topic.png"</span> <span class="attr">alt</span>=<span class="string">"building blocks of web Design"</span> <span class="attr">id</span>=<span class="string">"preview"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#slideshow</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来解决的时，让网页对用户的操作做出正确响应，当鼠标指针指在某个地方时，把对应的图片显示出来。</p>
</li>
<li><p>JavaScript</p>
<p>编写一个 prepareSlideshow 来完成工作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareSlideshow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementsByTagName) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"linklist"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"preview"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为图片应用样式</span></span><br><span class="line">  <span class="keyword">var</span> preview = <span class="built_in">document</span>.getElementById(<span class="string">"preview"</span>);</span><br><span class="line">  preview.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  preview.style.left = <span class="string">"0px"</span>;</span><br><span class="line">  preview.style.top = <span class="string">"0px"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"linklist"</span>);</span><br><span class="line">  <span class="keyword">var</span> links = list.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line">  links[<span class="number">0</span>].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    moveElement(<span class="string">"preview"</span>, <span class="number">-100</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  links[<span class="number">1</span>].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    moveElement(<span class="string">"preview"</span>, <span class="number">-200</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  links[<span class="number">2</span>].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    moveElement(<span class="string">"preview"</span>, <span class="number">-300</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addLoadEvent(prepareSlideshow);</span><br></pre></td></tr></table></figure>

<p>将 js 文件添加到 html 文件，运行后将鼠标移到对应的链接上会出来动画效果：<br><img src="https://pic4.zhimg.com/80/v2-86d44aa0dc6cffbe084a325a91092499.png" alt="Image"></p>
<p>但是来回移动时会出现混乱的情况。</p>
</li>
<li><p>变量的作用域</p>
<p>动画效果出错是由全局变量引起的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">movement = setTimeout(reqpeat, interval);</span><br></pre></td></tr></table></figure>

<p>但是直接使用局部变量也会出错，需要一种介乎二者之间的东西，也就是属性。<br>js 允许为元素创建属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.property = value;</span><br></pre></td></tr></table></figure>

<p>所以更改为属性即可解决问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">elem.movement = setTimeout(reqpeat, interval);</span><br></pre></td></tr></table></figure>
</li>
<li><p>改进动画效果：<br>每次移动 1px，速度未免过慢。<br>可以设置每次前进这个距离的十分之一。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dist = (final_x - xpos) / <span class="number">10</span>;</span><br><span class="line">xpos = xpos + dist;</span><br></pre></td></tr></table></figure>

<p>当差距小于 10 的时候，用这个差距除 10 的结果小于 1，将移动不了。<br>解决方法是使用 Math 对象的 ceil 函数，它可以返回一个不小于 dist 的值的一个整数，用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil(number);</span><br></pre></td></tr></table></figure>

<p>最终代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveElement</span>(<span class="params">elementID, final_x, final_y, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(elementID)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(elementID);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 声明 dist</span></span><br><span class="line">  <span class="keyword">var</span> dist = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left);</span><br><span class="line">  <span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.top);</span><br><span class="line">  <span class="comment">// 如果相等就退出递归</span></span><br><span class="line">  <span class="keyword">if</span> (xpos == final_x &amp;&amp; ypos == final_y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 如果不相等就继续加减</span></span><br><span class="line">  <span class="keyword">if</span> (xpos &lt; final_x) &#123;</span><br><span class="line">    dist = <span class="built_in">Math</span>.ceil((final_x - xpos) / <span class="number">10</span>);</span><br><span class="line">    xpos = xpos + dist;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (xpos &gt; final_x) &#123;</span><br><span class="line">    dist = <span class="built_in">Math</span>.ceil((xpos - final_x) / <span class="number">10</span>);</span><br><span class="line">    xpos = xpos - dist;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ypos &lt; final_y) &#123;</span><br><span class="line">    dist = <span class="built_in">Math</span>.ceil((final_y - ypos) / <span class="number">10</span>);</span><br><span class="line">    ypos = ypos + dist;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ypos &gt; final_y) &#123;</span><br><span class="line">    dist = <span class="built_in">Math</span>.ceil((ypos - final_y) / <span class="number">10</span>);</span><br><span class="line">    ypos = ypos - dist;</span><br><span class="line">  &#125;</span><br><span class="line">  elem.style.left = xpos + <span class="string">"px"</span>;</span><br><span class="line">  elem.style.top = ypos + <span class="string">"px"</span>;</span><br><span class="line">  <span class="comment">// 每隔 interval 毫秒递归</span></span><br><span class="line">  <span class="keyword">var</span> reqpeat =</span><br><span class="line">    <span class="string">"moveElement('"</span> +</span><br><span class="line">    elementID +</span><br><span class="line">    <span class="string">"',"</span> +</span><br><span class="line">    final_x +</span><br><span class="line">    <span class="string">","</span> +</span><br><span class="line">    final_y +</span><br><span class="line">    <span class="string">","</span> +</span><br><span class="line">    interval +</span><br><span class="line">    <span class="string">")"</span>;</span><br><span class="line">  <span class="comment">// movement = setTimeout(reqpeat, interval);</span></span><br><span class="line">  elem.movement = setTimeout(reqpeat, interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加安全检查<br>诸如 elem.style.left 是否存在等。</p>
</li>
<li><p>生成 HTML 标记：<br>一些内容是为了存在动画效果而存在的，但是如果不支持 js，那么那些内容留在那里岂不是很尴尬，所以干脆让 js 来生成这些标记。</p>
</li>
</ul>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>实现动画效果并不难，问题是尖不应该使用动画。<br>动画技术可以让我们创建出很多非常酷的效果，但四处移动的元素用处不大。现在有一个通用性的函数，在有必要创建动画效果时帮上大忙。</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（9）：HTML5</title>
    <url>/2020/07/22/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%889%EF%BC%89/</url>
    <content><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-806d2ac14c387bdd9db1b26b581320ec.jpg" alt="Image"></p>
<h1 id="JavaScript-笔记（9）：HTML5"><a href="#JavaScript-笔记（9）：HTML5" class="headerlink" title="JavaScript-笔记（9）：HTML5"></a>JavaScript-笔记（9）：HTML5</h1><h4 id="HTML5-简介"><a href="#HTML5-简介" class="headerlink" title="HTML5 简介"></a>HTML5 简介</h4><p>HTML5 是 HTML 当前及未来的新标准。</p>
<p>web 设计有三个层：结构层、样式层、行为层，这三个层分别使用 HTML、CSS 和 JavaScript 三个技术。HTML5 将上面三个层装入一个小集合，也仅仅只是一个集合。<br>HTML5 添加了很多新的标记元素，详情 <a href="http://www.w3.org/TR/html5" target="_blank" rel="noopener">http://www.w3.org/TR/html5</a>。<br>将文档“升级”到 HTML5，只需把文档类型声明改成<code>&lt;!DOCTYPE html&gt;</code>即可。</p>
<p>HTML5 的兼容非常强，缺斤短两的 HTML5 文档都可以完美地通过验证。</p>
<h4 id="忠告"><a href="#忠告" class="headerlink" title="忠告"></a>忠告</h4><p>一个工具：Modernizr（<a href="https://modernizr.com/" target="_blank" rel="noopener">https://modernizr.com/</a>），这是一个开源 js 库，利用其富特性检测功能，对 HTML5 文档进行更好的控制。</p>
<p>在文档中嵌入 Modernizr 后，它会随着页面加载而变一些小戏法。</p>
<p>首先，它会修改 <code>&lt;html&gt;</code> 的 class 属性，要使用它编写文档，通常要给<code>&lt;html&gt;</code>属性添加一个 no-js 类：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">class</span>=<span class="string">"no-js"</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用这个类，可以浏览器不支持 JavaScript 的情况下应用 CSS 样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">;<span class="selector-class">.nojs</span> <span class="selector-tag">selector</span> &#123;</span><br><span class="line">    style properties;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，它还会检测浏览器可以支持的各种特性，并添加相应的类名。<br>实际情况是浏览器会支持部分特性，不支持另一些特性，这时，类名中就会间或出现 features 和 no-feature。</p>
<p>它还可以帮一些老旧浏览器处理 <code>&lt;section&gt;</code> 和 <code>&lt;article&gt;</code> 等新 HTML5 元素。</p>
<p>使用它非常简单，从 <a href="http://www.modernizr.com/" target="_blank" rel="noopener">http://www.modernizr.com/</a> 下载它，然后在文档的<code>&lt;head&gt;</code>中添加该脚本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"modernizr-1.5.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一定要把这个脚本放在<head>元素中，因为放在文档开头，可以在加载其它标记之前先加载它，以便能更好地创建 HTML5 元素。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>一些有关 Canvas、视频/音频以及表单的例子，需要以下浏览器：</p>
<ul>
<li>苹果 Safari 5+</li>
<li>Chrome 6+</li>
<li>Firefox 3.6+</li>
<li>IE 9+</li>
<li>opera 10.6+</li>
</ul>
<h5 id="1-Canvas"><a href="#1-Canvas" class="headerlink" title="1. Canvas"></a>1. Canvas</h5><p>浏览器一般只能显示静态图片，使用 GIF 或许可以实现一些动画，或者使用 CSS 加 JavaScript 也能变化一些样式。<br>但 HTML5 的<code>&lt;Canvas&gt;</code> 元素可以动态创建和操作图形图像。<br>支起一张“画布”：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"draw-in-me"</span> <span class="attr">width</span>=<span class="string">"120"</span> <span class="attr">height</span>=<span class="string">"40"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Powered by HTML5 canvas！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上面作画需要了解详细的绘画方法，参考<code>&lt;canvas&gt;</code>元素规范(<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html" target="_blank" rel="noopener">http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html</a>)</p>
<p>用<code>&lt;Canvas&gt;</code> 画一个圆角小黑盒子，带有 2 像素宽的白色描边效果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"draw-in-me"</span>);</span><br><span class="line">  <span class="keyword">if</span> (canvas.getContext) &#123;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(<span class="number">120.0</span>, <span class="number">32.0</span>);</span><br><span class="line">    ctx.bezierCurveTo(<span class="number">120.0</span>, <span class="number">36.4</span>, <span class="number">116.4</span>, <span class="number">40.0</span>, <span class="number">112.0</span>, <span class="number">40.0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">8.0</span>, <span class="number">40.0</span>);</span><br><span class="line">    ctx.bezierCurveTo(<span class="number">3.6</span>, <span class="number">40.0</span>, <span class="number">0.0</span>, <span class="number">36.4</span>, <span class="number">0.0</span>, <span class="number">32.0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">0.0</span>, <span class="number">8.0</span>);</span><br><span class="line">    ctx.bezierCurveTo(<span class="number">0.0</span>, <span class="number">3.6</span>, <span class="number">3.6</span>, <span class="number">0.0</span>, <span class="number">8.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">112.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    ctx.bezierCurveTo(<span class="number">116.4</span>, <span class="number">0.0</span>, <span class="number">120.0</span>, <span class="number">3.6</span>, <span class="number">120.0</span>, <span class="number">8.0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">120.0</span>, <span class="number">32.0</span>);</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.lineWidth = <span class="number">2.0</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">"rgb(255, 255, 255)"</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = draw;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-e1c8ba6c44d4a642fe4ee1e4df2dcad1.png" alt="Image"></p>
<h5 id="2-音频和视频"><a href="#2-音频和视频" class="headerlink" title="2. 音频和视频"></a>2. 音频和视频</h5><ul>
<li>HTML 的 <code>&lt;video&gt;</code>元素在文档中嵌入影片以及影片交互定义了一种标准方式，同时也把嵌入操作简化成了一个标签：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不支持 &lt;video&gt; 的替代内容  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"movie.mp4"</span>&gt;</span>Download movie.mp4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同样，音频也是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"audio.mp3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"audio.mp3"</span>&gt;</span>Download audio.mp3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>自定义控件<br>浏览器显示 <code>&lt;video&gt;</code>元素时，会为其添加一些与浏览器样式统一的标准播放控件，要想自定义这些控件的外观，或者添加新的控件，可以通过 DOM 属性来实现。主要有：</p>
<ul>
<li>currentTime，返回当前播放的位置，以秒表示；</li>
<li>duration，返回媒体的总时长，以秒表示，对流媒体返回无穷大；</li>
<li>paused，表示是否处于暂停；</li>
<li>play，在媒体播放开始时发生；</li>
<li>pause，在媒体暂停时发生；</li>
<li>loadedata，在媒体可以从当前播放位置开始播放时发生；</li>
<li>ended，在媒体已播放完成而停止时发生。</li>
</ul>
<p>记住，无论创建什么控件，都别忘了在<code>&lt;video&gt;</code>元素中添加 control 控件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样才会显示控制条：<br><img src="https://pic4.zhimg.com/80/v2-827cdf4e9596f102b9f9a1609a839236.png" alt="Image"></p>
</li>
</ul>
<h5 id="3-表单"><a href="#3-表单" class="headerlink" title="3. 表单"></a>3. 表单</h5><p>传统的表单可用的输入控件类型很少，文本框、单选按钮、复选框对简单的表单是够了，但需要更多交互功能的时候，仍需要 DOM 上阵。<br>HTML5 提供了新的输入型表单：</p>
<ul>
<li>email，输入邮箱</li>
<li>url，输入 url</li>
<li>date，输入日期和时间</li>
<li>number，输入数值</li>
<li>range，用于生成滑动条</li>
<li>search，用于搜索框</li>
<li>tel，用于输入电话号码</li>
<li>color，用于选择颜色</li>
</ul>
<p>新的属性：</p>
<ul>
<li>autocomplete，用于为文本（text）输入框添加一组建议的输入项；</li>
<li>autofocus，用于让表单元素自动获得焦点；</li>
<li>form，用于对<code>&lt;form&gt;</code>标签外部的表单元素分组；</li>
<li>min、max 和 step，用在范围和数值输入框中；</li>
<li>pattern，用于定义一个正则表达式，以便验证输入的值；</li>
<li>placeholder，用于在文本输入框中显示临时性的提示信息；</li>
<li>required，表示必填</li>
</ul>
<p>使用的时候要检测浏览器是否支持对应的控件，可以使用 inputtypes.type 属性，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Modernizr.inputtypes.date) &#123;</span><br><span class="line">  <span class="comment">// 生成日期选择器的脚本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查属性，可以使用 input.attribute 属性，如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Modernizr.input.placeholder) &#123;</span><br><span class="line">  <span class="comment">// 生成占位符提示信息的脚本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有使用 Modernizr，可以使用 inputSupportType 函数来检查浏览器是否支持某种输入控件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inpurtSupportsType</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">document</span>.createElement) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">    input.setAttribute(<span class="string">'type'</span>, type);</span><br><span class="line">    <span class="keyword">if</span>(input.type == <span class="string">'text &amp;&amp; type != '</span>text<span class="string">')&#123;</span></span><br><span class="line"><span class="string">        return false;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    else&#123;</span></span><br><span class="line"><span class="string">        return true;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>使用方式和 modernizr 一样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!inputSupportType(date)) &#123;</span><br><span class="line">  <span class="comment">// 生成日期选择器的脚本</span></span><br></pre></td></tr></table></figure>

<p>检查特定的属性，可以使用这个 elementSupportsAttribute 函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elementSupportsAttribute</span>(<span class="params">elementName, attribute</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.createElement) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="built_in">document</span>.crateElement(elementName);</span><br><span class="line">  <span class="keyword">return</span> attribute <span class="keyword">in</span> test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方式和 modernizr 一样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!elementSupportType(<span class="string">'input'</span>, <span class="string">'placeholder'</span>)) &#123;</span><br><span class="line">  <span class="comment">// 生成提示占位符的脚本</span></span><br></pre></td></tr></table></figure>

<h5 id="4-HTML5-的其它特性"><a href="#4-HTML5-的其它特性" class="headerlink" title="4. HTML5 的其它特性"></a>4. HTML5 的其它特性</h5><ul>
<li>localStorage 和 sessionStorage 在客户存储大型和复杂数据集的更有效方案</li>
<li>使用 WebSocket 与服务器端脚本进行开放的双向通信</li>
<li>使用 Web Worker 在后台执行 JavaScript</li>
<li>标准化的拖放实现</li>
<li>在浏览器中实现地理位置服务<br>…………</li>
</ul>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>了解了 HTML5 以及使用 Modernizr 等工具检测特性的重要性。</p>
]]></content>
      <categories>
        <category>-[JavaScript]</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Test Article</title>
    <url>/2020/05/20/Test-Article/</url>
    <content><![CDATA[<p>This is a test article, weclome subscribe “<a href="https://jinl1874.github.io&quot;" target="_blank" rel="noopener">https://jinl1874.github.io&quot;</a></p>
<p>▶ hexo s<br>INFO Start processing<br>INFO Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop.</p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>tags</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter 使用简介</title>
    <url>/2020/06/21/Jmeter/</url>
    <content><![CDATA[<h4 id="使用Jmeter测试网页的性能"><a href="#使用Jmeter测试网页的性能" class="headerlink" title="使用Jmeter测试网页的性能"></a>使用Jmeter测试网页的性能</h4><ol>
<li><p>打开Jmeter</p>
</li>
<li><p>添加测试线程组<br>右键 <code>Test Plan</code> $\rightarrow$ <code>Add</code> $\rightarrow$ <code>Threads(Users)</code> $\rightarrow$ <code>Thread Group</code>。</p>
<p> <img src="http://image.jinl1874.xyz/img/20200621101959.png" alt="添加测试线程组"></p>
</li>
<li><p>添加Http请求<br>右键<code>Thread Group</code> $\rightarrow$ <code>Add</code> $\rightarrow$ <code>Samper</code> $\rightarrow$ <code>HTTP Request</code>。</p>
<p><img src="http://image.jinl1874.xyz/img/20200621102456.png" alt="添加http request"></p>
<p>结果：<br><img src="http://image.jinl1874.xyz/img/20200621102807.png" alt="result"></p>
</li>
<li><p>添加观察树<br>右键 <code>Test Plan</code> $\rightarrow$ <code>Add</code> $\rightarrow$ <code>Listener</code> $\rightarrow$ <code>View Result Tree</code>。<br><img src="http://image.jinl1874.xyz/img/20200621110646.png" alt="观察树"></p>
</li>
<li><p>测试<br>点击<code>HTTP Request</code>，在<code>path</code>项输入一个网址，例如 <a href="https://www.zhihu.com/" target="_blank" rel="noopener">https://www.zhihu.com/</a> ，然后点击<code>run</code>。<br> 然后点击<code>View Result Tree</code>，就会出现以下结果：<br> <img src="http://image.jinl1874.xyz/img/20200621140400.png" alt=""></p>
</li>
<li><p>集合点<br>右键<code>Thread Group</code> $\rightarrow$ <code>Add</code> $\rightarrow$ <code>Timer</code> $\rightarrow$ <code>Synchronizing Timer</code>。<br>第一个变量代表的是线程数量。<br>第二个变量代表的是结束的时间，当时间达到一个段后，所有的线程都会被释放。</p>
</li>
</ol>
<h3 id="Thread-Group变量"><a href="#Thread-Group变量" class="headerlink" title="Thread Group变量"></a>Thread Group变量</h3><ol>
<li>Number of Thread(users):  指模拟的用户数。<br>例子：如果要模拟一百个人，那么输入一百即可。</li>
<li>Ramp-Up Period(in seconds)：虚拟用户增长时长。<br> 例子：测试一个考勤系统，登录的时候不是所有人一起登陆，而是有一个时间点是大家一起登陆的。比如是八点到九点这一段时间登录的，时长就是3600秒。但不需要设置这么大的数</li>
<li>Loop Count：一个虚拟用户所需要做的测试数。如果把<code>Infinite</code>勾上的话，那么运行的时候是永不停止的，除非手动强制停止。</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 高级程序设计（1）</title>
    <url>/2020/08/01/JavaScript-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-script-元素"><a href="#1-script-元素" class="headerlink" title="1. script 元素"></a>1. script 元素</h2><p>在 HTML 代码中插入 js 脚本，需要<code>script</code>元素，它有几个属性：</p>
<a id="more"></a>

<ul>
<li>async：可选，表示应该立即下载脚本。</li>
<li>charset：可选，表示 src 属性指定代码的字符集，一般没人用。</li>
<li>defer：可选，表示脚本延迟到文档完全解析后才执行。</li>
<li>src：可选，执行的外部文件。</li>
<li>type：可选是 language 的替代属性，表示编写代码使用的脚本语言的类型。默认值是 <code>text/javascript</code>。</li>
</ul>
<p>标签一般会放在<code>&lt;head&gt;</code>元素里，但是会出现延迟，所以可以选择放在 <code>&lt;body&gt;</code> 的底部。</p>
<p>或者可以选择在 <code>&lt;script&gt;</code> 元素中添加 defer 属性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">defer</span>=<span class="string">"defer"</span> <span class="attr">src</span>=<span class="string">"example.js"</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>asyn 属性与 defer 属性类似，用于改变处理脚本。async 只用于外部脚本文件，告诉浏览器立即下载，不保证顺序。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"example.js"</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为当有些浏览器不支持的 js 的时候，导致 js 代码会显示在页面当中。</p>
<h4 id="2-嵌入代码与外部文件"><a href="#2-嵌入代码与外部文件" class="headerlink" title="2. 嵌入代码与外部文件"></a>2. 嵌入代码与外部文件</h4><p>不推荐把 javascript 代码包在 HTML 中，如下面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// statement</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一般选择外部文件更好，因为在外部文件更好维护，可缓存（两个页面使用同一个文件，那么只需要一次下载），适应未来。</p>
<h4 id="3-文档模式"><a href="#3-文档模式" class="headerlink" title="3. 文档模式"></a>3. 文档模式</h4><p>通过文档类型（doctype）切换实现。</p>
<h4 id="4-noscript-元素"><a href="#4-noscript-元素" class="headerlink" title="4. noscript 元素"></a>4. noscript 元素</h4><p>当浏览器不支持脚本，或者浏览器支持脚本，但脚本被禁用的情况下，浏览器才会显示 <code>&lt;noscript&gt;</code> 的内容。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">noscript</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>本页面需要浏览器支持（启用）JavaScript.<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结束</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>生日快乐</title>
    <url>/2020/11/01/curry-happy-birthday/</url>
    <content><![CDATA[<p>在我的眼里，咖喱的形象已经变了三次，一次是由物变为人，一次是由北方汉子变成了一个小女生，最后一次是由虚拟人物形象变成了实实在在的人。</p>
<a id="more"></a>

<h2 id="惜"><a href="#惜" class="headerlink" title="惜"></a>惜</h2><p>2018 年以前，咖喱一种多个香料配成的酱料，金鱼还是在鱼缸里的观赏鱼。</p>
<p>2018 年到十月份之前，咖喱变成了一个北方汉子。“金鱼”，这个跟我毫无联系的词，在 17 年暑假时和我加入群时，海螺给我取了这么一个昵称，但是等到用这个词时还要等到 18 年春。</p>
<p>2018 年春，我开始在群里发言，或许是想知道也想认识一直“活着”的群(当时其它 QQ 群已经死了），里面的人会是怎么样的，又或者是该群的生活气息吸引了我。记得当时，我还没在群里发言，有个人在群里吐槽同学使用图书馆打印机时还在修改文档，导致速度极慢，下面其它人的回复也很正常，都在附合。他们的群昵称里顶着各种奇奇怪怪的名字，这在 QQ 群里是很常见的，但总是有一种不协调感。</p>
<p>在那之后，我开始在群里水，那时有人还讲过一句，“怎么之前没见过这条鱼”。群里水多了，也认识了很多网友，其中包括“北方汉子”咖喱。</p>
<p>为什么咖喱在我眼里是北方汉子的形象呢？我离上次与网友长时间群聊时间太久了，上一次是在初三时加入的火影群，之后的群聊全是和基本认识的同学一起的，忘了网络的虚拟性。在我的认知里咖喱是男性，因为他在群里说他是男性。当然，这还不是最重要的，有一次不知道是谁提起了广东人称呼外地人的方式，我说广东人往广东以北的男性都叫“北佬”，记得咖喱在群里的发言特别激动，大意最如果有谁敢这么叫他就会非常生气的。我当时的脑回路是这样的，不想被叫-&gt;觉得有侮辱性-&gt;他就是高大的汉子。</p>
<p>自那时起，一个高大的北方汉子形象被我套在咖喱身上。不过到现在我也没想明白为什么咖喱会有那种反应，也许这不是咖喱的发言，被我自顾自地安给了咖喱。</p>
<p>2018 年 10 月 27 号，我第一次和网友面基。是的，之前都是和社团什么之类的面基，并且本来我也只想和他们保持纯洁的网友关系，但一切都在那天改变了。</p>
<p>记得那天，他们在群上约好了见面，刚好我也在水群，于是他们也邀请我一起去。那时刚好没什么事，于是就去了。</p>
<p>他们的形象也在那天发生了翻天覆地的变化，当然，一个知心大姐姐怎么就变成了一个男的。他们在跟志斌姐说话的时候，我还在往四处看，“志斌姐在哪”，又去翻其朋友圈，发现里面有几个全是男性合照，还有个人挺像面前的人。</p>
<p>然后，当他们把一个脸圆圆的女生叫咖喱的时候，受到志斌姐冲击的我心里在想着，怎么你也是这样啊……</p>
<p>此后，我根据各种群聊信息一步步地完善（脑补）咖喱的形象：</p>
<ol>
<li>爱喝酒，喝的还不是啤酒，像什么白酒葡萄酒都不在话下；</li>
<li>喜欢去酒吧喝酒；</li>
<li>爱到处去玩；</li>
<li>精力特别多；</li>
<li>喜欢二刺元；</li>
</ol>
<p>上面的信息也不一定正确，毕竟是捕风捉影来的。然后咖喱在我眼里就是一个自由的“不良少女”。这个“不良少女”是日本冻鳗里的形象，于是就用中国特色的“社会”代替了，所以这就是“社会女孩”的由来。</p>
<p>当然，说社会也不正确，更准确的说法是与众不同。</p>
<p>2020 年 10 月，再次见到咖喱时，她说了句“真的好久不见了，鱼哥哥”，当时我有点奇怪，去年不是才刚见过吗，怎么说好久不见。这里就暴露出我不察“时事”的特点了，以前我刷朋友圈的时候，还没加好友，后来加了好友，我把朋友圈的入口关了，所以在朋友圈发布的信息基本全都不知道，像什么官宣啊小长文之类，还是得自己专门点进个人主页才知道。不点不知道，一看吓一跳，好家伙，三天一小聚，五天一大聚。</p>
<p>周一去玩的时候，认识到了一个新的咖喱，一个会笑会哭会害怕会生气的咖喱， 以前的咖喱总是笑嘻嘻的，那时我才意识到，咖喱也是一个大学女孩啊。</p>
<h2 id="今"><a href="#今" class="headerlink" title="今"></a>今</h2><p>我不怎么会表达自己的感情，每次用文字表达出来都不满意，强行发出去但后面看总是会感到尴尬。</p>
<p>真的挺羡慕能在朋友圈/QQ 空间把自己的感情表达出来的，我每次想表达自己的感情总是来来回回那么几个词，以前写推文时经常在这里卡住，有时干脆就不表达了。因为不管怎么表达都会感到尴尬，做一名记叙者对我来说更有意思。也有可能是忘了怎么表达了。</p>
<p>于是我把朋友圈里所有表达感情的内容都隐藏了，发表内容也不再发表在朋友圈，直到现在还有一股冲动，想把 QQ 那篇日志隐藏掉。因此，发在知乎以及个人博客里。即使是这样，也很少有抒情的内容，尽量写事。说起来，大家还是我的第一批博客读者呢（笑），阿波哥还说这是流水账（不是）。</p>
<p>或者换种说法，其实是表达能力差，是中文词汇量比较少，别人经常会误解。比如上次回校时，我问咖喱是不是回宿舍，产生这种疑问的直接原因是上次国庆假期时，大家都要休息了，她还这么有精神去到处逛，所以即使是晚上十点的时候，我还有一种她会走到下一个目的地继续玩的感觉。但是措词不当，咖喱表示深深地伤害到她了，这里再次向咖喱表示道歉。语言是一门艺术，而我经常用它伤害朋友。</p>
<p>想了很久，还是不知道该说什么。</p>
<p>想用第二视角写，但是又不习惯，所以还是用回第三视角。</p>
<p>当初的不协调感觉，到现在终于明白了，那种现象可以出现在游戏群里，出现在贴吧群里，又或者是动漫群里，但是在一个新生群感觉特别突兀（当时的名字还是 2017 新生群），这种群不是过了招生季就会沉寂的吗？而且明明是互相认识的，为什么要叫网名呢？也许是习惯了吧，也许是像我一样根本不知道名字吧。</p>
<p>如果当初我嫌 QQ 群有点吵，然后退了，又或者我一直把其留在那里，不管不顾，又会怎么样。我不知道，但我知道的是肯定不会比现在好。因为在那里我认识了咖喱，认识了大家。</p>
<p>不管大家怎么想，对我而言，咖喱，还有大家，早就是我最好的朋友了。</p>
<p>今天是 11 月 1 日，是星期天，也是咖喱的生日，</p>
<blockquote>
<p>愿你有一个灿烂的前程</p>
<p>愿你有情人终成眷属，</p>
<p>愿你在尘世获得幸福。</p>
</blockquote>
<p>自由的少女要永远自由下去。</p>
<p>生日快乐，<strong>咖喱</strong>。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-高级程序设计（2）</title>
    <url>/2020/08/01/JavaScript-%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h4><p>有五种简单数据类型：Undefined、Null、Boolean、Number、String，一种复杂数据——Object。</p>
<p>typeof 操作符，其返回值是一个字符串有：</p>
<a id="more"></a>

<ul>
<li>undefined：该值未定义；</li>
<li>boolean：该值为布尔值；</li>
<li>string：该值是字符串；</li>
<li>number：该值是数值；</li>
<li>object：该值为对象或者 null；</li>
<li>function：该值为函数。</li>
</ul>
<p>使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="number">1</span>); <span class="comment">// number</span></span><br></pre></td></tr></table></figure>

<p>变量没定义之前的值就是 Undefined：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test_0;</span><br><span class="line">alert(test_0 == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test_1 = <span class="literal">undefined</span>;</span><br><span class="line">alert(test_1 == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>Null 类型也只有一个值，null，表示一个空指针对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="literal">null</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span> test); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<p>Number 有一个 NaN（Not a Number）值，用于表示一个返回数值的操作数值未返回数值的情况。比如 在其它语言里 数值除以 0 会报错，而在 js 会返回上面个个值。NaN 与其它值的相加相除等操作返回的值也是 NaN。</p>
<p>Number 数值转换有三个函数：Number()、parseInt() 以及 parseFloat()。<br>Number() 可用于任何任何数据类型，其它两个是用于字符串的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"11"</span>;</span><br><span class="line"><span class="keyword">var</span> str_num = <span class="built_in">Number</span>(str);</span><br></pre></td></tr></table></figure>

<p>转换为字符串的方法有两种方式，第一个就是第个值都有的 toString() 方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> num_str = num.toString();</span><br></pre></td></tr></table></figure>

<p>toString 方法可传入基数，输入不同的值会有不同的返回不同的进制数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">var</span> num_str = num.toString(<span class="number">2</span>); <span class="comment">// 1011</span></span><br></pre></td></tr></table></figure>

<p>亦可直接使用 String() ，使用方法与 Number() 类似。</p>
<h4 id="2-操作符"><a href="#2-操作符" class="headerlink" title="2. 操作符"></a>2. 操作符</h4><p><code>+-*/&lt;&gt;=&amp;&amp;||</code> 与其它语言是类似的。</p>
<p>有一点需要注意全等和不全等符，全等符由 3 个等号（===）表示，在两个操作数未经转换就相等的情况下返回 true，如下面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result_0 = <span class="string">"55"</span> == <span class="number">55</span>; <span class="comment">// true 转换后相等</span></span><br><span class="line"><span class="keyword">var</span> result_1 = <span class="string">"55"</span> === <span class="number">55</span>; <span class="comment">// false 未转换后不等</span></span><br></pre></td></tr></table></figure>

<h4 id="3-语句"><a href="#3-语句" class="headerlink" title="3. 语句"></a>3. 语句</h4><p><code>if/else/while/for</code> 等语句与 C 语言类似。</p>
<p>for-in 语句是一个精准的迭代语句，可以枚举对象的属性，与 python 的 for 语句类似。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (property <span class="keyword">in</span> expression) statement;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> proName <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">  <span class="built_in">document</span>.write(propName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>label 语句可以在代码中添加标签，以便将来使用，用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">label: statement;</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">start: <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  alert(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>with 语句的作用是将代码的作用域设置到一个特定的对象中，用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> (expression) statement;</span><br></pre></td></tr></table></figure>

<p>with 语句的目的是为了简化多次编写同一个对象的工作，如例子示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> hostName = location.hostname;</span><br><span class="line"><span class="keyword">var</span> url = location.href;</span><br></pre></td></tr></table></figure>

<p>用 with 语句可改写为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> (location) &#123;</span><br><span class="line">  <span class="keyword">var</span> qs = search.substring(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> hostName = hostname;</span><br><span class="line">  <span class="keyword">var</span> url = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h4><p>js 不像 java 那样可以实现重载，如相同的函数名接受不同参数的类型和数量，可定义不同的函数。<br>如果 js 定义两个相同的函数，那么名字只属于后定义的函数。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>使用自定义域名后出现“404There isn&#39;t a GitHub Pages site here”解决方法</title>
    <url>/2020/05/22/blog-problem-0/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul>
<li>每次将新文章使用“hexo d”推送后，再打开浏览器就会显示“404There isn’t a GitHub Pages site here”这个错误。</li>
</ul>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul>
<li>我们在自定义域名之前会在下图里“Custom domain”，<br><img src="http://image.jinl1874.xyz/img/blog_problem.png" alt="setting"></li>
<li>点击“save”后，仓库的根目录会生成一个“CNAME”文件，<br><img src="http://image.jinl1874.xyz/img/blog_problem_2.png" alt=""></li>
<li>但是本地的“public”目录里面并没有这个文件，所以更新会删除这个文件，就会导致访问失败。</li>
</ul>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul>
<li>在hexo的source文件夹下新建一个CNAME文件，内容如下。这样使用<code>hexo generate</code>就会在public目录生成CNAME文件了，这样推送过去后就不会删除了。<br><img src="http://image.jinl1874.xyz/img/20200522235649.png" alt="solve"></li>
<li>添加文件后，重新生成推送后，问题就迎刃而解了。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p>欢迎访问个人博客主页 <a href="https://jinl1874.github.io" target="_blank" rel="noopener">jinl1874</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Problem</category>
      </categories>
      <tags>
        <tag>hexo, blog</tag>
      </tags>
  </entry>
  <entry>
    <title>【流水账】生日聚会</title>
    <url>/2020/11/03/birthday-day/</url>
    <content><![CDATA[<h2 id="起"><a href="#起" class="headerlink" title="起"></a>起</h2><p>此处删去。</p>
<h2 id="时"><a href="#时" class="headerlink" title="时"></a>时</h2><p>11 月 1 号晚上七点多，按照计划，虾带着咖喱出来，鱼、猫、瓜风、薯在操场早己等候多时。</p>
<a id="more"></a>

<p>大家和咖喱在有说有笑着。</p>
<p>突然，有人要去上厕所。不久之后，他带着个人回来，手里还捧着东西，定睛一看，原来是阿波哥带着生日蛋糕过来了。</p>
<p>咖喱似乎有点惊讶。</p>
<p>计划在完美地执行，</p>
<p>……</p>
<p>……</p>
<p>才怪。<br>这里面出了一个计划最大的变数，或者说虾就是变数本身。所以说根本没有计划（其实我什么都不知道，只负责到场），要说有计划的是，就是虾负责把咖喱拖出来。</p>
<p>十一月的广东，秋天似乎真的要来了，傍晚时分没有闷热，没有严寒，时不时有一点小风吹过，全部的感觉都是舒服。月亮在一边挂着，似乎比平时更底，发出的光线也蒙着淡淡的黄色，为今晚笼照出奇特的气氛。</p>
<p>当晚七点多，波仔带好蛋糕、花以及大小兔子匆匆打车过来，来到主席台对面的操场与大家汇合。</p>
<p>之后要干什么？不知道，虾说得模棱两可，听者亦一头雾水。所以大家只好整理整理现场，先把蛋糕放好，再摆上小兔纸。</p>
<p><img src="http://image.jinl1874.xyz/img/20201102194659.png" alt="image-20201102194653882"></p>
<p>不一会儿，虾借口上厕所离开咖喱来到现场，经过一番沟通后，终于明确了该怎么做。全员背向咖喱方向，将蜡烛点起，等虾将其带来。说是带，但其实并不是带，而是做个大冒险，带咖喱环绕操场一圈，因为她当天穿着一件豹皮（还是虎皮？）衣服（后来还问我胖不胖，其实当时胖只是句玩笑话而己啦）。为免起疑心，虾也分别用约会、宅家、睡觉、回家交待五人的行踪，波仔则没有提。</p>
<p>虾离去不久，大家就在收拾东西，并插上两根蜡烛蛋糕上。然后再叫波仔去另一边藏起来。那时，在夜晚中昏暗的灯光照下，五个人低头面对两根正在燃烧的蜡烛，蜡烛发出暗淡的红光，一言不发的我们营造出一种诡异的气氛，宛如宗教场景一般。还听到旁边路过的人说了一句”他们在干嘛“。（不知道咖喱看到我们时是什么感觉）</p>
<p>蜡烛续了一根后，虾终于来到了。咖喱的声音在背后慢慢靠近，走过之后也没有发现我们。然后虾突然把咖喱（硬生生）转过来……看到我们的咖喱还处于惊讶之中时，背后的波仔抱着花出现并祝其生日快乐……</p>
<p>风哥有一幅画，里面有三个人，我根据特征猜出了猫猫和咖喱，却没猜出瓜姐。因为咖喱和猫猫的特征都比较明显，一眼就能看出来，但是中间的瓜姐却感觉不到明显什么特征（也许那个发型是？）。说起来，其实我对瓜姐印象最深的还是在打狼人杀时，那双在浓浓夜色下也遮不住的熊猫眼。</p>
<p>生日歌、礼物、许愿、吹蜡烛、切蛋糕、吃蛋糕、抹蛋糕、洗脸。</p>
<h2 id="转"><a href="#转" class="headerlink" title="转"></a>转</h2><p>吃完蛋糕后，风哥去虾的宿舍拿三国杀（虽然最后也没用上），在一顿收拾后转移阵地，来到了”老地方“（大概就是靠宿舍半场球场的禁区附近）。猫和瓜去买饮料后归来后，失踪人口虾又不知道去哪了。</p>
<p>大家到齐后，失踪人口虾带着另一只猫来了。小黑猫来的时候带着个礼物，虽然把薯仔认成咖喱的时候有些许搞笑。</p>
<p>狼人杀，有所耳闻过，毕竟有太多梗了，比如刀了预言家，狼人自爆等，但却没亲自玩过。</p>
<p>那天玩了三局，当时的内心活动如下：</p>
<p>第一局：我是谁？他们在干什么？我在干什么？</p>
<p>第二局：我要干什么？</p>
<p>第三局：预言家知道身份要干什么？</p>
<p>玩之前，虾给我科普了下阵营划分，狼、神、民，神和民是好人阵营，狼是坏人阵营。最后狼比人神多就是恶人赢，反之神与民杀光狼即好人赢（第一局还不知道输赢规则）。</p>
<p>第一局我是预言家。预预言家是干什么的，不知道。晚上我验明了虾的身份，然后呢？也不知道。于是在当晚用手机打开知乎，搜索有关狼人杀预言家的内容，然后里面是什么警徽一阶之类的术语，还说要做一个工具人，加上断断续续地看，导致还是不明白要做什么，发什么言。<br>第一轮要指谁时，我指向了波仔，你要问原因，我也不知道有什么原因，也分析不出什么来，<br>然后就在不知不觉中结束了，大概理清了逻辑，是根据大家的发言来怀疑分析出谁是狼谁是人神。</p>
<p>第二局，我抽到了狼。狼要干什么呢？上一局有听他们说过要带什么节奏来着。于是一开始就先带个波仔的节奏，然后波仔就出局了。然后就莫名其妙地赢了。</p>
<p>第三局，我还是成了预言家，预言家要不要说出来？不知道，所以我就选择了沉默。然后我就被刀了，这真是个悲伤的故事。虾坑了我两把，第一把是他让我误解波仔是好人，在我阵亡后告诉我真相。第二把是我问他遗言可以说什么的时候，他表示除了他刚才所说的，其它的都可以说。那时我以为他刚才所说指的就是波仔是狼这件事不能说，所以我只表明了自己的身份，没有说波仔的事。后来想想，应该指的他弄错好人坏人的事？</p>
<p>总而言之，感觉狼人杀还是个挺有意思的游戏，我大概只知道到个皮毛 ，不对，连皮毛都不知道，大概就是个凑数的。</p>
<h2 id="结"><a href="#结" class="headerlink" title="结"></a>结</h2><p>之后，小黑猫要去锻炼身体，波仔要回校了。本来想来一局久违的三国杀，但好像还有哆啦 A 梦的万圣节特辑没看，于是就在足球场上面对着 iPad 来了一次更久违的哆啦 A 梦，上次看的时候还是几年前。</p>
<p>之后，送完波仔的虾和咖喱回来了，也将近十一点了。天下无不散的宴席，不久与众人分别。</p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>由于写的另一篇挤尽了想要说的话，导致这篇感觉写的有点无力，就是货真价实的流水账了，不过还是先暂且记下来吧。<br>波仔似乎出了点什么事，有点不开心，希望他能好好渡过吧。<br>瓜仔的名也懒得改了。</p>
<p>时 11 月 3 日。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用Hexo和GithubPage免费搭建博客网站</title>
    <url>/2020/05/21/hexo-0/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果已经安装了下面两个软件，那么可以直接安装Hexo了。</p>
<h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装node</a>，也可以去node.js中文网<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">下载</a></p>
<blockquote>
<p>注意：windowns 用户要把 “Add to Path” 勾选上</p>
</blockquote>
<h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h3><p>Windows: <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载</a><br>MAC: <code>▶ brew install git</code><br>Linux (Ubuntu, Debian)：<code>▶ sudo apt-get install git-core</code><br>Linux (Fedora, Red Hat, CentOS)：<code>▶ sudo yum install git-core</code></p>
<h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>上述步骤完成后，就可以进入下一环节——生成项目文件了。</p>
<h2 id="建成"><a href="#建成" class="headerlink" title="建成"></a>建成</h2><h3 id="1-生成"><a href="#1-生成" class="headerlink" title="1. 生成"></a>1. 生成</h3><ul>
<li>打开cmd或者powershell，进入要放置文件的目录，再生成目录和博客文件。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">▶ hexo init blog(自定义)</span><br></pre></td></tr></table></figure></li>
<li>进入对应目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ cd blog</span><br></pre></td></tr></table></figure></li>
<li>安装npm <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ npm install</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul>
<li>打开 <code>_config.yml</code>文件，来进行详细博客网站配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo # 网站名字</span><br><span class="line">subtitle: &#39;&#39; # 网站副标题</span><br><span class="line">description: &#39;&#39; # 网站描述</span><br><span class="line">keywords:  # 关键词</span><br><span class="line">author: John Doe # 作者名字</span><br><span class="line">language: zh-CN # 语言选择 &quot;zh-CN&quot;</span><br><span class="line">timezone: &#39;Asia&#x2F;Shanghai&#39; # 时区选择 &quot;Asia&#x2F;Shanghai&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：内容与注释之间需要空格隔开<br>更多详细配置可以访问 Hexo 的<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">中文文档</a></p>
</blockquote>
</li>
</ul>
<h3 id="3-写文章"><a href="#3-写文章" class="headerlink" title="3. 写文章"></a>3. 写文章</h3><p>输入<code>▶ hexo new TestArticle</code>，出现下列文字，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Created: D:\web\my_blog\source\_posts\TestArticle.md</span><br></pre></td></tr></table></figure>
<p>说明创建文章成功。<br>打开并编辑该文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: TestArticle</span><br><span class="line">date: 2020-05-21 21:39:56</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">生活就像海洋，只有意志坚强的人才能到达彼岸。</span><br></pre></td></tr></table></figure>

<h3 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h3><ul>
<li><p>生成静态文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ hexo generate</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 248 ms</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: archives&#x2F;index.html</span><br><span class="line">INFO  Generated: fancybox&#x2F;blank.gif</span><br><span class="line">INFO  Generated: fancybox&#x2F;jquery.fancybox.css</span><br><span class="line">INFO  Generated: fancybox&#x2F;jquery.fancybox.pack.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_sprite.png</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_overlay.png</span><br><span class="line">INFO  Generated: fancybox&#x2F;jquery.fancybox.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_loading.gif</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_loading@2x.gif</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_sprite@2x.png</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;fancybox_buttons.png</span><br><span class="line">INFO  Generated: archives&#x2F;2020&#x2F;05&#x2F;index.html</span><br><span class="line">INFO  Generated: archives&#x2F;2020&#x2F;index.html</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;FontAwesome.otf</span><br><span class="line">INFO  Generated: js&#x2F;script.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.css</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-media.js</span><br><span class="line">INFO  Generated: css&#x2F;style.css</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.css</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.svg</span><br><span class="line">INFO  Generated: 2020&#x2F;05&#x2F;21&#x2F;TestArticle&#x2F;index.html</span><br><span class="line">INFO  Generated: 2020&#x2F;05&#x2F;21&#x2F;hello-world&#x2F;index.html</span><br><span class="line">INFO  Generated: css&#x2F;images&#x2F;banner.jpg</span><br><span class="line">INFO  29 files generated in 978 ms</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该命令可以简写为 <code>hexo g</code></p>
</blockquote>
</li>
<li><p>启动本地服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">▶ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></li>
<li><p>打开浏览器，输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p>
</li>
<li><p>出现下述画面后，博客可以算是初步完成了。<br><img src="https://s1.ax1x.com/2020/05/21/YqoCcD.png" alt="结果截图"></p>
</li>
</ul>
<blockquote>
<p>更多详细的命令，可以参考官方<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">文档</a></p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>github上有一个免费的 <a href="https://pages.github.com/" target="_blank" rel="noopener">GithubPages</a> 供大家使用。</p>
<blockquote>
<p>Websites for you and your projects.</p>
</blockquote>
<h3 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1. 仓库"></a>1. 仓库</h3><ul>
<li>打开<a href="https://github.com/" target="_blank" rel="noopener">github</a>注册账号。</li>
<li>新建一个 Repository，仓库名为 <code>yourname.github.io</code>，例如 <code>jinl1874.github.io</code>，</li>
<li>“Description”选填，</li>
<li>勾选”Initialize this repository with a README”，</li>
<li>最后点击”Create repository”。</li>
<li>点击仓库左边的Settings，把<code>yourname.github.io</code>填进”Repository name”，最后点击”Rename”。</li>
</ul>
<h3 id="2-连接"><a href="#2-连接" class="headerlink" title="2. 连接"></a>2. 连接</h3><p><em>将本地git与github连接起来</em></p>
<ul>
<li>创建SSH Key<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把上面的邮件地址换成你自己的邮件地址，然后一直回车</p>
</blockquote>
</li>
<li>进入你的主目录[C://Users//xxx]，勾选查看隐藏文件，找到<code>.ssh</code>目录，用记事本打开<code>id_rsa.pub</code>，复制全部内容。</li>
<li>打开github的”Settings”，点击”SSH and GPG keys”，再”New SSH key”，起一个名字，然后把刚才复制的内容放在key里面，最后点击”Add SSH key”。</li>
<li>这样，你的git就与远程仓库github连接起来了。</li>
</ul>
<h3 id="3-上线"><a href="#3-上线" class="headerlink" title="3. 上线"></a>3. 上线</h3><ul>
<li><p>安装 <code>hexo-deployer-git</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ npm install hexo-deployer-git --save</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.3 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-deployer-git@2.1.0</span><br><span class="line">added 1 package from 1 contributor in 2.588s</span><br><span class="line"></span><br><span class="line">5 packages are looking for funding</span><br><span class="line">  run &#96;npm fund&#96; for details</span><br></pre></td></tr></table></figure></li>
<li><p>更改配置，打开<code>_config.yml</code>，找到deploy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; # https:&#x2F;&#x2F;github.com&#x2F;jinl1874&#x2F;jinl1874.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>hexo deploy</code>(可简化为<code>hexo d</code>)，打开浏览器，输入(yourname.github.io)即可访问网站。</p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><ul>
<li>写好文章后使用下面两条命令进行发表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g # 生成静态页面</span><br><span class="line">hexo d # 同步到github page</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><h3 id="1-使用自己的域名"><a href="#1-使用自己的域名" class="headerlink" title="1. 使用自己的域名"></a>1. 使用自己的域名</h3><ul>
<li>前往阿里云或者腾讯云注册自己的域名。</li>
<li>在<code>yourname.github.io</code>的setting里，找到”Custom domain”，将其更改为你的域名后保存。<br><img src="https://raw.githubusercontent.com/jinl1874/image/master/github.png" alt="githubPage"></li>
<li>到域名控制台上，找到域名列表点击解析设置，添加两个CNAME类型即可。<br><img src="https://s1.ax1x.com/2020/05/21/YL9TdP.png" alt="cname"></li>
</ul>
<h3 id="2-使用next主题"><a href="#2-使用next主题" class="headerlink" title="2. 使用next主题"></a>2. 使用next主题</h3><ul>
<li><p>下载安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ cd your-hexo-site</span><br><span class="line">▶ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开站点<code>_config.yml</code>，找到<code>theme</code>字段，并更改为next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置布局。打开主题配置文件<code>_config.yml</code>（与上个<code>_config.yml</code>不同），设置 Scheme</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line"># scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">#scheme: Pisces # 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">scheme: Gemini # 个人更喜欢双栏分割</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置菜单<br>把home, categories, archives, tags, schedule,以及about留下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || fa fa-home</span><br><span class="line">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class="line">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class="line">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class="line">  schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class="line">  # sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class="line">  # commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br></pre></td></tr></table></figure>
<p>添加对应的页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page archives</span><br><span class="line">hexo new page cabout</span><br><span class="line">hexo new page schedule</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>更多next主题配置请访问next<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
<p>欢迎访问个人博客主页<a href="https://jinl1874.github.io" target="_blank" rel="noopener">jinl1874</a></p>
]]></content>
      <categories>
        <category>BlogBuild</category>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>跨越两座城市的距离只为遇见她</title>
    <url>/2020/11/07/only-for-she/</url>
    <content><![CDATA[<p><img src="http://image.jinl1874.xyz/img/20201107202837.jpg" alt="秋季迁徙时正在游过科伯克河的驯鹿，阿拉斯加"></p>
<h1 id="跨两城只为见她"><a href="#跨两城只为见她" class="headerlink" title="跨两城只为见她"></a>跨两城只为见她</h1><h2 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h2><p>傍晚六点开始坐车，晚吗？<br>晚，但是只要她在那里，这一切都值得。</p>
<h2 id="遇见"><a href="#遇见" class="headerlink" title="遇见"></a>遇见</h2><p>走进东门，还是熟悉的车道，熟悉的灯光，熟悉的行政楼，熟悉的花草，还有熟悉的树木。深吸一口气，感受到的是大自然带来的清新，同时夜晚的校区还有一丝丝沁凉。走过那条连通行政楼与实验楼的小桥，流水从桥下缓缓走过，桥下荷叶应犹在，不见当年小荷花。</p>
<p>走过实验楼，一年未见，校内的主流共享单车-哈罗单车不知何时被青桔电动车取代，只剩下形单影只的自行车留在那里。伴着轻快的音乐，中厅练舞人群依然坚守那里。</p>
<p>路过图书馆，图书馆阶梯前仍排满了一排共享电动车，依旧有一些人在此处练习滑板与轮鞋。七点多的图书馆夜晚，正是最年轻的时候。而图书馆下的湖泊则因秋季到来，水位不断下降，桥下水浅处生满了水草。环顾四周，却没找到鸭子的踪迹，不知道是不是又被二饭的阿姨捉去做烧鸭了呢。但鸭子是湖面的点缀，嘎嘎嘎的声音彰显着湖泊的生命力，没见到总有些许遗憾。</p>
<p>穿过一教时，回来了，全都回来了，记忆中的场景全都回来了。耳边响起的喧嚣声，走过有些崎岖的路面。再跨过没几步的阶梯走上走廊，里面的教室永远都会有几个女生。下一个转角会出现什么东西，皆与记忆中的场景吻合。不过那个草丛堆里的蘑菇倒是不见了。</p>
<p>走下李园，门后的小道上飘着一点桂花香。在其路上时，有一种自己仍住在那里的感觉。继续往左边的小径走，最后来到一饭。一饭旁的“披头士”鸡排店不知什么时候关闭了，曾经闪闪发光的招牌被拆掉了，只剩下除却装修的店面，以及边上褪色的海报。</p>
<p>进入一饭，扑面而来的是一股饭堂的味道，感觉并不好闻。里面的服装颜色不知何时已经变成了深灰，有一个阿姨，虽然我已经忘了具体的样子（话说应该是从没见过吧），但其身形以及声音仍印在脑海里。几年过去了，仍留在这里。</p>
<p>走出一饭，角落里的师兄奶茶店悄悄地换成了更换成另一个品牌“三口井”（怪怪的名字），可能是师兄没钱了。学而优商品旁不知何时又多了个蜜雪冰城，闪闪发光的招牌使得旁边的学而优黯然失色，让我差点以为学而优又倒闭了。不过学而优也变成了天猫小店，里面从一个小卖部模样变成了有点精致的商店。七喜则搬到那栋屋子的另一侧，其面积也少了这么多。</p>
<p>一路上，在校道上慢慢走着，最后来到西门，鼓捣一番后出示报备信息出到西门。</p>
<h2 id="凌晨"><a href="#凌晨" class="headerlink" title="凌晨"></a>凌晨</h2><p>凌晨将近五点时醒来，无论如何再也睡不下去。于是在各个地方走来走去，最后拿了一个垫子，坐在窗边。天已泛白，微弱的光线走进并未完全封闭的窗户的里面，外边时常传来汽车的轰鸣，身上吹过早晨的秋风，还感到有些许冷感。</p>
<h2 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h2><p>之后在床上躺了一会儿，本来不想睡的，明明将手机的声音调到最小但声音依旧很大，较以前似乎有一股催眠魔力，眼皮逐渐地沉重了起来。</p>
<h2 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h2><p>吃完饭后，去散了散步。</p>
<h2 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h2><p>校运会结束的学校，是冷清的。空无一人的大操场，学院的所有营地、校运会的横幅、旗帜，仿佛人间蒸发一般，再不能寻其踪影。唯有球场旁阿姨拆解其材料时，才能找到其存在的足迹。</p>
<p><img src="http://image.jinl1874.xyz/img/20201106220151.jpg" alt="img"></p>
<p>排球，一个从没接触过的球类运动，在今天接触上了。踏入校门的那刻起，目标只有一个，那就是风雨球场。风雨球场，一个奇怪到不能再奇怪的名字。明明有盖子为遮风挡雨，在里面见不到任何风雨，为何偏偏要叫风雨球场呢？难道是想说，风里雨里，只有风雨球场在等你？</p>
<p>以前的涂鸦仍留在上面。</p>
<p><img src="http://image.jinl1874.xyz/img/20201107175500.png" alt="image-20201107175457490"></p>
<p>风雨球场有排球场，它在大棚的外面。其中的一个排球架子上，夹着一个比较破烂的球。岁月给其留下了痕迹，它也在记录着时间。</p>
<p><img src="https://raw.githubusercontent.com/jinl1874/image/master/20201106220059.jpg" alt="img"></p>
<blockquote>
<p>即左边架上的球</p>
</blockquote>
<h3 id="雅食园"><a href="#雅食园" class="headerlink" title="雅食园"></a>雅食园</h3><p>离开风雨球场后，向二饭进发。传闻中进宿舍都需要刷脸，所以选择绕道，由风雨球场转向杏园，再经由中心花园，路过一教，到达二饭。</p>
<p>校门通往中心花园的小道一侧，隔一段距离摆着一张沾满灰尘，并且满是锈迹的金属椅子，还有几片落叶落在其上面。杏园停车场，在将近两年前早已经决定拆除，建立新的“有为书院”。多年过去，路过杏园时却没发现其入口，而有为书院的大门则抢尽风头。传统园区与其相比，稍显落后，无论是设备还是外观。而中心花园正中间，则摆着一张庆祝 37 周年的宣传牌。</p>
<p>一教与二饭的幽静小道里，两旁是山，阳光透过路边茂密的树木里洒下稀稀疏疏斑照。在有阳光照过的光束中，有一些微小的粒子在绕来绕去，似是灰尘，又似是花粉。走进一看，却是蜂，却不知是何品种。</p>
<p>二饭，即雅食园。以前雅食园这个名字，与第一饭堂“恰”膳园一样，意义不明，只是个名字罢了，里面的环境也与一般饭堂无异。那年暑假，二饭经过一轮更新装修，桌子椅子全部更换。让二饭不再是那种单调一条金属桌加上一条塑料横杠椅子的构成，而是全部换成了木制的桌椅，还有各种款式。其内部环境还有各种装饰品，那一年过后，二饭不再是像普通的饭堂，而像一个小餐厅。而二楼的桌椅则由一饭接收（老接盘侠了），成为了一饭二楼的桌椅。</p>
<p>再次踏入雅食园时，印入眼帘的是书。</p>
<p>是摆在左边架子上的书，那一瞬间我仿佛以为我进错地方了。而进去的左边各类棋以及各种桌游，包括象棋围棋，狼人杀扑克牌等等。更有趣的是，一部分桌子上印着围棋的棋盘，而有一部分则印着中国象棋的棋盘。</p>
<p>桌椅再一次发生改变，内部也再次变化，但这次不再是浮于表面的改变，而是能过书本围棋等来增加自身的气质，雅食园已不愧为名副其实的雅食园。</p>
<h2 id="傍晚"><a href="#傍晚" class="headerlink" title="傍晚"></a>傍晚</h2><p>从二饭出来后，已经接近校车返校时间，就决定从网球场那边走到东门。因为三个分岔口中，只有这一条还没走过。一路上，感觉园区周围的树似乎少了许多，似乎有准备要做种其它的树了。鞋底踩过夹杂着树叶的草地，伴随窸窸窣窣的声音。但是鞋踩过的声音，并不会发出这么大和这种类型的声音，再定睛一瞧，当然在路灯的的光线不足以瞧出来什么来。但这么晚了还在钻来钻去的，除了老鼠也没其它东西了。</p>
<p>行政楼的厕所，总是那么地难找。先是走到右边尽头，再回来走到左边尽头都没能发现，之后才想起在这里上课时，是走出来往中间进的。</p>
<p>而在外面的地板上，有一只黑色的蝴蝶倒在上面，似是已死。黑色的翅膀融入夜色中，若不是无意中蹲下来，是决然看不到的。</p>
<p><img src="http://image.jinl1874.xyz/img/20201107094820.jpg" alt="IMG_20201106_182543"></p>
<blockquote>
<p>又是什么让它倒在这里的呢</p>
</blockquote>
<h2 id="归程"><a href="#归程" class="headerlink" title="归程"></a>归程</h2><p>走出校门后，来到大门前，想拍一张好看的照片作为其终点，但是相机的素质太差，照出来的照片噪点太多，逐止。</p>
<p>要上车之际，回头望了一眼，再见了。</p>
<p>最后踏上回校的车。</p>
<h2 id="她"><a href="#她" class="headerlink" title="她"></a>她</h2><p>再次踏上满是森林的校园时，心情有一点小激动，也有一点小怀念。一年多了，她变了，她似乎也没变。变了的不仅仅是她，也有自己。也许她一直变，但又一直保持不变。又或者是谁都没有变，但是变不变又有何分别。</p>
<blockquote>
<p>好风景多的是，夕阳平常事，然而每天眼见的，永不相似。<a href="#refer"><sup>[1]</sup></a></p>
</blockquote>
<hr>
<a id="more"></a>

<h1 id="不仅仅只为见她"><a href="#不仅仅只为见她" class="headerlink" title="不仅仅只为见她"></a>不仅仅只为见她</h1><h2 id="他们"><a href="#他们" class="headerlink" title="他们"></a>他们</h2><p>她们、他们，还有未曾谋面的她们和他们。</p>
<h2 id="启程-1"><a href="#启程-1" class="headerlink" title="启程"></a>启程</h2><blockquote>
<p>若天气良好，我会去见你们。 ——瓜 <a href="#refer"><sup>[2]</sup></a></p>
</blockquote>
<p>乘兴而去，随即踏上人生的第一辆（不要问为什么这么多第一次）校巴。</p>
<h2 id="遇见-1"><a href="#遇见-1" class="headerlink" title="遇见"></a>遇见</h2><p><img src="http://image.jinl1874.xyz/img/20201107163134.png" alt="image-20201107163132232"></p>
<p>西门口处不知何时树立了一块防疫宣传牌，而牌后面传出一个大声说话的声音，那个咋咋呼呼的声音，那个再熟悉不过的声音，那是虾的声音。</p>
<p>我快步走到后面，发现了众人的影子。</p>
<p>此时的他们都非常漂亮，俗说认真的人最美丽，因为拍照的他们无比认真，沉浸在拍照的结界里。</p>
<p>拍照，出门在外必做的流程之一。曾经的我也很喜欢拍照，不知道什么时候 起，拍照频率已经下降了很多。</p>
<p>第一个见到的是志斌姐，她戴着一个帽子，似乎是在掩饰其日益增高的发际线。只见她睁大了眼睛，问我为什么会在来？不是说不来吗。其实几天前我是不想来的，但是今天恰好想来了，想见你们，想来说一句好久不见（虽然没说）。之后众人陆陆续续地发现了我。那时，我问虾蹲在地上的 2<sup>33</sup>是谁时，由于志斌姐遮住了他，让我以为他也戴帽子，就讲了戴帽子的那个。没想虾竟然以为我认不出志斌姐。志斌姐曾给我带了这么大的阴影，使我在冲浪不再对表面信息简单地加以相信，所以忘记是不是可能忘记的，这辈子都不可能的。</p>
<p>虾旁边站着个之前从没见过的女孩子，是志愿者毛毛。说实话，见到她在这还是挺奇怪，毕竟今天做志愿者跑来跑去确实挺累的，而且明天还有长跑比赛，这时不是应该在宿舍里舒服地泡泡脚，休养生息吗。不过，也挺好的。</p>
<p>拍完照后，分为两路，一批人去环学校游，而我和志斌姐薯仔猫猫毛毛去一饭坐坐。一路上，志斌姐不断地在吐槽以及模仿我发出的那个语气词“啊~”，此时的他，或许还没想到他模仿之后带来的影响。</p>
<p><img src="http://image.jinl1874.xyz/img/20201107163048.png" alt="image-20201107163044069"></p>
<p>在一饭时，上完厕所的志斌姐带了臭 dd 过来，一起唠嗑了一阵后，再度与众人在一饭前会和，然后往下一目的地出发。<del>炮姐</del>秋秋过来了，身为龙王的她竟然有点安静，还是有点出乎意料的。在唠嗑期间，猫猫提出要我去认人，其实也不是特别难，一般而言，他们越是着重形容和描述哪点，这点是假的概率就特大，比如华稽。而鸡腿倒是如（网络）印象中一般，话唠属性一览无余。后来，鸡腿说我像他见过的人，其实我也感觉他很眼熟，在哪见过来着。<br>路上遇到了嘟嘟，差指一算，上次见面还是两年前呢，这次是真的好久不见。</p>
<h2 id="凌晨-1"><a href="#凌晨-1" class="headerlink" title="凌晨"></a>凌晨</h2><p>来到目的地后，如果说之前的是麻雀五脏俱全，那这个算是房厅吧，也找不到形容词了，不过好在便宜。劳累的毛毛在车上就在秋秋的怀抱中睡去，不得不说，女生之间的感情太好嗑了。</p>
<p>之后在里面来了几局狼人杀，平时看起来没什么话的森罗在其游戏上突然强势起来，劳劳地掌控着局势的发展。而鸡腿的话唠属性在此刻派上大用处，新手在第一次玩就说得头头是道，倒是我到现在还不知道怎么发言。贴心的薯仔还给输了的人涂上指甲油，当晚有两局，我的两个手指甲也上了色。</p>
<p>凌晨中最难受的事是什么？是明明已经两点多了，但是亢奋的大脑却没有任何困意，同时白晃晃的石灰墙壁在不段地刺痛眼睛。无奈之下，只好退出，强迫自己去睡觉。睡之前，先把瓜姐充满的手机拔下，再插上快没电的充电宝，没想到我那个续航血崩的手机一直在上车之前都没用上，倒是意外地在拔下的手机派上用场。</p>
<h2 id="上午-1"><a href="#上午-1" class="headerlink" title="上午"></a>上午</h2><p>七点多，我回到那个带镜子的舞蹈室里，新面孔在七点多就全部回去了。</p>
<p>经过昨晚志斌姐不间段地发出那个语气词，便有一种席卷之势，谁都要来一句。声音由”啊“发展过来，发音变成了”嗯”，只是用于表达惊讶和掩饰尴尬来着。一直以来听起来都很正常，然后志斌姐带起了这个头，导到变得非常不正常，以至于到后来瓜表示烦的情况下风哥还拿手机录下来……</p>
<p>所以说罪魁祸首是志斌姐。</p>
<h2 id="中午-1"><a href="#中午-1" class="headerlink" title="中午"></a>中午</h2><p>咖喱再次起床时，已经接近中午，全员都起床后徒步去吃早餐——牛杂煲以及榴芒煲。说起早餐，早上还是第一次吃冰冷的粽子，味道说得上是难吃，最后想带其到一饭热一热，吃上一口热粽子，但在散步时被扔掉了，甚是可惜。</p>
<p>牛杂煲，顾名思义，即牛杂做的煲，精髓在其牛杂上。</p>
<p><img src="http://image.jinl1874.xyz/img/20201107173128.png" alt="image-20201107173123837"></p>
<p>榴芒煲，也顾名思义，里面包括榴莲和芒果，再用鸡肉汤做其汤底，精髓在其汤上，鸡肉有点柴，味道尚不及汤里的胡萝卜；而榴莲则稍有过甜，一个还行，两个容易腻；芒果则是如平常熟透的芒果味道一般，虽在煲里，但没有沾上过多味道，应是后加上的；而汤的味道带着榴莲的甜，又夹着鸡肉的鲜，味道可算不错。</p>
<p><img src="http://image.jinl1874.xyz/img/20201107173525.png" alt="image-20201107173521906"></p>
<blockquote>
<p>黑暗料理是也</p>
</blockquote>
<p>吃完饭后，薯仔和森罗提前坐车回家了，而大家则向北江大提出发。广东的 11 月下午，烈阳高照，却阻挡了不钓鱼佬钓鱼的决心。一人一伞一凳一杆，在河边静静地等待着鱼儿的上钩，而在其一旁的虾似乎在思考，或许是在想会不会有虾上钩吧。</p>
<p><img src="http://image.jinl1874.xyz/img/20201107181509.png" alt="image-20201107181505558"></p>
<h2 id="下午-1"><a href="#下午-1" class="headerlink" title="下午"></a>下午</h2><p>到学校时，与嘟嘟分别。</p>
<p>排球场上，与众人来了一段连菜鸡都打不出的排球。老旧的排球拍的时候感觉很轻，但是真正拍出去的时候感觉特别重，拍得也很低，发了好几次球仅有一次过网，排球也砸在手里的时候也感觉有点痛。而咖喱貌似没把球弄过网过，猫猫也能时不时来个好球。倒是风哥似乎上手极快，发球接球都挺顺利。不过正要大展身手之时，排球部的人来训练了，这时大家忙把球放回原位，悻悻地收拾收拾之后就跑路了。</p>
<p>雅食园中，与大家来了几局棋。</p>
<p><img src="http://image.jinl1874.xyz/img/20201107181420.png" alt="image-20201107181418134"></p>
<p>先是和猫猫来一局象棋，然后与咖喱先来几局五子棋，再来一局围棋。五子棋被完虐，经志斌姐解释一波玩法后，局势先处下风，再扳回一点局势，最后被志斌姐虐杀。</p>
<p>为找回场子，我换了象棋与志斌姐再战一盘，最后在送了一个车的情况下实现绝杀。那时我好像想起了大二那年曾参加校内棋协办的比赛，最后得了第二名，这么多年了，我还是没得过一次第一名。</p>
<h2 id="傍晚-1"><a href="#傍晚-1" class="headerlink" title="傍晚"></a>傍晚</h2><p>出到甜密密买了蛋糕之后，与志斌姐分别。</p>
<p>慢悠悠走在那条小路上的时候，后来者咖喱、猫猫和虾骑着电动车居上了。越过我时，虾在前面停下，表示时间不多了，并示意我站上共享电动车与其一起前进。犹豫了一下，便站上车轮边上的横杠，双手紧紧地抱着虾，肩膀还是那么温暖，那么有安全感。</p>
<h2 id="归程-1"><a href="#归程-1" class="headerlink" title="归程"></a>归程</h2><p>来到东门时，虾正和门卫大爷唠嗑，而我则是到处走走。</p>
<p>回到门口时，瓜仔和风哥还没到，却意外发现毛毛和鸡腿出现了。是啊，他俩来送我们了。</p>
<p>在那里，与鸡腿毛毛挥手告别，再见了。</p>
<h2 id="他们-1"><a href="#他们-1" class="headerlink" title="他们"></a>他们</h2><p>他们，包括了他们和她们，还有未曾谋面的他们和她们。他们里面有给我造成心理阴影的他，疯颠的他，甜甜的他俩，圆圆的她，瘦瘦的她，高大的他，爸爸的他，累累的她，令我印象深刻的她，印象较少的他，话唠的他，安静的他，不知道怎么形容的他。</p>
<p>他们，以及她，都是我想见的。</p>
<blockquote>
<p>遇见你的注定，她会有多幸运。<a href="#refer"><sup>[3]</sup></a></p>
</blockquote>
<div id="refer"> </div>

<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[1]：<a href="https://www.bilibili.com/video/BV1p7411u7M4" target="_blank" rel="noopener">陈奕迅：夕阳无限好</a></p>
<p>[2]： <a href="https://mp.weixin.qq.com/s/53l79kW5eomkcI35mjYp8Q" target="_blank" rel="noopener">西瓜瓜 CH：No.78</a></p>
<p>[3]：<a href="https://www.bilibili.com/video/BV1BW411h7rp" target="_blank" rel="noopener">田馥甄：小幸运</a></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>火狐上有哪些值得安装的扩展</title>
    <url>/2020/07/19/firefox-addons/</url>
    <content><![CDATA[<p>2020 年，主要就是使用下面这些扩展。</p>
<h4 id="1-去广告插件——uBlock-Origin"><a href="#1-去广告插件——uBlock-Origin" class="headerlink" title="1. 去广告插件——uBlock Origin"></a>1. 去广告插件——uBlock Origin</h4><p>一般使用浏览器都需要一个去广告插件，否则浏览网页的体验太差了。<br>这个插件比 Adblock 占用资源低，而且知名度也更低一点，没有那么多网站进行针对。不过一般网站要针对去广告插件的话也不会单针对某一款，除了某乎头上的那个显示。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/ublock-origin/" target="_blank" rel="noopener">地址</a></p>
<h4 id="2-epub-阅读扩展——QiuReader"><a href="#2-epub-阅读扩展——QiuReader" class="headerlink" title="2. epub 阅读扩展——QiuReader"></a>2. epub 阅读扩展——QiuReader</h4><p>在电脑上阅读 epub 文件的体验一直不算好，直到我找到了这款扩展。</p>
<p>清爽的首页：<br><img src="https://pic4.zhimg.com/80/v2-5422bca3ade0602e09d6a706cf82d9b0.png" alt="Image"><br>舒服的界面：<br><img src="https://pic4.zhimg.com/80/v2-d97182a8834c13b00952dfe7fddae58b.png" alt="Image"></p>
<p>配置选项：背景颜色、字体大小、阅读方式、空格等；<br>其它功能：添加书签、高亮某一段文字。<br>美中不足的是不能添加书注，不过也无伤大雅，单是这漂亮的 UI 就足够了。</p>
<p>我单方面宣布这是 window 上最好用 epub 阅读器。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/qiureader/" target="_blank" rel="noopener">地址</a></p>
<h4 id="3-美化网页——Stylus"><a href="#3-美化网页——Stylus" class="headerlink" title="3. 美化网页——Stylus"></a>3. 美化网页——Stylus</h4><p>官方网站上，由于种种限制，导致网站有很多广告和很多大多数人一辈子都用不上的功能，并且 UI 总是有点丑。这时就需要一个美化网页的插件了，把多余的东西去掉，留一个简洁干净的页面。一般有点流量的网站都有很人编写相对应的样式。<br>贴吧使用前：<br><img src="https://pic4.zhimg.com/80/v2-4e7e22ec7c3ed1beedd7b5cd34117fc6.png" alt="Image"><br>使用后：<br><img src="https://pic4.zhimg.com/80/v2-f82e4543a1b75663cd246fd4b0d1cbcd.png" alt="Image"></p>
<p>页面干净了许多。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/styl-us/" target="_blank" rel="noopener">地址</a></p>
<h4 id="4-脚本扩展——暴力猴"><a href="#4-脚本扩展——暴力猴" class="headerlink" title="4. 脚本扩展——暴力猴"></a>4. 脚本扩展——暴力猴</h4><p>脚本扩展在某种程度上也算是必装的一款插件了吧，已经有很多人在 Greasy Fork 等网站写了大量的脚本，有需要就下载安装即可。脚本可以解决相当多的问题，并且也不会占用很多内存。找脚本也很方便，直接点击相应的图标，即跳出一个“为此站点查找脚本”的选项。<br><img src="https://pic4.zhimg.com/80/v2-f98281f8034694dc1b84251328d0544b.png" alt="Image"><br>其它常见的脚本插件有油猴等，不过我还是更喜欢暴力猴，或许是更好看点吧。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/violentmonkey/" target="_blank" rel="noopener">地址</a></p>
<h4 id="5-密码管理——LastPass"><a href="#5-密码管理——LastPass" class="headerlink" title="5. 密码管理——LastPass"></a>5. 密码管理——LastPass</h4><p>跨平台的的密码保存管理扩展，有了它，再也不用担心忘记密码了。<br>该扩展的主要功能是，输入一个新的账号密码时，会提示是否保存；若账号相同，则提示是否更新密码；会在账号密码自动填充最后使用的密码。<br>其它的功能还有生成随机密码之类的。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/lastpass-password-manager/" target="_blank" rel="noopener">地址</a></p>
<h4 id="6-下载管理——IDM"><a href="#6-下载管理——IDM" class="headerlink" title="6. 下载管理——IDM"></a>6. 下载管理——IDM</h4><p>这个插件要搭配 IDM 下载器使用。该插件几乎可以下载所有的网页上的视频、图像等。<br>具体写过一篇文章专门介绍<a href="https://jinl1874.xyz/2020/06/28/use-idm/">如何配置使用 IDM</a>的。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/tonec-idm-integration-module/?src=search" target="_blank" rel="noopener">地址</a></p>
<h4 id="7-操作网页——viumium"><a href="#7-操作网页——viumium" class="headerlink" title="7. 操作网页——viumium"></a>7. 操作网页——viumium</h4><p>不需要用鼠标，仅使用键盘能完成 90%的操作。<br>有很多类似的扩展，为什么推荐这个，只是使用习惯了。</p>
<p>按键功能和 vim 有一定的相似之处。<br>上、下、左、右的移动分别是：k, j, h, l;</p>
<p>向右切换标签页：g+t 或者 K;</p>
<p>向左切换标签页：g+T 或者 J;</p>
<p>跳到顶部：gg;</p>
<p>跳到底部：G;</p>
<p>向上、下翻半页分别是：d, u;</p>
<p>网页前进：L;</p>
<p>页面后退：H;</p>
<p>显示点击链接：f;</p>
<p>新建标签页显示点击链接：F;</p>
<p>搜索：o;</p>
<p>新建标签页搜索：O;</p>
<p>新建空白标签页：t;</p>
<p>新建空白标签页打开链接：T;</p>
<p>关闭标签页：x;</p>
<p>打开上一个关闭的标签页：X;</p>
<p>焦点移到输入框：g+i;</p>
<p>焦点从输入框移走：tab 或者 esc;</p>
<p>值得注意的一点是，上述按键功能只能在常见的网页上生效，在系统标签页是用不了的。比如空白标签页、系统设置页，因此学一些默认的快捷键是有必要的，比如 ctrl + t 是新建空白标签页、ctrl + tab 是向右切换标签页、ctrl + shift + tab 是向左切换，一般加上个 shift 就是相反的功能。</p>
<p>还有一些按键就不一一赘述了。</p>
<p>使用该插件能解放你的鼠标，极大地提高阅读网页浏览体验。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/vimium-ff/?src=search" target="_blank" rel="noopener">地址</a></p>
<h4 id="8-网盘助手——网盘助手"><a href="#8-网盘助手——网盘助手" class="headerlink" title="8. 网盘助手——网盘助手"></a>8. 网盘助手——网盘助手</h4><p>支持主流网盘，如百度网盘以及蓝奏云等。<br>可以自动提取 提取码 。<br><img src="https://pic4.zhimg.com/80/v2-9b7f5dabcf188b46e289a23aaf121b49.png" alt="Image"></p>
<p>大概是最优雅好用的网盘助手了。<br>有使用网盘的都可以试试安装。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/wpzs/" target="_blank" rel="noopener">地址</a></p>
<p>基本就这些比较实用的扩展。</p>
<h4 id="9-切换浏览器头——User-Agent-Switcher-and-Manager"><a href="#9-切换浏览器头——User-Agent-Switcher-and-Manager" class="headerlink" title="9. 切换浏览器头——User-Agent Switcher and Manager"></a>9. 切换浏览器头——User-Agent Switcher and Manager</h4><p>当你需要访问移动版网页或者只有其它浏览器才能访问的网站时，可以用它切换相对应的浏览器头。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/user-agent-string-switcher/?src=search" target="_blank" rel="noopener">地址</a></p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>firefox</tag>
        <tag>addons</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取芝士漫画里的图片并转为pdf</title>
    <url>/2020/06/15/sipder-1/</url>
    <content><![CDATA[<blockquote>
<p>最近想找点漫画看，发现<a href="https://manhua.zsh8.com/" target="_blank" rel="noopener">芝士漫画</a>这个平台不错，于是就想着下载来看。</p>
</blockquote>
<h3 id="安装-python"><a href="#安装-python" class="headerlink" title="安装 python"></a>安装 python</h3><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">下载 python</a><br>下载好 python 安装包，安装时一路 next 过去，注意勾上“add to path”(一般是默认勾选的)。</p>
<h3 id="安装所需的模块"><a href="#安装所需的模块" class="headerlink" title="安装所需的模块"></a>安装所需的模块</h3><p>本次的爬虫使用 requests 模块获取数据，再用 xpath 语法解析代码。<br>需要的模块包括 requests，lxml，reportlab。<br>使用 pip 安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install lxml</span><br><span class="line">pip install reportlab</span><br></pre></td></tr></table></figure>

<h3 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h3><ol>
<li>新建一个 python 文件</li>
<li>导入相应的模块</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import io</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">from lxml import etree</span><br><span class="line">from reportlab.lib.pagesizes import A4, portrait, landscape</span><br><span class="line">from reportlab.pdfgen import canvas</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>定义全局变量</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko&#x2F;20100101 Firefox&#x2F;76.0&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 默认url</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;pxtt&#x2F;pxtt-040&#x2F;91864.html&quot;</span><br><span class="line"></span><br><span class="line"># 解析出url中的章节名</span><br><span class="line">re_object &#x3D; re.match(</span><br><span class="line">    &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;.*?&#x2F;(.*?)&#x2F;.*?html&quot;, url)</span><br><span class="line">chapter &#x3D; re_object.group(1)</span><br><span class="line"></span><br><span class="line"># 文件当前目录</span><br><span class="line">current_dir &#x3D; os.getcwd()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>定义方法</p>
<ul>
<li>get_text()：得到访问返回的资源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_text(url):</span><br><span class="line">    response &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure>

<ul>
<li>parse_text(text)：分析文档，保存图片，并得到下一章的 url</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def parse_text(text):</span><br><span class="line">    # 建立解析</span><br><span class="line">    html &#x3D; etree.HTML(text, etree.HTMLParser())</span><br><span class="line">    # 获取漫画图片所有的链接</span><br><span class="line">    links &#x3D; html.xpath(&quot;&#x2F;&#x2F;div[@id&#x3D;&#39;gallery-1&#39;]&#x2F;&#x2F;dt&#x2F;a&#x2F;@href&quot;)</span><br><span class="line">    for i, link in enumerate(links):</span><br><span class="line">        save_image(link, i)</span><br><span class="line">        # 降低访问的速度，防止被识别为机器人</span><br><span class="line">        time.sleep(15)</span><br><span class="line">        print(&quot;完成&quot;, i, &quot;个......&quot;)</span><br><span class="line">    print(&quot;已完成&quot;, chapter, &quot;的下载!&quot;)</span><br><span class="line"></span><br><span class="line">    #　在第一章的时候只有一个next_chapter链接</span><br><span class="line">    try:</span><br><span class="line">        next_chapter &#x3D; html.xpath(</span><br><span class="line">            &quot;&#x2F;&#x2F;div[@class&#x3D;&#39;fusion-single-navigation-wrapper&#39;]&#x2F;a&#x2F;@href&quot;)[1]</span><br><span class="line">    except Exception as e:</span><br><span class="line">        next_chapter &#x3D; html.xpath(</span><br><span class="line">            &quot;&#x2F;&#x2F;div[@class&#x3D;&#39;fusion-single-navigation-wrapper&#39;]&#x2F;a&#x2F;@href&quot;)[0]</span><br><span class="line">        return next_chapter</span><br><span class="line">    return next_chapter</span><br></pre></td></tr></table></figure>

<ul>
<li>save_image(link, index): 访问得到的图片链接，并保存在本地</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def save_image(link, index):</span><br><span class="line">    read &#x3D; requests.get(link)</span><br><span class="line">    # 当前文件夹的加上章节名形成新的文件夹</span><br><span class="line">    dir_ &#x3D; current_dir + &#39;\\&#39; + chapter</span><br><span class="line">    # 创建文件夹</span><br><span class="line">    if not os.path.exists(dir_):</span><br><span class="line">        os.makedirs(dir_)</span><br><span class="line">    # 保存图片</span><br><span class="line">    with open(dir_ + &#39;\\&#123;&#125;&#39;.format(str(index)+&quot;.jpg&quot;), &#39;wb&#39;) as fp:</span><br><span class="line">        fp.write(read.content)</span><br><span class="line">        fp.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>convert_images_to_pdf(img_path, pdf_path)：根据图片的文件夹以及 pdf 文件夹加上文件名来生成 pdf 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def convert_images_to_pdf(img_path, pdf_path):</span><br><span class="line">    pages &#x3D; 0</span><br><span class="line">    (w, h) &#x3D; portrait(A4)</span><br><span class="line">    c &#x3D; canvas.Canvas(pdf_path, pagesize&#x3D;portrait(A4))</span><br><span class="line">    l &#x3D; os.listdir(img_path)</span><br><span class="line">    l.sort(key&#x3D;lambda x: int(x[:-4]))</span><br><span class="line">    for i in l:</span><br><span class="line">        f &#x3D; img_path + os.sep + str(i)</span><br><span class="line">        c.drawImage(f, 0, 0, w, h)</span><br><span class="line">        c.showPage()</span><br><span class="line">        pages &#x3D; pages + 1</span><br><span class="line">    c.save()</span><br></pre></td></tr></table></figure>

<ul>
<li>begin()：开始，并更新全局变量名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def begin():</span><br><span class="line">    global url</span><br><span class="line">    global re_object</span><br><span class="line">    global chapter</span><br><span class="line">    local_url &#x3D; input(</span><br><span class="line">        &quot;输入要下载的章节url(例: https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;pxtt&#x2F;pxtt-041&#x2F;93181.html)\n&gt;&gt;&gt;&quot;)</span><br><span class="line">    # 判断是否符合url格式</span><br><span class="line">    re_object &#x3D; re.match(</span><br><span class="line">        &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;.*?&#x2F;(.*?)&#x2F;.*?html&quot;, local_url)</span><br><span class="line">    if (re_object):</span><br><span class="line">        url &#x3D; local_url</span><br><span class="line">        # 更新章节名</span><br><span class="line">        re_object &#x3D; re.match(</span><br><span class="line">            &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;.*?&#x2F;(.*?)&#x2F;.*?html&quot;, url)</span><br><span class="line">        chapter &#x3D; re_object.group(1)</span><br><span class="line">        print(&quot;即将开始.....&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;输入错误！将使用默认链接！\n&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>main()：主函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    begin()</span><br><span class="line">    boolean &#x3D; &quot;y&quot;</span><br><span class="line">    count &#x3D; 0</span><br><span class="line">    # 保存pdf的文件夹</span><br><span class="line">    if not os.path.exists(current_dir + &#39;\\pdf\\&#39;):</span><br><span class="line">        os.makedirs(current_dir + &#39;\\pdf\\&#39;)</span><br><span class="line">    while(boolean &#x3D;&#x3D; &quot;y&quot;):</span><br><span class="line">        text &#x3D; get_text(url).text</span><br><span class="line">        next_chapter &#x3D; parse_text(text)</span><br><span class="line"></span><br><span class="line">        img_path &#x3D; current_dir + &#39;\\&#39; + chapter</span><br><span class="line">        pdf_path &#x3D; current_dir + &#39;\\pdf\\&#39; + chapter + &#39;.pdf&#39;</span><br><span class="line">        #　有些图片是错误，会导致无法生成pdf文件。</span><br><span class="line">        try:</span><br><span class="line">            convert_images_to_pdf(img_path, pdf_path)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">        re_object &#x3D; re.match(</span><br><span class="line">            &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;.*?&#x2F;(.*?)&#x2F;.*?html&quot;, next_chapter)</span><br><span class="line">        chapter &#x3D; re_object.group(1)</span><br><span class="line">        print(&quot;下一章节：&quot;, chapter)</span><br><span class="line">        count +&#x3D; 1</span><br><span class="line">        print(count)</span><br><span class="line">        #　下载章节的数目，可根据自己需要更改</span><br><span class="line">        if (count &gt; 37):</span><br><span class="line">            break</span><br><span class="line">        url &#x3D; next_chapter</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>直接在终端运行 python 文件，等待一段时间，就会在 python 文件的当前目录下生成文件。<br><img src="http://image.jinl1874.xyz/img/20200615222857.png" alt="文件夹"><br>文件夹里的图片：<br><img src="http://image.jinl1874.xyz/img/20200615222947.png" alt="图片"><br>pdf 文件：<br><img src="http://image.jinl1874.xyz/img/20200615223024.png" alt="pdf"></p>
<p>完整代码可参考我的<a href="https://github.com/jinl1874/spider" target="_blank" rel="noopener">github 库</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>获取必应首页的壁纸</title>
    <url>/2020/06/01/sipder/</url>
    <content><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li><p>安装python3</p>
</li>
<li><p>安装 requests、lxml库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install lxml</span><br></pre></td></tr></table></figure>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3></li>
<li><p>导入模块和设置变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://cn.bing.com/'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537."</span></span><br><span class="line">    <span class="string">"36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用requests库请求必应首页的资源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure></li>
<li><p>使用xpath解析出图片的名字与链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用xpath解析得到数据</span></span><br><span class="line">html = etree.HTML(response.text, etree.HTMLParser())</span><br><span class="line"><span class="comment"># 得到图片链接</span></span><br><span class="line">image_url = html.xpath(<span class="string">"//head//link[@id='bgLink']/@href"</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 得到一个名字与版权的字符串</span></span><br><span class="line">filename = html.xpath(<span class="string">"//a[@id='sh_cp']/@title"</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 使用正则表达式去年版权商</span></span><br><span class="line">re_object = re.match(<span class="string">'(.*?)\s.*?\\)'</span>, filename)</span><br><span class="line">filename = re_object[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 因为得到 image_url 是没网址前缀的，所以需要加上</span></span><br><span class="line">pic_url = url + image_url</span><br><span class="line">filename = filename + <span class="string">".jpg"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成一个文件夹放置图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前的文件目录</span></span><br><span class="line">current_dir = os.getcwd()</span><br><span class="line">img_dir = current_dir + <span class="string">"\\bing_img"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_dir):</span><br><span class="line">    os.makedirs(img_dir)</span><br></pre></td></tr></table></figure></li>
<li><p>保存图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read = requests.get(pic_url)</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="keyword">with</span> open(img_dir + <span class="string">'\\&#123;&#125;'</span>.format(filename), <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(read.content)</span><br><span class="line">    fp.close()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在命令行下运行该文件，会得到一个文件夹，图片就放在里面。</p>
<p><a href="https://github.com/jinl1874/spider" target="_blank" rel="noopener">github地址</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>使用七牛云和PicGo来创建自己的图床</title>
    <url>/2020/05/22/qiniuImage/</url>
    <content><![CDATA[<blockquote>
<p>最近搭了个博客，就有较大放置图片的需求，于是就想搭了个图床。<br>其它的图床不是要收费就是使用体验非常差，经常出现上传错误。而七牛云有10G的免费空间，对个人用户而言足够了。再加上PicGo的使用，能很方便能上传图户并获取链接。</p>
</blockquote>
<hr>
<h3 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h3><p>七牛云，PicGo，备案好的域名。</p>
<h4 id="1-注册七牛云"><a href="#1-注册七牛云" class="headerlink" title="1. 注册七牛云"></a>1. 注册七牛云</h4><ul>
<li>打开<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>注册账号，进行个人账号认证。需要上传身份，有了支付宝的认证也不需要人工审核了，上传身份后就认证成功了。<h4 id="2-创建空间"><a href="#2-创建空间" class="headerlink" title="2. 创建空间"></a>2. 创建空间</h4></li>
<li>管理控制台 $\rightarrow$ 对象储存 $\rightarrow$ 空间管理 $\rightarrow$ 新建空间。</li>
<li>空间名称随便填，储存区域也可以随便选，访问控制选择公开，点击确定创建。</li>
</ul>
<h4 id="3-注册2级域名"><a href="#3-注册2级域名" class="headerlink" title="3. 注册2级域名"></a>3. 注册2级域名</h4><ul>
<li>域名控制台 $\rightarrow$ 解析 $\rightarrow$ 添加记录 $\rightarrow$<br><img src="http://image.jinl1874.xyz/img/%E6%8E%A7%E5%88%B6.png" alt="域名控制"></li>
<li>记录类型选择CNAME，主机记录按自己喜好，记录值随便填一个能用的。<br><img src="http://image.jinl1874.xyz/img/add_sub_domain.png" alt="域名"></li>
</ul>
<h4 id="4-绑定二级域名"><a href="#4-绑定二级域名" class="headerlink" title="4. 绑定二级域名"></a>4. 绑定二级域名</h4><ul>
<li><p>空间管理 $\rightarrow$ 域名管理 $\rightarrow$ 绑定域名 $\rightarrow$ 加速域名 $\rightarrow$填入子域名(如 &lt;image.jinl1874.xyz&gt;)。<br><img src="http://image.jinl1874.xyz/img/input_sub_domain.png" alt="填入子域名"></p>
</li>
<li><p>绑定成功后会跳转，复制CNAME的值。</p>
</li>
<li><p>回到域名控制台，修改刚才添加的记录，把CNAME的值放入放进记录值，然后保存。<br><img src="http://image.jinl1874.xyz/img/sub_domain_success.png" alt="成功"></p>
</li>
<li><p>可能会有一段时间的等待，回到域名管理，如果下图红圈出成功，那么七牛云已经创建并绑定成功了。<br><img src="http://image.jinl1874.xyz/img/success.png" alt="sucees"></p>
</li>
</ul>
<h4 id="5-使用PicGO"><a href="#5-使用PicGO" class="headerlink" title="5. 使用PicGO"></a>5. 使用PicGO</h4><ul>
<li><p>推荐下载<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2" target="_blank" rel="noopener">2.22版本</a></p>
</li>
<li><p>安装成功后，打开PicGo设置，拉到最下面，勾选“七牛图床”。</p>
</li>
<li><p>在图床设置，设置七牛图床。<br><img src="http://image.jinl1874.xyz/img/picgo_setting.png" alt="picGoSetting"></p>
</li>
<li><p>打开七牛云，进入密钥管理，复制AK和SK分别填到AccessKey和SecretKey；</p>
</li>
<li><p>存储空间名即是你创建的对象存储的名字</p>
</li>
<li><p>访问地址即你的http://+二级域名（如<a href="http://image.jinl1874.xyz" target="_blank" rel="noopener">http://image.jinl1874.xyz</a>)</p>
</li>
<li><p>存储区域根据下图而填，我的是华南区，所以填Z2。<br><img src="http://image.jinl1874.xyz/img/20200522225637.png" alt="area"></p>
</li>
<li><p>点击确定，建议设为默认图床。</p>
</li>
<li><p>此时已经设置成功，可以在“上传区”上传图片。</p>
</li>
</ul>
<h4 id="到了此处，搭建图床的工作已经完成。"><a href="#到了此处，搭建图床的工作已经完成。" class="headerlink" title="到了此处，搭建图床的工作已经完成。"></a>到了此处，搭建图床的工作已经完成。</h4><p>欢迎访问个人博客主页<a href="jinl1874.github.io">jinl1874</a></p>
]]></content>
      <categories>
        <category>BlogBuild</category>
        <category>Other</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>图片转为PDF文件的几种方法</title>
    <url>/2020/06/30/img-to-pdf/</url>
    <content><![CDATA[<blockquote>
<p>最近下载《Death Note》漫画，只是只有图片，想了想还转为 PDF 比较好看，经过一番查找，找到了几种方法。</p>
</blockquote>
<h4 id="1-系统自带的打印为-PDF-文件"><a href="#1-系统自带的打印为-PDF-文件" class="headerlink" title="1. 系统自带的打印为 PDF 文件"></a>1. 系统自带的打印为 PDF 文件</h4><p>具体操作：选择好图片 -&gt; 右键 -&gt; 打印 -&gt; 选择大小为 A4 纸 -&gt; 打印。<br>优点：简单，并且不用安装任何软件。<br>缺点：图片的大小会改变，不能展示原来的图片。</p>
<h4 id="2-SanPDF"><a href="#2-SanPDF" class="headerlink" title="2. SanPDF"></a>2. SanPDF</h4><p>一个专业搞 PDF、WORD、EXCEL 之间转换以及操作的软件。<br>具体操作：去<a href="https://www.sanpdf.com/" target="_blank" rel="noopener">官网</a>下载安装，可以把安装目录放在 C 盘以外的盘。安装后打开，选择图片转 PDF，然后添加文件，再点击右上角的生成 pdf 即可在图片所在目录找到 PDF 文件。<br><img src="https://pic4.zhimg.com/80/v2-5d3facfd8a47d609b034dfb45649554b.png" alt="Image"><br>生成的 pdf 如图所示:<br><img src="https://pic4.zhimg.com/80/v2-dca7e5275bae0c6cb21925d34c92c604.png" alt="Image"><br>优点：图片是原生大小，亦是原生质量，比较清晰。此软件还可以操作其它诸如 word 与 pdf 互转、pdf 转图片等操作，是个难得的好软件。<br>缺点：是付费软件，不过可以绿色软件下载。</p>
<h4 id="3-使用-python-里的-reportlab-生成-pdf"><a href="#3-使用-python-里的-reportlab-生成-pdf" class="headerlink" title="3. 使用 python 里的 reportlab 生成 pdf"></a>3. 使用 python 里的 <code>reportlab</code> 生成 pdf</h4><ul>
<li>首先需要安装<code>reportlab</code>库，如果你的电脑已经安装了 pip，那么只需一条<code>pip install reportlab</code>命令即可。</li>
<li>以下是 python 图片转为 pdf 的代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> reportlab.lib.pagesizes <span class="keyword">import</span> A4, portrait, landscape</span><br><span class="line"><span class="keyword">from</span> reportlab.pdfgen <span class="keyword">import</span> canvas</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_images_to_pdf</span><span class="params">(img_path, pdf_path)</span>:</span></span><br><span class="line">    pages = <span class="number">0</span></span><br><span class="line">    (w, h) = portrait(A4)</span><br><span class="line">    c = canvas.Canvas(pdf_path, pagesize=portrait(A4))</span><br><span class="line">    l = os.listdir(img_path)</span><br><span class="line">    l.sort(key=<span class="keyword">lambda</span> x: int(x[:<span class="number">-4</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        f = img_path + os.sep + str(i)</span><br><span class="line">        c.drawImage(f, <span class="number">0</span>, <span class="number">0</span>, w, h)</span><br><span class="line">        c.showPage()</span><br><span class="line">        pages = pages + <span class="number">1</span></span><br><span class="line">    c.save()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path = <span class="string">r"D://web//script//pxtt-118"</span></span><br><span class="line">pdf_path = <span class="string">r"D://web//script//pdf//pxtt-118.pdf"</span></span><br><span class="line"></span><br><span class="line">convert_images_to_pdf(path, pdf_path)</span><br></pre></td></tr></table></figure>

<p>将上面的 path 改为图片的目录路径，pdf_path 改为具体到文件名的路径。注意图片目录路径不能包含除图片外的文件，否则会报错。</p>
<p>优点：同上面系统操作 pdf。<br>缺点：很麻烦。</p>
<p>欢迎访问我的<a href="https://jinl1874.xyz">博客网站</a>。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Other</category>
      </categories>
      <tags>
        <tag>img</tag>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>安装并使用IDM(Internet Download Manager)</title>
    <url>/2020/06/28/use-idm/</url>
    <content><![CDATA[<h4 id="IDM-是什么？"><a href="#IDM-是什么？" class="headerlink" title="IDM 是什么？"></a>IDM 是什么？</h4><blockquote>
<p>Internet Download Manager（简称 IDM）是一个用于 Windows 系统的下载管理器。<br>IDM 可以让用户自动下载某些类型的文件，可将文件划分为多个下载点以更快下载，并列出最近的下载，方便存取文件。相对于其他下载管理器，具有独特的动态档案分割技术。<br>其优点在于，能分析下载地址中的实际地址，但若地址无效时则跳换成失效网页，当地址重新有效而无法恢复成原来的地址。<br>而缺点在于，必须设置分段的临时文件存放的磁盘位置，下载完成后再自动合并成一个完整的文件，同时删除临时文件（这种做法不同于其他下载软件预先分配一整块磁盘空间）。所以，下载的如果是机密文件，就容易被数据恢复软件恢复，造成安全隐患。<br>– 摘自<a href="https://zh.wikipedia.org/zh-hans/Internet_Download_Manager" target="_blank" rel="noopener">维基百科</a></p>
</blockquote>
<p>通俗来讲就是一个优秀的下载工具。</p>
<h4 id="为什么使用-IDM"><a href="#为什么使用-IDM" class="headerlink" title="为什么使用 IDM"></a>为什么使用 IDM</h4><p>因为 IDM 使用的是多线程下载，所以比浏览器自带的下载要快很多。<br>并且 IDM 其它的功能：</p>
<ul>
<li>下载百度网盘；</li>
<li>下载 BIliBili、Youtube 等主流视频网站以及几乎所有的盗版视频网站的视频。</li>
<li>下载文件自动分类</li>
</ul>
<h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><ol>
<li>这是个收费软件，可以去<a href="https://www.internetdownloadmanager.com/" target="_blank" rel="noopener">官网</a>购买下载。</li>
<li>也可使用绿色版：<br><a href="https://pan.baidu.com/s/1o_QEqKeSZLFKu9WQToo-8Q" target="_blank" rel="noopener">网盘地址</a><br>提取码：jinl<ul>
<li>下载上述文件后，提取到一个纯英文目录（养好安装文件都放在纯英文目录的习惯）。</li>
<li>打开其文件目录，点击<code>绿化.bat</code>文件。<small>// 不执行这一步的话浏览器无法调用 IDM 下载</small></li>
</ul>
</li>
</ol>
<h4 id="推荐配置"><a href="#推荐配置" class="headerlink" title="推荐配置"></a>推荐配置</h4><ul>
<li>常规<br><img src="http://image.jinl1874.xyz/img/20200629000033.png" alt="image"></li>
<li>连接<br>把最大连接数改为 32(虽然一般不会用到这么多）。</li>
<li>代理服务器<br>如果你的电脑已经挂了代理，并希望下载 Youtube 等网站的东西，可选择切换为<code>使用系统代理</code>。</li>
<li>其它的保持默认即可。</li>
</ul>
<h4 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h4><ul>
<li>Firefox：打开浏览器$\rightarrow$打开 Firefox 附加组件$\rightarrow$搜索 idm$\rightarrow$点进第一个搜索结果安装。</li>
<li>Chrome：打开浏览器$\rightarrow$打开 Chrome 网上应用$\rightarrow$搜索 idm$\rightarrow$点进第一个搜索结果安装。<br><small>Chrome 需要额外配置：右上三点$\rightarrow$更多工具$\rightarrow$扩展$\rightarrow$<em>IDM Integration Module</em>$\rightarrow$详细信息$\rightarrow$打开允许访问文件网址。</small></li>
<li>其它浏览器：同上</li>
</ul>
<p>配置好浏览器后，以后下载文件就是自动调用 IDM 下载了。</p>
<h4 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h4><p>当浏览器开打含有视频播放的网页时，视视屏框的右上角会出现一个悬浮条，直接点击下载即可。<br><img src="http://image.jinl1874.xyz/img/20200629005318.png" alt=""><br>注意：</p>
<ol>
<li>下载优酷的官方上传的版权视频时，会下载到一个无法解析的.ts 文件。</li>
<li>当 B 站的使用 HTML5 播放器时，下载的 B 站视频没有声音，此时使用 Flash 播放器即可。Flash 就要淘汰了怎么办？可以在 Chrome 浏览下载一款名为“B 站下载助手”的插件。</li>
</ol>
<h4 id="下载百度网盘的文件"><a href="#下载百度网盘的文件" class="headerlink" title="下载百度网盘的文件"></a>下载百度网盘的文件</h4><ol>
<li>首先下载插件<a href="http://pan.newday.me/" target="_blank" rel="noopener">网盘助手</a>。<br>这个插件可以直接生成直链，而 IDM 需要直链才能下载。除此之外，此插件还有很多功能，如自动填充提取码等，就不一一赘述了。</li>
<li>要下载网盘里的文件，首先需要将文件保存在自己的网盘里。在要下载的文件前打上勾，这时上方就会出现<code>生成链接</code>的选项$\downarrow$。<br><img src="http://image.jinl1874.xyz/img/20200629011751.png" alt="生成链接"></li>
<li>点击后会出现下载直链$\downarrow$<br><img src="http://image.jinl1874.xyz/img/20200629012103.png" alt="直链"></li>
<li>右键该链接，选择 IDM 下载。<br><img src="http://image.jinl1874.xyz/img/20200629012412.png" alt="idm"></li>
</ol>
<p>注意：如果出现 403、401 等错误，可以点击修改步骤三的里的应用 ID，一般改为<code>778750</code>即可。</p>
<hr>
<p>以上就是全部内容，欢迎访问个人<a href="https://jinl1874.xyz">博客</a>。</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑有哪些可以提升体验的软件？</title>
    <url>/2020/07/18/window-soft/</url>
    <content><![CDATA[<p>以下这些都是可以提升电脑使用体验的 10 款软件。</p>
<h4 id="1-截图软件：Snipaste"><a href="#1-截图软件：Snipaste" class="headerlink" title="1. 截图软件：Snipaste"></a>1. 截图软件：Snipaste</h4><p>曾经我是个手机拍屏党，后来被诸多表情大师教会截图后，毅然地转到截图派。<br><img src="https://pic4.zhimg.com/80/v2-a8e78bd7fd888e942cd369fa8128fdf5.jpg" alt="Image"></p>
<p>一开始使用的是 QQ 截图以及微信截图，但是这两个截图方式都要事先打开这俩软件，并且也不够专业/好用，最后找到了这个截图软件——Snipaste。<br>这个号称最好用的的截图软件，目前已经有 win 版、mac beta 版。</p>
<p>它好用在哪里呢？<br>第一，软件轻量，并且无广告。这个软件有免费版和专业版，免费版没有任何广告，提供的功能也足够个人用户使用；<br>第二，功能强：</p>
<blockquote>
<p>自动检测界面元素区域</p>
<p>像素级的鼠标移动控制、截图范围控制</p>
<p>取色器 (试试 F1, C, F3)</p>
<p>历史记录回放 (,/.)</p>
<p>支持多屏</p>
<p>支持高分屏</p>
</blockquote>
<p>第三，无与伦与的贴图功能。当你写文档需要查资料时，把相关截图贴上屏幕后，体验瞬间上一档次；</p>
<p><img src="https://pic4.zhimg.com/80/v2-170c49a04f7547fa4bb5c85fef5b147c.png" alt="Image"></p>
<p>第四，更强的图像标注功能，基本一个常见图片编辑器有的，这个都有；</p>
<p>第五，可自定义截图的分辨率。</p>
<p>更多的功能可以去看<a href="https://docs.snipaste.com/zh-cn/" target="_blank" rel="noopener">官方文档</a>。<br>官网下载<a href="https://zh.snipaste.com/" target="_blank" rel="noopener">地址</a></p>
<h4 id="2-文件查找——Everything"><a href="#2-文件查找——Everything" class="headerlink" title="2. 文件查找——Everything"></a>2. 文件查找——Everything</h4><p><img src="https://pic4.zhimg.com/80/v2-37f70af2050b2a4dab90016cf2eade08.png" alt="Image"></p>
<p>一个轻量级的查找文件的软件，当做好索引后，查找文件的速度是秒计的。<br>不过这个是实在找不到文件时才用的，平时做好文件的分类索引后，就很少有它的用武之地。</p>
<p><a href="https://www.voidtools.com/" target="_blank" rel="noopener">下载地址</a></p>
<h4 id="3-解压缩软件——7z"><a href="#3-解压缩软件——7z" class="headerlink" title="3. 解压缩软件——7z"></a>3. 解压缩软件——7z</h4><p><img src="https://pic4.zhimg.com/80/v2-b8897b531c317f6d1180a27d4856cf95.png" alt="Image"></p>
<p>解压缩软件是电脑里必备的软件之一了。<br>常见的解压缩软件有——winrar、360 压缩、bendzip 等。</p>
<p>7Z 的优点是开源、免费、轻量（安装包仅 1.3Mb），压缩比也高，并且压缩软件该有的功能一个不少。缺点就是颜值一般般，追求这方面的话，推荐另一款同样优秀的压缩软件——Bendzip。</p>
<p><a href="https://sparanoid.com/lab/7z/" target="_blank" rel="noopener">官网下载地址</a></p>
<h4 id="4-阅读-PDF-文件——sumatra"><a href="#4-阅读-PDF-文件——sumatra" class="headerlink" title="4. 阅读 PDF 文件——sumatra"></a>4. 阅读 PDF 文件——sumatra</h4><p><img src="https://pic4.zhimg.com/80/v2-df0a829b4032f0226b887427a201798c.png" alt="Image"><br>说是阅读 PDF 软件，其实还支持 epub、mobi、CHM 等文件的阅读。</p>
<blockquote>
<p>Sumatra PDF is a PDF, ePub, MOBI, CHM, XPS, DjVu, CBZ, CBR reader for Windows.</p>
</blockquote>
<p>优点是轻量、占用内存小、简洁、开源。</p>
<p><a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html" target="_blank" rel="noopener">官网下载地址</a></p>
<h4 id="5-下载软件——IDM"><a href="#5-下载软件——IDM" class="headerlink" title="5. 下载软件——IDM"></a>5. 下载软件——IDM</h4><p><img src="https://pic4.zhimg.com/80/v2-41146ab15375705b71f80c0ba4b59187.png" alt="Image"></p>
<p>一个使用多线程的下载软件，可以接管浏览器里的下载，下载速度非常快。不仅如此，该软件还可以几乎所有网站上的视频，还可以下载百度网盘的文件不过需要一点配置。</p>
<p>曾经写过一篇 IDM 下载的配置，里面有 IDM 的下载链接，<a href="https://jinl1874.xyz/2020/06/28/use-idm/">地址</a>。</p>
<h4 id="6-视频软件——PotPlayer"><a href="#6-视频软件——PotPlayer" class="headerlink" title="6. 视频软件——PotPlayer"></a>6. 视频软件——PotPlayer</h4><p><img src="https://pic4.zhimg.com/80/v2-ee68e61b55fca6dcd2473d322f6f2df8.png" alt="Image"><br>大概是最优秀的视频播放器了，界面简洁美观，没有流氓软件有的一切行为，比如突然修改你的默认播放软件等。<br>功能多，录屏、截 gif 之类的不在话下，支持逐帧跳转，截图非常方便。总之一般视频播放软件有的，它也有；其它播放软件没有的，它也有，比如可以收看电视信号，看直播等，可以去网上搜一下教程。</p>
<p><a href="http://www.potplayercn.com/" target="_blank" rel="noopener">官网下载链接</a></p>
<h4 id="7-记事本替代——notepad3"><a href="#7-记事本替代——notepad3" class="headerlink" title="7. 记事本替代——notepad3"></a>7. 记事本替代——notepad3</h4><p><img src="https://pic4.zhimg.com/80/v2-23c994c8de63a39c0dca508da2e29a06.png" alt="Image"></p>
<p>相信大家在写一些事情或者打开文本文件的时候经常会用到记事本，但是记事本的功能界面实在是太简陋了，比如常见的代码高亮、正则表达式、更改主题等全都没有。<br>然后就找到了这一款软件——notepad3，安装会自动替代系统的 notepad 软件，也就是说你打开 notepad 即是打开 notepad3。基本的使用方式是和 notepad 是一样的，但多了很多配置功能。</p>
<p><a href="https://www.rizonesoft.com/downloads/notepad3/" target="_blank" rel="noopener">下载链接</a></p>
<h4 id="8-window-任务栏透明小软件——TranslucentTB"><a href="#8-window-任务栏透明小软件——TranslucentTB" class="headerlink" title="8. window 任务栏透明小软件——TranslucentTB"></a>8. window 任务栏透明小软件——TranslucentTB</h4><p>任务栏默认是黑色的，有的会随主题颜色改变而改变，不过都不是透明的，并且有点显丑。</p>
<p>TranslucentTB，可以使任务栏改变状态。一般有两种<br>模糊<br><img src="https://pic4.zhimg.com/80/v2-c52e293bb1f781b8980476c0961fb64c.png" alt="Image"><br>清晰<br><img src="https://pic4.zhimg.com/80/v2-a51aa1f41395567578f68cc5ea1815b1.png" alt="Image"></p>
<p><a href="https://github.com/TranslucentTB/TranslucentTB" target="_blank" rel="noopener">github 地址</a></p>
<p>该软件已上架微软商店，可以去<a href="https://www.microsoft.com/zh-cn/p/translucenttb/9pf4kz2vn4w9?rtc=1" target="_blank" rel="noopener">该处</a>下载安装。</p>
<h4 id="9-浏览器——Firefox"><a href="#9-浏览器——Firefox" class="headerlink" title="9. 浏览器——Firefox"></a>9. 浏览器——Firefox</h4><p>火狐浏览器一款开源浏览器，可能是仅存的非 chomium 内核浏览器。<br>对比 chrome 的优点是，上扩展商店以及同步数据的时候不用特别的上网方式。</p>
<p>注意下载浏览器的时候不要下载到国内特供版，看准网址，如果域名是(firefox.com.cn)的话，那就是国内特供的了，认准域名(mozilla.org)。国内特供版的数据无法与非国内版的同步，曾经我就是被这个坑过。</p>
<p><a href="https://www.mozilla.org/en-US/firefox/new/" target="_blank" rel="noopener">下载地址</a></p>
<h4 id="10-安全软件——火绒"><a href="#10-安全软件——火绒" class="headerlink" title="10. 安全软件——火绒"></a>10. 安全软件——火绒</h4><p>一个没有任何流氓行为的安全软件，不过我也就是用它来管管弹窗，以及开机自启动软件的，一般的安全问题有 window defense 就够了。<br>如果你的电脑安装有其它国产免费安全软件的话，早卸早安全。</p>
]]></content>
      <categories>
        <category>Window</category>
      </categories>
      <tags>
        <tag>soft</tag>
        <tag>other</tag>
        <tag>window</tag>
      </tags>
  </entry>
  <entry>
    <title>window-table-setting</title>
    <url>/2020/07/22/window-table-setting/</url>
    <content><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-2663a9d08b4c8eef6c69b3ca812bbd26.png" alt="Image"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>window 桌面最基本的一个需求——干净整洁。</p>
<p>实现这一目标的最简单的方法，就是把桌面上所有的东西都删掉，效果显而易见，干净又整洁。</p>
<p>清了桌面图标之后，启动应用有以下几种方式：</p>
<h3 id="1-搜索"><a href="#1-搜索" class="headerlink" title="1. 搜索"></a>1. 搜索</h3><p>这个是比较常见的一种方式，先按 win 键，然后再键入需要搜索的软件名称。如果是使用拼音输入法，那么只需打上拼音，搜索栏就会显示要找的程序软件。<br>比如说找 TIM，直接键入 tim，再按回车即可。<br><img src="https://pic4.zhimg.com/80/v2-6ac2268f51f74a94e5b956024b420071.png" alt="Image"></p>
<h3 id="2-开始屏幕"><a href="#2-开始屏幕" class="headerlink" title="2. 开始屏幕"></a>2. 开始屏幕</h3><p>不管常不常用，把图标固定在开始屏幕并分类好，使用的时候按 win 键，再点击所要打开的软件图标即可。<br><img src="https://pic4.zhimg.com/80/v2-497453142abdc45e2a4647bf522fa97b.png" alt="Image"></p>
<h3 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3. 快捷键"></a>3. 快捷键</h3><p>一些经常要用的软件，如 QQ、微信等，使用快捷键启动会更加方便快捷。</p>
<p>设置方法：找到软件的快捷方式，右键再选择“打开文件位置”，<br><img src="https://pic4.zhimg.com/80/v2-30ab69193faa13057f8ff529da412f53.png" alt="Image"><br>打开所在的位置后，再右键该快捷方式，选择“属性”，<br><img src="https://pic4.zhimg.com/80/v2-4ef65ccec93f616fbabbd0746826bfe5.png" alt="Image"><br>设置快捷键后，点击确定即可：<br><img src="https://pic4.zhimg.com/80/v2-285d8de10140609d91c121fce45d5a5c.png" alt="Image"></p>
<h3 id="4-win-r-启动"><a href="#4-win-r-启动" class="headerlink" title="4. win+r 启动"></a>4. win+r 启动</h3><p>设置太多快捷键会产生冲突，那么这时再启动另一方式—— win+r 启动程序。<br>按 win+r 后，会显示一个运行框，输入“notepad”，然后回车，即会启动记事本软件。<br><img src="https://pic4.zhimg.com/80/v2-9ec183b1bc2f13fc4ba3369ed0bd6c10.png" alt="Image"></p>
<p>当然这只是一些系统软件才可以启动，要让第三方软件通过这种方式启动，只需做一些微小工作。</p>
<ul>
<li><p>新建文件夹：<br>先新建一个名为“WinR”的文件夹，放在一个容易找到的目录即可，并复制好“WinR”的所在目录。</p>
</li>
<li><p>设置环境变量：<br>在我的电脑里，右键此电脑打开“属性”选项，<br><img src="https://pic4.zhimg.com/80/v2-bb8e5add30182d04f79ff505485fe17b.png" alt="Image"><br>点击高级系统设置，再点击环境变量，<br><img src="https://pic4.zhimg.com/80/v2-bb84f6e99aa415f41ec61023f98f0a3c.png" alt="Image"><br>再点击系统变量里的 Path，点击编辑，<br><img src="https://pic4.zhimg.com/80/v2-8a8cb49f475f79a5ae662fc114d220ef.png" alt="Image"><br>再点击新建，再把 WinR 目录填进去，再一路确定到退出即可。<br><img src="https://pic4.zhimg.com/80/v2-f3582f691976a78767dc5708671a9c25.png" alt="Image"><br>注：若显示是下面这样的，在文本末尾分号后面填入目录，再在末尾加上分号（英文输入法的分号），再点击确定即可。若是文本末没有分号，要自已添加一个分号，再粘贴上目录。<br><img src="https://pic4.zhimg.com/80/v2-f05c4f68713e72807ee7d1c58e240a76.png" alt="Image"></p>
</li>
<li><p>放入快捷方式：<br>在 WinR 放入快捷方式，再改成一个比较简单好记的名字，比如微信改为 wx，记事本改为 np，虾米改为 xm 等。<br><img src="https://pic4.zhimg.com/80/v2-9b61c4872aa3f53b034974b8571fa6f4.png" alt="Image"></p>
</li>
</ul>
<p>这样就设置好了，再使用 win+r，再键入 wx 回车即可打开微信。</p>
<h3 id="5-任务栏"><a href="#5-任务栏" class="headerlink" title="5. 任务栏"></a>5. 任务栏</h3><p>默认的是黑色的，有点丑，<br><img src="https://pic4.zhimg.com/80/v2-f88a791e75eb8aed87162235489ef750.png" alt="Image"><br>使用 TranslucentTB 可使之透明化。<br>该软件的<a href="https://github.com/TranslucentTB/TranslucentTB" target="_blank" rel="noopener">github 地址</a>。</p>
<p>已上架微软商店，可以去<a href="https://www.microsoft.com/zh-cn/p/translucenttb/9pf4kz2vn4w9?rtc=1" target="_blank" rel="noopener">该处</a>下载安装。</p>
<p>一些常用的软件也可固定在任务，比如浏览器，而文件管理器可以用快捷键<br>win+e 打开，就不需要固定了。</p>
<p>在任务栏右键可选择显示一些按钮与否，<br><img src="https://pic4.zhimg.com/80/v2-3dac6facfcc9be3c3d55bea05aac7ebf.png" alt="Image"><br>我感觉这些都有点多余，于是全部隐藏。</p>
<h3 id="6-END"><a href="#6-END" class="headerlink" title="6. END"></a>6. END</h3><p>到这里，基本上一个整洁的桌面就完成了，没有什么特殊的效果，也不需要安装什么桌面软件，但干净就够了。</p>
<p>最后晒一下我的桌面：<br><img src="https://pic4.zhimg.com/80/v2-f61899e001064a713ad0b50e867fd34f.png" alt="Image"></p>
]]></content>
      <categories>
        <category>Window</category>
      </categories>
      <tags>
        <tag>wp10</tag>
        <tag>win</tag>
      </tags>
  </entry>
  <entry>
    <title>推理小说《寻狗事务所》-书评</title>
    <url>/2020/07/30/%E4%B9%A6%E8%AF%84-%E5%AF%BB%E7%8B%97%E4%BA%8B%E5%8A%A1%E6%89%80/</url>
    <content><![CDATA[<p>一言以蔽之，是一本有意思的小说。</p>
<p>寻狗事务所一本推理小说，作者是米泽穗信。说起米泽穗信，大概率想起的作品是《冰菓》。《冰菓》由于京都动画出色的改编，导致这本冷门小众的日常推理题材得以被大家得知。我看过几本他的书，如《冰菓》《寻狗事务所》《再见妖精》以及《羔羊的盛宴》，题材各有不同，但是有一个相同的特点，就是灰暗。《冰菓》在京都的改编下，添加了些许温暖的情节，如在第七集《初见真身》的最后，加上了一段姐姐背着妹妹的情节，故事变得温暖多了。</p>
<p>本书的类型是本格推理，从书名得知，事务所就是侦探所，是侦探接收委托的地方。</p>
<p>主角是一个常见的日式作品主角，不是很温柔，不是很暴力，个性中规中矩。他在大城市工作，不久患了异位性皮肤炎，在城里治不好，不得已回到乡下。<br>病治好后做在附近开了一个事务所，本意寻找丢失的狗，奈何推荐来的人没有一个是寻狗的。或者说本书除了那次在大街上保护小学生被狗咬之外，就跟狗没什么关系了。</p>
<p>事务所除主角外还有一人，名叫半田半平，人设是没头脑，是主角的以前的同学。由于一直想成为侦探，就来前应聘。</p>
<p>主角一开始接了一个找失踪孙女佐久良桐子的委托，然后又接了一个搞明白古文里的信息，这个任务由半平完成。两个人分别执行两个任务，一小节换一个第一视角（这算是日本小说的常态了吧，第一视角随便换，个人不太喜欢这种作品。第三人称可以随便换，但第一人称换的话，看着会有点别扭）。</p>
<h4 id="以下有剧透"><a href="#以下有剧透" class="headerlink" title="以下有剧透"></a>以下有剧透</h4><p>主角从各种方面去找该失踪女性。在本市里发现了很多有关于她的踪迹。又发现了桐子做了个网站，并喜欢在该网站发布自己的日记。并在在朋友的帮助下，找到了相关的网站内容。，但是被一个网名为螳螂的人缠上了，不断地在网上骚扰她。桐子不堪其扰，关闭了网站，但一个月后又重新开启，螳螂又开始在留言里骚扰她。三个月后，桐子又关闭了网站，并且已经迁移了户藉。</p>
<p>在另一条线里，半平从一个地方查找另一个地方，发现要解开古文的内容，需要一本书。而那本书比较少，半平要借的时候发现已经没了，只得预约。发现还有一个人也是要借该书，并答应给书到了借给他看。</p>
<p>在另一边，主角发现了桐子失踪的原因。螳螂通过一些蛛丝马迹找到了其本人姓名住处，简单来说就是人肉，而且与她直接接触过了。并分析出她现在最有可能在地方是在共爷爷奶奶家。果不其然在其家中的隐秘位置发现了生活过的踪迹，还发现了一本日记，讲述了她的心理历程，以及现在躲在一个“谷中城”的地方，但并没有人知道这个“谷中城”在哪。</p>
<p>回到事务所后，半平带了一个曾被桐子委托过的保镖。了解到了一部分情况，那个人叫间壁良太郎，曾两次去桐子家。第一次做了什么在书中并没有透露。</p>
<blockquote>
<p>我仔细地想了想“第二次”这三个字所代表的意思。</p>
<p>“第一次是在她找上你们‘阿部调查事务所’之前发生的，对吧？”</p>
<p>“是的。”</p>
<p>“当时间壁对佐久良小姐做了什么？”</p>
<p>“……这我不能说。”</p>
<p>田中的脸上写着“敬请见谅”四个大字。<br>“没有报警吗？”</p>
<p>“因为这是自诉罪。一想到提出告诉可能会对她造成很大的伤害，我们怎么样也没办法大力鼓吹。”</p>
<p>我大概可以猜得出来到底发生什么事了。</p>
</blockquote>
<p>这里是书中暧昧的对话，到底是什么事才会导致桐子雇保镖，报警又会对自身造成比较大的伤害。我查了下百科，里面讲日本没有自诉，也许百度百科是错的吧。不过到现在我也没有猜出到底发生事。</p>
<p>第二次在去桐子的家中被桐子刺伤过，不过他并没有追究什么事。并表明出院后会去找桐子。</p>
<p>第二天，主角看半平写的有关古文的报告里，得知了谷中城的位置，而该位置是由那本书提供，也就说，只要找到了那本书，即可找到桐子的位置。这时候，主角得知了另一个着急用此书的人，推断此人即为螳螂。</p>
<p>之后，主角在赶往谷中城的过程中突然意识到，一切没有那么简单。桐子回到本市后做的事太明显了太暴露了，尤其是那本笔记，仿佛是在刻意告诉她的位置。此时，终于发现桐子与螳螂的关系转变，“他是猎物，我才是猎人”。引诱其来到一处几乎没人知道的谷中城，再了结此事，一切都是桐子的计划。</p>
<p>最后，主角来了谷中城，大喊之后桐子现身。此时主角必需装作什么事都不知道的样子，否则主角也会出事。与桐子谈了自己出现在这里的原因是她爷爷的委托，并简单说了几句之后就回去。</p>
<p>结尾处，主角在口袋里装着一把小刀。</p>
<hr>
<p>本书有着本格推理的很多要素，如侦探、助手、案子、寻找线索、推理以及反转等。<br>叙事方式是双线叙事，就个人感受而言，助手线略无趣些，无论是事件的内容，还是具体寻找的内容，就如流水账一般，主角线稍好看些。<br>本书的剧情方面中规中矩，没有什么太亮眼的地方，讨论了一些网络里的人肉搜索吧。本书的年代是 2004 年，那时的日本都已经有了人肉搜索了吗。或者说这说的是跟踪狂吧，从网络一直追到现实里去。诡计也还行，猎物变为猎人，猜出来的难度也比较低（虽然我没猜出来），大部分人看到在桐子家日记的时候，就感觉到非常不对劲了吧。</p>
<p>桐子的后续结局会怎么样呢？我觉得大概率会被查到。首先螳螂被杀后导致失踪了很久，自然会有人报案。并且会检查螳螂相对应的行踪、电脑、以及盘问身边的人。并且他之前受了伤，虽然填的是自己导致受伤的，但是很可能会按这里往下查，或许会查到桐子吧。不过找不找得到证剧又是另一回事了。</p>
<p>本书的结局算一个亮点吧，侦探发现了事情的真相，加害人成了受害者。但是侦探并没有解决事情，并且凶手也依然逍遥法外，还在侦探的身边。侦探在整件事情过后，每天都过着瑟瑟发抖的生活。不过最多也是一个有趣的点吧。</p>
<p>本书值不值得看呢，说值也值，说不值也行，一本中规中矩的推理小说吧。</p>
]]></content>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 双线布置到2020新版 Coding 和 GithubPage</title>
    <url>/2020/05/23/useCoding/</url>
    <content><![CDATA[<h4 id="为什么使用-Coding"><a href="#为什么使用-Coding" class="headerlink" title="为什么使用 Coding"></a>为什么使用 Coding</h4><p>现在国内访问 github 的速度已经非常慢了，而且百度的爬虫也无法抓取到 github page 上面的内容。<br>而 Coding 类似于 github，也是一个免费的代码托管平台，随便一个仓库都可以用来做静态网页服务，访问速度也还可以。</p>
<p>关于 github page 的使用可以参考我的上一篇博客<a href="https://jinl1874.xyz/2020/05/21/hexo-0/">使用 Hexo 和 GithubPage 免费搭建博客网站</a>。</p>
<h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><ul>
<li>打开<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>，注册账号。</li>
<li>现在 Coding 只能注册团队了，不过五人以下是免费的。团队名称以及域名按自己喜好而填吧。</li>
</ul>
<h4 id="建仓"><a href="#建仓" class="headerlink" title="建仓"></a>建仓</h4><ul>
<li>全部项目 $\rightarrow$ 新建项目 $\rightarrow$ 代码托管项目 $\rightarrow$ 填写名称、标识 $\rightarrow$ 勾选启用 Readme.md 及公开源代码 $\rightarrow$ 完成创建。</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>项目设置 $\rightarrow$ 功能开关 $\rightarrow$ 打开持续部署和持续集成<br><img src="http://image.jinl1874.xyz/img/20200523233703.png" alt="项目设置"><br><img src="http://image.jinl1874.xyz/img/20200523233828.png" alt="功能"></li>
<li>持续部署 $\rightarrow$ 静态网站 $\rightarrow$ 立即发布静态网站<br><img src="http://image.jinl1874.xyz/img/20200523234059.png" alt="部署"></li>
<li>填写网站名字 $\rightarrow$ 保存<br><img src="http://image.jinl1874.xyz/img/20200523234300.png" alt="保存"></li>
</ul>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><ul>
<li><p>配置好后在静态网站选项里会有一个访问地址，先记好。<br><img src="http://image.jinl1874.xyz/img/20200523234509.png" alt="address"></p>
</li>
<li><p>域名解析控制台 $\rightarrow$ 解析 $\rightarrow$ 修改 github 记录 $\rightarrow$ 解析路线设为境外<br><img src="http://image.jinl1874.xyz/img/20200523235105.png" alt="github"></p>
<blockquote>
<p>两个都记录都要改</p>
</blockquote>
</li>
<li><p>如果你之前在 github 设置了强制 https，那么在修改后，先暂停使用两个 github 记录，否则之后 Coding 申请证书会失败。不过建议还是要暂停一下，免得后面出现问题。</p>
</li>
<li><p>添加两个记录，类型为 CNAME，主机记录分别为@和 www，记录值为刚才得到的访问地址。<br><img src="http://image.jinl1874.xyz/img/20200524000911.png" alt=""><br><img src="http://image.jinl1874.xyz/img/20200524000014.png" alt="添加记录"></p>
</li>
<li><p>回到 Coding，点击右上角的“齿轮设置”，拉到下面“自定义域名”，分别绑定两个域名，如“<a href="http://www.jinl1874.xyz”和“jinl1874.xyz”。" target="_blank" rel="noopener">www.jinl1874.xyz”和“jinl1874.xyz”。</a><br><img src="http://image.jinl1874.xyz/img/20200524000244.png" alt=""></p>
</li>
<li><p>可以选择首选域名，也可以勾选跳转到首先，这样打开网站时地址栏就会默认是那个域名了。</p>
</li>
<li><p>然后就默默地等申请证书成功，几分钟到十几分钟不等。最后显示证书状态为正常就算成功了。<br><img src="http://image.jinl1874.xyz/img/20200524000745.png" alt="证书"></p>
</li>
<li><p>回到域名解析器，恢复 github 的域名解析记录。</p>
</li>
</ul>
<h4 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h4><ul>
<li>进入你的主目录[C://Users//xxx]，勾选查看隐藏文件，找到<code>.ssh</code>目录，用记事本打开<code>id_rsa.pub</code>，复制全部内容。</li>
<li>代码仓库 $\rightarrow$ 设置 $\rightarrow$ 部署公钥 $\rightarrow$ 新建部署公钥 $\rightarrow$ 粘贴到公钥内容 $\rightarrow$ 新建。</li>
</ul>
<h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><ul>
<li>复制 Coding 仓库地址。</li>
<li>打开项目配置文件<code>_config.yml</code>，修改<code>deploy</code>内容。<br><img src="http://image.jinl1874.xyz/img/20200524001602.png" alt="项目"></li>
<li>打开命令行进入 Hexo 所目录，输入<code>▶ hexo g -d</code>。不久会跳出来一个提示输入账号密码的窗口，输入 Coding 的邮箱与密码，无误后会上传代码至仓库。</li>
</ul>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ul>
<li>由于设置的是自动部署，代码上传后就会自动部署。</li>
<li>可以打开浏览器，输入域名查看网站</li>
</ul>
<p>至此，在 Coding 配置 Hexo 已经完成了。</p>
<p>欢迎访问个人博客主页<a href="https://jinl1874.xyz">jinl1874</a></p>
]]></content>
      <categories>
        <category>BlogBuild</category>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 javascript 编写自动填写问卷星的脚本</title>
    <url>/2020/06/30/%E4%BD%BF%E7%94%A8js%E6%93%8D%E4%BD%9C%E9%97%AE%E5%8D%B7%E6%98%9F/</url>
    <content><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p>最近闲来无事，想来做一个自动填写的问卷星 JS 脚本。</p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>此脚本目前仅支持单选、多选以及填空题。<br>单选、多选采用随机选择的方法，而填空题则需要自己配置填写的内容。<br>具体配置方法为：<br>如果问卷里的第四题是填空题，那么在全局变量<code>config</code>加上一个键值，里面有 id 和 answer 两个键，填上相应的值（第四题即<code>id: 4</code>)即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> config = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">4</span>,</span><br><span class="line">    answer: [<span class="string">"不知道"</span>, <span class="string">"随便吧"</span>, <span class="string">"自学去"</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><p>打开浏览器，进入问卷页面如<a href="https://www.wjx.cn/jq/83481770.aspx" target="_blank" rel="noopener">js 测试</a>。<br>有以下两种方法运行：</p>
<blockquote>
<p>我用的是 Firefox 浏览器，其它浏览器的操作都差不多，可以就是快捷键有区别。</p>
</blockquote>
<ol>
<li>按<code>F12</code>，点击控制台，再把脚本粘贴到文本输入框，再点击上面的<code>运行</code>即可。<br><img src="http://image.jinl1874.xyz/img/20200630132036.png" alt="运行js"></li>
<li>浏览器安装一个名为<code>Violentmonkey</code>即<a href="https://violentmonkey.github.io/get-it/" target="_blank" rel="noopener">暴力猴</a>的脚本插件。安装完成之后，进入问卷页面，点击 violentmonkey 的图标，会出现一个弹框，<br><img src="http://image.jinl1874.xyz/img/20200630133801.png" alt="violentmonkey"><br>再点击其中的<code>+</code>，会出现编辑脚本的页面。<br><img src="http://image.jinl1874.xyz/img/20200630134305.png" alt="edit"><br>将脚本粘贴进去，保存文件，再回到问卷页面刷新，此时脚本即可自动运行。</li>
</ol>
<h5 id="脚本编写思路"><a href="#脚本编写思路" class="headerlink" title="脚本编写思路"></a>脚本编写思路</h5><ol>
<li><p>主体思路，找到所有<code>class=&quot;div_question&quot;</code>的 div，再遍历<code>div</code>，分析每个 div 是什么类型的题目，再选择对应的操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Traverse</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> title_list = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"div_question"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; title_list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> title = title_list[i];</span><br><span class="line">        <span class="keyword">var</span> lies = title.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">        <span class="keyword">var</span> textarea = title.getElementsByTagName(<span class="string">"textarea"</span>);</span><br><span class="line">        <span class="keyword">var</span> lis = [];</span><br><span class="line">        <span class="comment">// 将lies放在数组里</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> kl = <span class="number">0</span>; kl &lt; lies.length; kl++) &#123;</span><br><span class="line">            lis.push(lies[kl]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是选择，那么执行以下操作</span></span><br><span class="line">        <span class="keyword">if</span> (lis.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是多选</span></span><br><span class="line">            <span class="keyword">if</span> (lis[<span class="number">0</span>].getElementsByClassName(<span class="string">'jqCheckbox'</span>).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                multiple_selection(lis);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果是单选</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                single_selection(lis);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是填空题，那么调用对应的处理函数。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (textarea.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            blanks(title, textarea);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是其它，添加相应的操作.....</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"other"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>单选和多选采用随机数算法</p>
<ul>
<li>单选题，直接生成一个随机数，再点击随机数的选项。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理单选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">single_selection</span>(<span class="params">lis</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> random_0 = random_num(lis.length);</span><br><span class="line">    lis[random_0].getElementsByClassName(<span class="string">'jqRadio'</span>)[<span class="number">0</span>].click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>多选题，先随机生成一个要选的选项数，再用一个 for 循环执行。循环里面再生成随机数，接着去点击随机数对应的选项。<br>在随机的情况下，有可能会重复点击选项，导致没有选项选上，这时就需要检测一下有没有选项被选上了，如果没有，那就手动选一个。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理多选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiple_selection</span>(<span class="params">lis</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取随机数</span></span><br><span class="line">    <span class="keyword">var</span> random_0 = random_num(lis.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= random_0; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> random_1 = random_num(lis.length);</span><br><span class="line">        lis[random_1].getElementsByClassName(<span class="string">'jqCheckbox'</span>)[<span class="number">0</span>].click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果选中的全部抵消了，那么就手动加上一个</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = lis[i].getElementsByClassName(<span class="string">"jqChecked"</span>);</span><br><span class="line">        <span class="keyword">if</span> (element.length &gt; <span class="number">0</span>)</span><br><span class="line">            flag = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        lis[random_0].getElementsByClassName(<span class="string">'jqCheckbox'</span>)[<span class="number">0</span>].click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>填空题的内容从配置文件里找出，也采用随机填写。<br>先获取题目的 id，然后从<code>config</code>中找到对应的值，再随机选取一个值将其赋值到文本框里。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 填空</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blanks</span>(<span class="params">title, textarea</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前题目的id</span></span><br><span class="line">    <span class="keyword">var</span> id_text = title.getAttribute(<span class="string">"id"</span>);</span><br><span class="line">    <span class="keyword">var</span> re_id = <span class="regexp">/div(\d+)/</span>;</span><br><span class="line">    <span class="keyword">var</span> id = re_id.exec(id_text)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 遍历config里id值为id的answer</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; config.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == config[j].id) &#123;</span><br><span class="line">            textarea[<span class="number">0</span>].innerHTML = config[j].answer[random_num(config[j].answer.length)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重定向到 PC 版网页。<br>由于问卷星手机版的网页与 PC 版相差无几，因此使用正则表达式修改即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将手机版网页转为PC版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redirect</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> re = <span class="regexp">/(https:\/\/www\.wjx\.cn\/)(m|jq)(.*)g/</span></span><br><span class="line">        <span class="keyword">var</span> obj = re.exec(url);</span><br><span class="line">        <span class="keyword">if</span> (obj[<span class="number">2</span>] == <span class="string">'m'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"redirect now"</span>);</span><br><span class="line">            <span class="built_in">window</span>.location.href = obj[<span class="number">1</span>] + <span class="string">"jq"</span> + obj[<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"do......"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>由于填写完成并提交后会跳转到一个抽奖页面，此时的网址含有问卷页面的 id，因此可以将其抽取出来，重定向到问卷填写页面。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 完成填写重新打开填写界面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new_wxj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.location.href;</span><br><span class="line">    <span class="comment">//https://www.wjx.cn/wjx/join/complete.aspx?q=83481770&amp;JoinID=106588372552&amp;jidx=1&amp;s=&amp;njqj=1</span></span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/complete\.aspx\?q=(\d+)/</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = re.exec(url);</span><br><span class="line">    <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">"https://www.wjx.cn/jq/"</span> + obj[<span class="number">1</span>] + <span class="string">".aspx"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"no pat"</span>, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>完整代码<a href="https://github.com/jinl1874/Javascript" target="_blank" rel="noopener">在此</a>，<br>欢迎访问我的博客<a href="https://jinl1874.xyz">网站</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>寒蝉鸣泣之时-小说</title>
    <url>/2020/10/06/%E5%AF%92%E8%9D%89%E9%B8%A3%E6%B3%A3%E4%B9%8B%E6%97%B6/</url>
    <content><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>很久之前就听说过这个作品，前些天终于决定要看。本来是想直接看动画的，但是在知乎看到其动画的评价很低，并推荐去玩原作游戏。</p>
<a id="more"></a>

<p>于是我开启了寻找游戏的流程，去各大 Gal 网站都没找到资源，然后发现 steam 上有免费的鬼隐篇。但是发现仅支持日文以及英文。之后，我在本吧找到其汉化补丁。大概两三天的时间，就玩完了鬼隐篇。本来想在 steam 上买的，但是没找到汉化补丁。</p>
<p>然后我又在贴吧找到了游戏资源，但是萌化版的画质、分辨率都太低了。然后继续找资源，发现还有小说。</p>
<p>但是在老福特分享的小说都是 txt 文件，找了很久也没找到 EPUB 文件。所以就决定自己制作一份，毕竟对于我来说，没有排版的 TXT 文件是读不下去。<br>于是将其重新制作排版了一下（中间换了一个译本来源），我没找到本书的 epub 文件，于是就加了一些原作可能不存在的目录。</p>
<p>还有就是一些原译本扫描过程中带来的错，一个对话分段，也已经尽可能修复了。（大部分都集中在第二篇中，因为这里的译本是从其它地方拿来的</p>
<p>也就导致某些译名不一样，比如寒蝉会翻译成暮蝉）。推荐大家使用”多看阅读“来阅读，另外，排版就个人而言还是挺不错的，至少能看得下去。<br>最后就是，如果大家能接受小说的话，还是推荐大家去阅读一下的。</p>
<h3 id="制作过程"><a href="#制作过程" class="headerlink" title="制作过程"></a>制作过程</h3><p>寒蝉有解题篇以及出题篇。解题篇还是比出题篇长的，没找到书本的封面，然后只能找漫画的封面来填。里面还插了几张漫画内容或者其它卷的封面。</p>
<p>还有就是解题篇的目录实在是太难找了，在前面的目录是中文，但是在内容的标题却夹着日文，导致只能一个个对比加上。有的还找不到，只能靠感觉加上了，或许会有一些目录会出错吧。</p>
<p>不过年代这么久远了，已经找不到这些书的 epub 文件了，也算是给补上了吧。但是寒蝉有游戏、漫画以及动画的情况下，阅读小说的人是非常少的。</p>
<p>不过这也算是个人的偏执吧，小说只有文字，没有因年代留下的痕迹。而其动画以及游戏因年代过于久远，画质以及其它方面的制作都比较落后。现在就算看/玩的话，也很难看下去。</p>
<p>如果有什么遗憾的话，就是小说的译本都很差（个人感觉），如果有正版的就好了（虽然是不可能的）。而且文本里太多省略号了，无论是什么样的语气都加个省略号。在省略号后加标点符号、在文本开始前加，无处不在的省略号使我发狂，于是我删去了大量的省略号，仅有一些表示无语以及是真的省略的省略号。不过只有在解题篇删了。</p>
<p>重制版动画就要来了，期待新动画的表现。</p>
<h3 id="简评（有小部分剧透）"><a href="#简评（有小部分剧透）" class="headerlink" title="简评（有小部分剧透）"></a>简评（有小部分剧透）</h3><p>有时候，一部作品没有看完，他人的玩梗式评价会导致很多人误解这部作品，或者说造成误解才是正常的，毕竟这个故事很多都是由误会引起的。</p>
<p>《寒蝉》最出名的梗大概就是那句“蝉在叫，人坏掉”吧，还有各种论坛里时不时地来一句治愈番之类的话，再配上一张柴刀少女图，导致我对这部作品的印象是一部猎奇血腥动画。</p>
<p>看完出题篇以及解题篇后，猎奇血腥固然有，不过仅在《目明篇》有较多描写，其它篇章的杀人都算是比较“正常”的杀人。或者说是每个篇章的侧重点都不一样，都有不同的元素，猎奇仅仅是其中一种，而出题篇前三篇注重恐怖气氛的渲染，由圭一的第一视角来认识雏见泽，第四篇《暇溃篇》更像是一个小外传；后面解题篇则是各有各的风格，《目明篇》是比较血腥，而《罪灭篇》以及《皆杀篇》的气氛则是比较紧张刺激，各方势力在明争暗斗，但最后都逃不过“大灾难”。至于最后的《祭囃篇》，是比较欢快的，最后的决战像小孩子过家家一样（虽然一方的年龄确实不怎么大），治愈番也许就是从最后一篇来的吧。对我而则是比较无趣的，不过前面的鹰野的故事以及中间的碎片整理是挺有意思的，把事件的原貌基本都展现了出来。</p>
<p>总结一下，整部作品说的是一个误会的故事，这种误会有的是无意引起的，比如鬼隐篇里那个带“针”的饼，怜奈强大的推理能力导致圭一怀疑人生，以及最后的“针筒”恶作剧，还有《祟杀篇》里的圭一明明不现场，但是伙伴们却一口咬定圭一在绵流祭上，导致圭一开始怀疑人生，其中最大的误会是羽入时不时的灵异表现，这导致本来是正常发生的事，愣是加了一层不正常的面纱；有的是刻意造成的，比如圆崎家的祖训，魅音她们的隐瞒。单有误会其实还不算什么大事，但是这种误会遇到了一种病，叫雏见泽候群症，两者结合再加上第三方势力的插入（“东京”、沙都子的叔父、怜奈的“后妈”等）就会造成各个篇章里的悲剧。</p>
<p>要破解这个局，需要解开这些误会，来获得朋友的帮助。因为个人的力量是有限的，梨花在《皆杀篇》之前一直不相信自己的朋友，没有将事情告诉她们。在《皆杀篇》里看到圭一联合众人救了沙都子，于是开始相信朋友，将事情告诉了她们。但在最后因为之前错信了人，导致功亏一篑，自己也同样的死法死去。到了最后一章，由于羽入的帮忙，梨花众人团结一心，再加上 bug 一样的赤坂，成功拯救自己以及整个雏见泽。</p>
<p>我想整个故事想说的是，有困难要多和朋友沟通，多相信朋友，否则很容易出事。</p>
<p>转自我的知乎回答 <a href="https://www.zhihu.com/question/276855671/answer/1503964672" target="_blank" rel="noopener">https://www.zhihu.com/question/276855671/answer/1503964672</a></p>
<h3 id="文件地址"><a href="#文件地址" class="headerlink" title="文件地址"></a>文件地址</h3><p>Github 地址：<a href="https://github.com/jinl1874/e-book/，欢迎star。" target="_blank" rel="noopener">https://github.com/jinl1874/e-book/，欢迎star。</a></p>
<p>蓝奏云地址： <a href="https://wwa.lanzous.com/b0cqj1kti" target="_blank" rel="noopener">https://wwa.lanzous.com/b0cqj1kti</a> 密码:achq</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>使用多看的Dobby制作精美排版的epub电子书</title>
    <url>/2020/07/08/%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%9C%8B%E7%9A%84Dobby%E5%88%B6%E4%BD%9C%E7%B2%BE%E7%BE%8E%E6%8E%92%E7%89%88%E7%9A%84epub%E7%94%B5%E5%AD%90%E4%B9%A6/</url>
    <content><![CDATA[<h4 id="epub-是什么"><a href="#epub-是什么" class="headerlink" title="epub 是什么"></a>epub 是什么</h4><p>epub 是一种主流书本阅读格式，很多排版好的书本格式都是 epub。<br>epub 是一个压缩包，是类 html 文件、css 文件、配置文件以及字体图片等文件的集合。</p>
<h4 id="为什么使用多看的-Dobby"><a href="#为什么使用多看的-Dobby" class="headerlink" title="为什么使用多看的 Dobby"></a>为什么使用多看的 Dobby</h4><p>有很多软件可以制作 epub 电子书，比如常见的 sigil。dobby 是基于 sigil 开发的，预先设置了一些样式，比如可以制作多看特有的弹注、全屏封面以及一些文字样式与区域样式。<br>优点是操作简单，可以比较容易排版出一个比较精美的电子书，不涉及 html 代码的操作。<br>缺点是不能操作源代码，无法自定义样式，要实现使用这些功能，需要使用其它软件，如 sigil。<br>简单来说，就是简单。</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>以凉宫系列的第一卷《凉宫春日的忧郁》为例。此处下载下面所需的文件：<a href="https://wwa.lanzous.com/b0cqcwbsh" target="_blank" rel="noopener">https://wwa.lanzous.com/b0cqcwbsh</a> 密码:gatu</p>
<ol>
<li>电子书的 txt 文件</li>
<li>书自带的插图</li>
<li>要制作的书的 pdf 或 epub 文件，方便对照。</li>
<li>Dobby 软件<br>蓝奏云链接：<a href="https://wwa.lanzous.com/b0cqcw9da" target="_blank" rel="noopener">https://wwa.lanzous.com/b0cqcw9da</a> 密码:3dfi<br>github release：<a href="https://github.com/jinl1874/e-book/releases/tag/1.0" target="_blank" rel="noopener">https://github.com/jinl1874/e-book/releases/tag/1.0</a><br>下载压缩包后，解压到一个英文目录里，打开里面的<code>DobbyGUI.exe</code>即可使用。</li>
</ol>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><ol>
<li><p>打开 dooby -&gt; 文件 -&gt; 新建 -&gt; 选择小说模板 -&gt; 填写项目名称 -&gt; 点击确定，然后就会跳转到 dobby 首页。<br><img src="https://pic4.zhimg.com/80/v2-d8c6f8572f093f646b17d6f5bc051a19.png" alt="Image"></p>
</li>
<li><p>创建好的项目里面会有一些排版好 xhtml 文件，可以去熟悉一下样式的效果。</p>
</li>
</ol>
<h4 id="排版章节"><a href="#排版章节" class="headerlink" title="排版章节"></a>排版章节</h4><ol>
<li>先把除了<code>copyright.xhml</code>和<code>chapter.xhtml</code>的文件全删掉。</li>
<li>双击<code>chapter.xhml</code>文件，把凉宫的“序曲”文本粘贴上去，然后全选文本，在右边的段落样式里选择“正文宋体”。<br><img src="https://pic4.zhimg.com/80/v2-722f233c4c3c28cd09da5c5c6be04dad.png" alt="Image"></li>
<li>把光标移动到章节名（这里即序曲）那里，在右边选择标题样式，觉得哪个顺眼就选哪个。<br><img src="https://pic4.zhimg.com/80/v2-cd0bea3143d83fcc1515776456ee8a12.png" alt="Image"></li>
<li>检查一下整个章节，如有特殊的文本需要特殊的处理。比如：<ul>
<li>如果有注释的话，在右边的插件工具里找到多看注释，然后把光标移动要注释的词上，填上注释文本，再点击插入即可，记得把原来的注释文本删去；</li>
<li>若有一些信件、电报或者报纸之类的文本，可以选择把段落样式改为引文；</li>
<li>如果存在副章节点的话，可以将其放在章节名下一行，段落样式选择“扉章文字偏右”；</li>
<li>在后记里可以选择使用“引文楷体”。</li>
</ul>
</li>
<li>在左边的“图书浏览器”里右键<code>chapter.xhtml</code>文件，选择新建空白章节，项目会根据右键的文件名，来自动命名递增数字的文件名。比如这样项目就会创建一个<code>chapter1.xhtml</code>文件，如果是在<code>chapter1.xhtml</code>新建，那么创建的文件名就是<code>chapter2.xhtml</code>。</li>
<li>在新建的<code>chapter1.xhtml</code>文件粘贴上下一章的文本，再根据上面的流程走。</li>
<li>直到把所有的章节都排版完成。</li>
</ol>
<blockquote>
<p>记得每做好一个后要（ctrl+s）保存，不然崩溃的时候……</p>
</blockquote>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ol>
<li>添加图片：在左边的图片目录上右键，再点击添加已有文件，把下载好的图片全选上。</li>
<li>设置全屏封面：在文本目录上右键 -&gt; 新增全屏插图页 -&gt; 选择图片 -&gt; 确定。<br><img src="https://pic4.zhimg.com/80/v2-99c12d9c0dccdc51c79674ea8d714838.png" alt="Image"><br>再把这个文件放在顶部位置，并改名<code>cover.xhtml</code>。<br><img src="https://pic4.zhimg.com/80/v2-852940c660c569ecae27e795a88691d8.png" alt="Image"></li>
<li>彩页：新建一个文件，命名为<code>inset_0.xhtml</code>，在右边的插件工具里选择浮层图（可以点开查看大图），样式选择“无”。<br><img src="https://pic4.zhimg.com/80/v2-e2c4133184eed8b0cb41c0026db9043a.png" alt="Image"><br>对照着本书的 epub 文件，按照顺序一个个添加，如果添加不了，就再新建一个文件添加。<br>彩页的位置是在<code>copyright.xhtml</code>文件下面。</li>
<li>插图：同样是对照 epub 文件，按“ctrl+F”调出搜索框，然后搜索插附近的文字，找到插图所在的位置。选择“插件工具”的“随文图”，选择图片插入。<br><img src="https://pic4.zhimg.com/80/v2-031ffa185f2e5dc3de773ba1e810c192.png" alt="Image"><br>一般来说，一章只有一张插图，不过也有特殊的。相继把所有的插图都插入后，就可以进行下一环节————填写版权信息了。</li>
</ol>
<h4 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h4><ol>
<li>在<code>copyright.xhtml</code>文件写上本书的版权信息，包括但不限于作者、书名、译者、ISBN、校对、制作等信息，如果准备的 epub 文件里有，那就直接照抄；如果没有，最好上豆瓣查找，那里的信息比较全。</li>
<li>还可以加上一些免责任声明，比如“仅供个人学习交流，禁止商业用途。下载后请在 24 小时内删除，制作者不负任何责任。转载时，请注明以上信息，尊重翻译者的辛勤劳动。”这一类文本。</li>
<li>段落样式选择“版权信息正文”<br><img src="https://pic4.zhimg.com/80/v2-9ef0dbe75ea949cd989e8c080292b669.png" alt="Image"></li>
</ol>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>点击左下角的编辑目录，再选择“从标题生成目录”，一般这样就足够了。<br><img src="https://pic4.zhimg.com/80/v2-1a1310c09c903749ecf753529fd86ecd.png" alt="Image"><br>如果有需要添加或者编辑的目录，可以在目录条目那里右键，可选编辑/添加条目。</p>
<h4 id="元数据编辑"><a href="#元数据编辑" class="headerlink" title="元数据编辑"></a>元数据编辑</h4><ol>
<li>菜单栏 -&gt; 导出 -&gt; 编辑元数据 -&gt; 填上对应的信息（版权信息有相应的信息）。<br><img src="https://pic4.zhimg.com/80/v2-77389faf15c7701c4ff97ab577a14a6c.png" alt="Image"></li>
<li>添加基本：可以添加 ISBN、出版日期、简介等信息。<br><img src="https://pic4.zhimg.com/80/v2-377996b3e95c5e2923f73a605dede17a.png" alt="Image"></li>
<li>设置封面：一般是第一张全屏插画图。<br><img src="https://pic4.zhimg.com/80/v2-4d5ba7ed9449563271323dc5c141136d.png" alt="Image"></li>
<li>完成后点击“OK”。</li>
</ol>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><ol>
<li>到了这里，就可以发布 epub 电子书了。</li>
<li>菜单栏 -&gt; 导出 -&gt; 发布电子书。</li>
</ol>
<h4 id="阅读器"><a href="#阅读器" class="headerlink" title="阅读器"></a>阅读器</h4><p>要想获得最好的阅读体验，推荐下载“多看阅读”。</p>
<p>以上就是制作 epub 电子书的流程，里面还有更多的功能，可以慢慢去挖掘。</p>
<blockquote>
<p>欢迎访问个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>epub</tag>
        <tag>read</tag>
      </tags>
  </entry>
  <entry>
    <title>《夏日重现》：孤岛轮回故事</title>
    <url>/2020/08/19/%E6%BC%AB%E8%AF%84-%E3%80%8A%E5%A4%8F%E6%97%A5%E9%87%8D%E7%8E%B0%E3%80%8B/</url>
    <content><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-bb93bd931cf296761d456b59563a998f.jpg" alt="Image"><br>先下结论，就目前来看，是一部优秀的悬疑轮回漫画。</p>
<p>这是一部轮回悬疑漫画，就目前来讲，伏笔众多，回收合理，故事展开优秀。目前看到了一百多话，漫画有一个合理结尾不是太大问题。</p>
<p>故事发生一个小岛上，这也是常用的场景了，与隔绝的农村、小镇的作用一样，用来隔绝外界。并且这些地方都有一些不为人知的背后。比如在一些 18 禁的作品里，村里只有一男村长，其它的都是女性，就给外来的人提供了一个舞台。而本作是属于有一段神奇的过去，有几个神奇的人(或者应该叫妖？)，并一直影响到现在。</p>
<p>男主得知青梅竹马死去的消息，于是赶回小岛参加其葬礼。在船上做了一个有关死去的青梅竹马的梦，醒来后扑到一个女性的胸上……</p>
<p>参加葬礼后，主角发现澪被杀，接着又发现船上的女性也被杀。这时又出现了第二个澪，然后被其杀死，轮回开始……</p>
<p>去年发现这部漫画时只有四十多话，看第二遍时发现了很多剧情伏笔铺垫，作者大概已经想好整个故事了吧。</p>
<p>令我印象深刻的还是开头不久，澪来接男主的时候，没刹住自行车跌到海底时露出了内裤被男主看到。这个场景在日本漫画里比比皆是，本以为是单纯的卖肉，但没想到后面男主确定她的身份时用到了这个。</p>
<p>本漫画是一本悬疑漫画，在其基础上加入了轮回的设定，男主通过轮回来一点点地解开悬疑。并且作者也给男主的轮回添加了一些限制，每次轮回的时间都会向前走，让反派也可以继承轮回的记忆与数据。故事进行下去，越来越复杂，但是都有前面的铺垫一一对应。烂尾的可能性应该比较小，值得一看。</p>
<p>吐槽一下动漫之家上的译名，或者说根本没译，直接把英文名搬过来了，导致贴吧上只有寥寥几人。</p>
<p>目前连载在 jump + 平台上，漫画是优秀的，不知道未来有没有机会动画化。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>manga</tag>
      </tags>
  </entry>
  <entry>
    <title>网友见面会</title>
    <url>/2020/10/13/%E7%BD%91%E5%8F%8B%E8%A7%81%E9%9D%A2%E4%BC%9A/</url>
    <content><![CDATA[<p>多天以后，在面对学校的饭菜时，将会想起那天在吃西红柿炒鸡蛋时的遗憾。</p>
<a id="more"></a>

<p>10 月，为数不多在学校过的国庆。</p>
<p>想找个词形容，发现还是网友见面最合适，毕竟大家有同校的有不同校的，称呼也是靠网名称呼，不是鱼虾猫狗鼠等动物，就是瓜咖喱等植物，又或者是各种不知道是什么意义网名，比如风酷什么的，还有一些性别错乱的名字。大家不知道对面的名字（也许就只有我一个不知道，其实我是曾经知道的，但是确实也没必要去记，毕竟虾是虾，酷姐姐是酷姐姐就行了），总之，网友见面会是不会错的，毕竟大家都是从一个 Q 群开始，到现在还是在 Q 群里（其实也不能算是群里，毕竟微信一建一大群，真的很想吐槽微信的零成本建群。不过说到底，也有很多人不在群里，每年人暑假开始活跃，到国庆到慢慢冷下去，周而复始，正应了那句歌词——”位置变了，各有队友“。）。</p>
<p>扯太远了，扯回到当天。</p>
<h3 id="早点"><a href="#早点" class="headerlink" title="早点"></a>早点</h3><p>只记得那天早早地走校园，坐上地铁，最后来到传说中的南粤早点。</p>
<p>据说此处有南粤第一包和第二包（其实我是后面才听到的），但到了那时已经是饥肠辘辘，已无心第一第二包，只想喝粥。或者说是不想吃包吧，心里莫名地对面包有一种排斥感。又想到他们还有一段时间才到，于是就先点了。他们都先点了几个早点，然后给菜单给我。在那里翻了又翻，发现有一道叫什么豆腐的，想了想自己还挺喜欢吃豆腐的，于是就勾上了。</p>
<p><img src="http://image.jinl1874.xyz/img/IMG_20201003_101718.jpg" alt=""></p>
<p>但是我没想到的有两点，一是这里没有白饭，二是这个豆腐实在是太咸了，没有米饭的加持，实在是难以下咽。我实在是不知道为什么会有这么一个菜出现在这里，我也不知道为什么会这么咸，我唯一知道的是这个豆腐没几个人能吃得下……</p>
<p><img src="http://image.jinl1874.xyz/img/mmexport1601691280698.jpg" alt=""></p>
<p>点了大概有十几种早点吧，虽然是当午饭一起吃了。中间穿插了几波拍照风波，毕竟是个拍照狂，走路时还说要从下往上拍……可以理解可以理解。印象比较深的是那个虾蛟，不是有多好吃，虽然确实挺好吃，而是个人对香菜不太感冒，所以就第一个提出来了。（其实我挺好奇那个菜花是什么味道来着。）</p>
<p>还有那个”巧克力“，奶油味的巧克力，或者说到底是不是巧克力都不知道。就是下图左边那个萌萌的东西。</p>
<p><img src="http://image.jinl1874.xyz/img/mmexport1601694514160.jpg" alt=""></p>
<p>被众人怂恿地吃了一”脚“后：</p>
<p><img src="http://image.jinl1874.xyz/img/image-20201011003621598.png" alt="image-20201011003621598"></p>
<p>到底是不是巧克力的味道呢，其实我太久没吃巧克力，忘了具体的味道。不过确实吃出一股浓浓地不和谐味道——塑料制品的味道……</p>
<p><img src="http://image.jinl1874.xyz/img/mmexport1601866528382.jpg" alt="image-20201011010529126"></p>
<p>右边尽头那个是南粤第二包。</p>
<p>之后有两个小伙伴没来到，于是大家就打算把精美的点心以及南粤第一二包带去。南粤第二包已经说了，南粤第一包说是第一包其实也不算南粤第一包，毕竟也不是南粤做的，而是波仔从学校里的带出来的，说是第一包也没有错，毕竟这是第一个出场的，而第二包是第二个出场的。可惜的是到最后也没有人吃下这个第一包，毕竟两块钱一个肉馅呢。</p>
<h3 id="买菜"><a href="#买菜" class="headerlink" title="买菜"></a>买菜</h3><p>其中，那个娃娃机里面的鼠仔挺可爱的，可惜薯仔没能夹到。</p>
<p>分两波人，大概就是走走停停买买，毕竟有专业人士买，我只负责跟就行了。</p>
<h3 id="合宿"><a href="#合宿" class="headerlink" title="合宿"></a>合宿</h3><h4 id="KTV"><a href="#KTV" class="headerlink" title="KTV"></a>KTV</h4><p>三点未到，人已到，还好房东在场，得以顺利进去。</p>
<p>麻将、桌球、游戏机、智能电视、KTV 房以及厨房，麻雀虽小，五脏俱全。</p>
<p>各人找到自己的位置坐下，麻将四人组，还有街机二人组，麦霸二人组，PS4 游戏机。</p>
<p>我走进 KTV，理狗也在此处，唯独不见麦霸。在那里折腾一下，拿起了人生的第一个 KTV 麦克风（好吧，此处是夸张，其实以前唱过，但是由此发现自己唱歌实在太难听，就很少唱了，都是听麦霸唱），试过音，才发现这个 KTV 声音有点小，看来五脏全是全了，但未必够吃了。所以导致唱的时候需要很卖力地唱（不会发音的后果），不久之后就感觉出声困难了。在原唱的掩护下，也听不出我唱的声音了。所以我真的佩服，也感谢能唱个把小时的，能在晚上看恐怖片是给我一种甜甜的、安心的感觉。</p>
<p><img src="http://image.jinl1874.xyz/img/image-20201011015117546.png" alt="image-20201011015117546"></p>
<p>其后不久，大家陆陆续续来到。其中最大的惊讶是酷姐姐来了，其实在此之前就隐隐约约有这种感觉了，之前说在上海度假，但是偏偏买了机票回来。所以来也不会很奇怪，但实在是在群里装得太像了，以至于在 KTV 里看到时还有些略微地不相信，或许这就是惊喜吧。虽然长相已经忘得差不多了，但靠着能和鲤鱼拌嘴，以及仅存的一点身高印象还是认出来了。但为了避免认错人，还是谨慎地问了一句。</p>
<p>之后走出 KTV，发现猫在教薯仔以及瓜在玩 PS4，我其实想说一句，早上的时候，自己摸索着玩果然是不行的。</p>
<p>不久，小哥在群里说十分钟后到，没想到三十分钟过后还没见影子呢……来了就开始秀桌球技术，仅有风才能与之抗衡，像志斌姐、虾这些，只能眼睁睁地看着他一杆一杆地打进洞里。</p>
<h4 id="菜"><a href="#菜" class="headerlink" title="菜"></a>菜</h4><p><img src="http://image.jinl1874.xyz/img/mmexport1601728039014.jpg" alt=""></p>
<blockquote>
<p>西红柿炒鸡蛋就在右上角，虽然用盆装不太好看。</p>
</blockquote>
<p>走进厨房时，他们正在做饭，或者说是准备菜吧，因为有很大一部分是用来打火锅的。现在回想起来，当时我的帮忙是不是有点多余呢，毕竟……或许吧。</p>
<p>来到电视机前，想和鲤鱼来一盘久违的童年 FC 游戏，感叹一下爷青回，没想到读取不了。遂放弃，选择再打开电视，来看一下久违的《猫和老鼠》，毕竟也就这个能看。其实每到一个地方，我就喜欢用这个电视去看。</p>
<p>所谓的家常菜有六样，一是炒玉米黄瓜火腿粒，二是西红柿炒鸡蛋，三是可乐鸡翅，四是炒豆角，五是辣炒猪肉丁，六是水煮菜心。在制作过程中貌似出现了一点意外，因为火力过大的缘故，厨房里充满油烟，而且油烟机用不了，导致整个房间都弃满油烟，不得不关上门来，所以其实我也不知道具体发生了什么。最后端上来的豆角出现了黑化，一直想试下，但最后被吃光。一开始我在想为什么风哥这么有经验怎么还会出现这样的事，后来在群里无意间看到一张咖喱在炒豆角的图片，怪不得风哥后面吃黑化豆角时还点评了一句“还挺好吃的”。</p>
<p>还有西红柿炒鸡蛋，这是个人比较喜爱的一道菜，曾陪我走过一段段孤寂的时光。自己在家也做了好多次，但总是不得精髓，在一些地方总是差了许多，比如有时放得太多油了盖住了鸡蛋的香气，有时弄得太干了，有时搞得很多汁，总之没能做成一个满意的西红柿炒鸡蛋。而这次的做法第一个不同的地方就是把西红柿的皮削掉了，虽然我也没觉得皮有多好吃，但是从来没想过把皮削掉。然后就不知道，毕竟当时我也不在场。之后吃到成品时，确实是记忆中（雅食园）的味道，但又有不同之处，削了皮之后的西红柿更碎了，西红柿特有的酸味少了许多，并且与鸡蛋融合得更好了。而汁水也恰到好处，香味恰好处。可惜的是，缺少一份白米饭。西红柿炒鸡蛋在什么时候最好吃？是在西红柿炒鸡蛋与白米饭这对 CP 在一起时，没有米饭的西红柿炒鸡蛋就像缺了灵魂了，虽然好吃，但仅仅也只是好吃而己。当时最大的遗憾莫过于此。</p>
<p>顺道一讲，拍黄瓜挺好吃的。</p>
<p>晚饭由家常菜和火锅菜组成，内容大致都差不多，用当晚不知道是谁说的话来讲就是“有家的感觉”。</p>
<p>晚饭过后，来了一阵子轻松的桌球，师出咖喱、末尝一胜。</p>
<h4 id="恐怖片"><a href="#恐怖片" class="headerlink" title="恐怖片"></a>恐怖片</h4><p>之后就到了紧张刺激的看恐怖电影的时间，虽然一点也不紧张刺激。</p>
<p>一是片子，二是环境，三设备。</p>
<p>恐怖片是《死寂》，讲的是灵异人偶的故事。你说它恐怖吧，确实恐怖，但在观影过程确实没感到有多恐怖。可能血腥镜头较少，我可能没感受到危险，但最重要的原因入不了戏。入不了戏主要是因为环境的事，门时不时地开一下，旁边的酷姐姐森罗时不时大叫一下，波仔冷不防地来几句剧透，并且被理狗的体重压着。不过也能可能是沙雕网友在身边感觉比较有安全感吧。还有就是设备的问题，那个电影经常性地重复画面，大概是剪辑出错了。但这不是重点，重点是网络问题，也许不是网络问题，但是哪个问题都一样，就是一到关键时候，突然显示 <code>0B/s</code>，嗓子眼都要提起来了，但突然就卡住了。只能说观影体验极差。</p>
<p>又和理狗来了几次桌球，但无一不是完败。</p>
<h4 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h4><p>合宿的尾声，是一首生日歌，风哥的新历生日。说实话，我是挺佩服记住别人生日的，我连生日的那天到了都没感觉，也许是记不记住都没什么区别吧。最后惯例，合唱拍照一气呵成。不久因精力不足不得不去休息，其实我挺想知道那晚唱浮夸的是谁，唱得那么大声，隔着两层门都能听到……</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p><img src="http://image.jinl1874.xyz/img/1602567465205.jpg" alt=""></p>
<p>第二天去了个饭馆吃饭，这是后话，不提。</p>
<p>很多人都说了，这天最大的感受是开心，很幸福。</p>
<p>我也是这样，从内到外的开心，没什么拘束，彼此认识又不认识，熟悉又不熟悉，也许这是最好的相处吧。</p>
<p>期待下一次见面，下次打球肯定赢理狗。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>悠哉日常大王-不能说的秘密</title>
    <url>/2020/10/15/%E6%82%A0%E5%93%89%E6%97%A5%E5%B8%B8%E5%A4%A7%E7%8E%8B-%E4%B8%8D%E8%83%BD%E8%AF%B4%E7%9A%84%E7%A7%98%E5%AF%86/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/jinl1874/image/master/%E6%A0%BC%E5%8A%A0%E5%B0%94%E5%BE%B7%E4%BF%AE%E9%81%93%E9%99%A2%EF%BC%8C%E4%BA%9A%E7%BE%8E%E5%B0%BC%E4%BA%9A.jpg" alt=""></p>
<p>多年以后，面对升学考试时，越谷卓将会想起第一次备考时的紧张。</p>
<p>旭东分校是个乡下的学校，已经有一百多期了，但由于日本少子化，导致整个学校在很长时间里仅有几个学校在学校上课，老师也只有一个。加上今年萤的转入学校，学校目前仅有五人，两个是越谷卓的妹妹，一个是新入学的莲华。老师是莲华的姐姐一穗，非常喜欢睡觉，但毕竟在这种学校里只能靠自学，老师也管不了这么多，越谷卓深深明白这一点。</p>
<p>越谷卓的目标是市内的一所高中，前辈也是邻居的木实在那里读高三，这也是本地人经常去的高中，像光华那样去东京读书的反而是少数。虽说不是什么名校，但不也是随便就能进的，还是要一点成绩的。</p>
<p>时间似乎过得快，三个学期很快就要过去了。还剩一周就要考试了，虽然知道没什么难度，但越谷卓的心总是难免紧张。越谷卓望向窗外，四个少女还是一直说说笑笑，在玩一个不知道是什么的游戏。越谷卓真的挺羡慕她们的，什么时候都能玩得很开心，什么时候都很悠哉。</p>
<p>晚上，越谷卓睡着的时候，像是做了一个梦，梦见自己仿佛飘在空中，傍边的景物在飞速向后跑去。速度越来越快，直到越谷卓的大脑跟不上转速，逐渐头晕。突然，越谷卓睁开眼睛，坐起来，打开吊灯，并调到灰暗。转头看了一圈，发现还是在自己的房间，但总有一股说不出来的异样。卓摇了摇头，是自己太紧张了吗？随即关掉灯，躺下继续睡觉。</p>
<p>清早，卓的母亲越谷雪子过来叫他起床，离去时还嘟囔着“怎么连哥哥也睡懒觉了”。卓望着妈妈的背影，不知怎么的想起了自己的父亲，一直都是妈妈在照顾他们三兄妹，一年下来都没看过他出现一次，是忘了这个家吗？卓抛开这些念头，起床刷牙洗脸，吃了妈妈准备的早饭后，找到自己的自行车，准备骑车去上学校。突然，他发现自行车有点新，或者说是没有那么旧了，是妈妈重新帮他清洗了一遍吗？但就算清洗了也不会这样啊，里面的很多磨损的痕迹都消失了。卓没有深思，骑着自行车去上学了。在学校的日子已经不多了，想到即将要离去，卓还是有点舍不得。</p>
<p><img src="http://image.jinl1874.xyz/img/20201015114331.png" alt=""></p>
<p>“今天的教室和昨天有些不一样。”莲华双手托腮露出沉思状的表情说道。</p>
<p>夏海有点疑惑：“哪里？”</p>
<p>虽然卓知道她总是发表一些奇奇怪怪的话，但是卓也感觉教室有点奇怪，萤的桌子是空的。一般来说，迟到的只有夏海以及整天睡觉的老师，但是萤迟到倒是有点不可思议，是出什么事了吗？卓正在想着时，老师拉开门，打了声招呼，带着萤进来了。沉默了一阵后，老师叫萤做自我介绍。萤拿起粉笔在黑板上写上自己的名字“一条萤”，随后介绍了下自己的情况，和底下两姐妹开始一问一答起来。莲华则突然起身，抬起手，面无表情地说了一句“喵帕斯”。而一旁的卓被震惊地说不出话，身体直直地定在那里……</p>
<p>整个早上，卓都在想到底是怎么回事。是她们在搞恶作剧吗，等我信以为真后再掏出个“整人大成功”的牌子吗？还是自己的记忆错乱，知道了未来的事？还是在做梦？又或者之前的都是梦，现在才是真实的？紧接着，他又想起了他的自行车，想起了今天的天气没有那么凉了，明明昨天晚上还是要盖被子睡觉，还有早上的那门牌上没有“+小 5”，又想起昨晚的梦，再检查一下自己的书，明明已经做完的练习册，而现在却变得干干净净，种种迹象让卓怀疑自己是不是回到一年前了。</p>
<p>下课铃响后，卓漫无目的地走在走廊上，他还没从整件事的震惊走出来。前面的夏海拿着球，准备和新来的萤去玩躲避球。走着走着，卓踩在因潮湿而腐烂的木板上，掉进了坑里。卓似乎听到远处的夏海在说至今没有哪个笨蛋会掉下去的，但他已无力再从坑里爬起。路过的老师见到他掉到坑时，才赶紧拉他上来。</p>
<p>卓下意识地整理了一下自己的衣服，问:“今天是几年几号？”<br>老师懒懒地答道:“2013 年 4 月 13 号，怎么了？”<br>4 月 13 号，昨天明明才刚过三月，果然是时间变了吗。想到此处，卓再次向老师发问：“老师，我说我有可能会从未来穿越过来的，不对，是时间从 2014 年变成了 2013 年，你会觉得怎么样？”<br>老师再次发出庸懒的声音:“什么啊，你是不是摔坏脑袋了，快点回教室吧！”<br>卓知道这个整天睡觉的老师是完不全可靠的，于是什么也没说，默默地走回教室。</p>
<p>放学后，卓匆匆地踩着自行车回家。回家后，他立马找到日历，发现日历上显示的 4 月 13 号。心中的最后一丝希望破灭，卓瘫倒在地上。<br>那一天，小鞠和夏海比平时更晚回来。<br>卓本来想和母亲谈及这件事，但一想到母亲整天操劳，父亲又长时间不在家，夏海也整天上房揭瓦，每天早起给三兄妹做完早饭就要去工作了，就打算不想再给母亲增添烦恼了。经过整晚的思考斗争，卓下了一个决定，决定看看这个 2013 和上个 2013 有什么区别，来知道自己是不是真的回到过去，时间是不是真的变了，自己现在到底在哪。自此，卓在此后一年基本都没说过什么话，但是去年发生的事在默默改变今年的他。</p>
<p>周五，远足的那天，说是远足，但卓知道是老师带她们来插秧，也知道后来老师有机器可以插秧，就没有像去年那样下去插秧。他来到夏海旁，想听听她发的牢骚。但没想熊孩子上头的夏海把他做成一个稻草人。<br>周末傍晚，卓回到家时，发现家里什么人都没有，才想起“去年今天”夏海和小鞠离家出走了。他又想起小时候夏海和小鞠也曾离家出走过，最后在那条小道上他和妈妈找到她俩。想到此时，卓不由得露出一丝苦笑。他知道她们的秘密基本在哪里，于是他骑着自行车去找她们了。还是在那条路上，他又发现了她们。什么话也没有说，他让她俩坐上自行车，自己则推着车回家。<br>那一晚，夏海似乎睡得特别晚，第二天睡过头了没去学校 。</p>
<p>暑假那天从海边回来，卓曾经和老师一样，没有上车，但是这一次已经提前准备好在车上了。</p>
<p>还有那天，萤在村子里迷路了，事后她带他们来到迷路的地方。于是那天他来到，果然在附近被她的狗发现了。</p>
<p>还有很多很多，起初卓只是想知道这一年和去年的差别，但最后却只是因为无聊，或者说是孤独。</p>
<p>直到那一天的再次到来。</p>
<p>在漫长的重复时间里，卓开始学习各种各样的技能。以前的他只会弹钢琴，在开学那天负责弹校歌的伴奏。后来他开始学习吉他、练习跑步、制作手办、用竹子编制家具，甚至连弹尺子也练得炉火纯青。</p>
<p>卓独自坐在房间，喃喃道：“这是第三年了吧！“</p>
<p>卓被困在这一年已经三次了，有时他也想像妹妹她们那样什么都不知道，可以无优无虑地玩耍。最近她们似乎又交了上个新朋友，是邻剧木实的学妹，”去年“她们还不认识来着，没想到今年居然经常来玩。是哪里出现分岔点了，卓已经无力追究，他只想跨过这一年，开启自己崭新的生活，或者说回到原来的生活。</p>
<p>冥想之际，越谷雪子过来叫卓去帮忙做艾蒿饼，因为那四个少女带着艾蒿回来。</p>
<p>小鞠和萤端着做好的艾蒿饼出来给莲华和夏海吃。突然，萤愣了一下。</p>
<p>”怎么了？“旁边的小鞠问。</p>
<p>”没什么，“萤说，”来这里都快一年了，没去的地方还有好多啊……“</p>
<p>此后，完。</p>
]]></content>
      <categories>
        <category>动漫</category>
      </categories>
      <tags>
        <tag>manga</tag>
        <tag>脑洞</tag>
      </tags>
  </entry>
  <entry>
    <title>百年孤独全人物</title>
    <url>/2020/10/09/%E7%99%BE%E5%B9%B4%E5%AD%A4%E7%8B%AC%E5%85%A8%E4%BA%BA%E7%89%A9/</url>
    <content><![CDATA[<h3 id="人物表"><a href="#人物表" class="headerlink" title="人物表"></a>人物表</h3><ul>
<li>奥雷里亚诺·布恩迪亚上校：开头面对行刑队的人，最后在家中死去。</li>
</ul>
<a id="more"></a>

<ul>
<li>梅尔基亚德斯：身形肥大的吉卜赛人，一位炼金术师以及航海家，经常拿新奇的东西来马孔多，最后在新加坡的沙洲上死于热病，被丢到了爪哇海的最深处。但又重返人世，拯救了陷入失眠症的马孔多，最后死在马孔多。</li>
<li>何塞·阿尔卡蒂奥·布恩迪亚：马孔多的族长，爱研究一些稀奇古怪的东西，上校的父亲。拥有传奇的一生，最后死在马孔多。</li>
<li>何塞·阿尔卡蒂奥：上校的哥哥，貌似他们家喜欢用一样的名字，一开始我把哥哥和父亲混为同一个人了。长大后与庇拉尔·特尔内拉发生肉体关系，但是由于庇拉尔告知其怀孕后，开始逃避她。后来与吉卜赛女朗发生关系，并与其离开马孔多。在蕾梅黛丝死后回来，与丽贝卡发生关系，并结为夫妇，被乌尔苏拉逐出家门。最后在家中被枪杀。</li>
<li>乌尔苏拉·伊瓜兰：何塞的妻子，寻找大儿子途中发现走得太远了，索性不再回头（当时我看到这里是极其懵逼的，这样就走了……）。直到五个月后才回来，并带来大沼泽另一边的人。那场四年的大雨过后，开始清除家里各种虫子，不久后死去，年龄在一百一十五到一百二十五里。</li>
<li>弗朗西斯·德雷克：袭击里奥阿查的海盗，乌尔苏拉的曾祖母因其受到烫伤。并由此，乌尔苏拉的曾祖父与何塞·阿尔卡蒂奥·布恩迪亚的的曾祖父合作经营。这是为了促进他们之间联系而有的战斗。</li>
<li>普鲁邓希奥·阿基拉尔：何塞的斗鸡对手，输了之后用鸡内涵何塞。而何塞与其决斗，最后被何塞用长矛刺死，何塞也由此于乌尔苏拉行夫妻之事。但最后何塞夫妻因良心烦扰（经常看到死去的他的出现）而决定离开原本的里奥阿查。在其死后经常去马孔多与已经发疯何塞谈话，最后拉何塞到另一个世界去。</li>
<li>庇拉尔·特尔内拉：十四岁时强暴她的男人，因为外来户的关系直到二十二岁也没公开关系，被家人强迫离开来到马孔多。想一直等他，但已经厌倦了等待，于是转去勾引何塞·阿尔卡蒂奥（上校的哥哥），或者说与其发生肉体关系。告诉何塞·阿尔卡蒂奥怀孕的消息后不久，何塞·阿尔卡蒂奥同样走了。之后，她又与上校发生关系并生下一儿子。指导奥雷里亚诺后，在一个欢宴的夜晚中死在藤摇椅上。</li>
<li>阿玛兰妲：何塞·阿尔卡蒂奥·布恩迪亚新出生的女儿，上校的妹妹，爱上了丽贝卡爱的男人，并阻止他们结婚，不幸下手毒死蕾梅黛丝。丽贝卡与何塞·阿尔卡蒂奥结婚后，阿玛兰妲与皮埃特罗相恋，但拒绝与其结婚。之后又与赫里内勒多·马尔克斯相恋，仍拒绝与其结婚。最后以一个老处女的身份在家死去。</li>
<li>何塞·阿尔卡蒂奥：庇拉尔·特尔内拉与何塞·阿尔卡蒂奥的儿子，继承了何塞·阿尔卡蒂奥的名字，避免混淆，只叫阿尔卡蒂奥。长大后过于疯狂，面对保守派时执意抵抗，投降后被判处枪决。</li>
<li>比西塔西翁：瓜希拉印第安人，为逃避部落的失眠症，放弃王位与弟弟来到此处，也是众多孩子的保姆。最后在马孔多安详离去。</li>
<li>卡塔乌雷：比西塔西翁的弟弟，发现丽贝卡有其祖国的失眠症后，逃离马孔多。何塞·阿尔卡蒂奥·布恩迪亚死的那天回到马孔多，是为了“王的下葬”。</li>
<li>丽贝卡·布恩迪亚：从马纳乌雷来马孔多投奔，是乌尔苏拉的远房表妹、何塞·阿尔卡蒂奥·布恩迪亚的亲人，尼卡诺尔·乌略亚和丽贝卡·蒙铁尔的女儿。因为对所有名字都没反应，所以就使用她母亲的名字作为其名字，姓是后来加上的。一到爱情烦恼的时候就爱吃土，并且容易出事。先是与皮埃特罗相爱订婚，但何塞·阿尔卡蒂奥回来后瞬间就抛弃了皮埃特罗，并与其结婚。何塞·阿尔卡蒂奥死后，将自己封闭起来，被镇人的人遗忘。最后在乌尔苏拉死的那年年底死去。</li>
<li>好汉弗朗西斯科：两百岁的江湖艺人，常带来各地见闻。</li>
<li>堂阿波利纳尔·摩斯科特：里正，政府人员，地方官 。</li>
<li>安帕萝·摩斯科特：堂阿波利纳尔的女儿。</li>
<li>蕾梅黛丝·摩斯科特：堂阿波利纳尔九岁的小女儿，被上校看上。后来过了青春后成为了上校的妻子，但在皮埃特罗与丽贝卡婚礼前的一星期里被阿玛兰妲下毒，导致内脏撕裂，三天后被自己的血毒死，双胞胎也胎死腹中。</li>
<li>皮埃特罗·克雷斯皮：意大利技师，负责安装和调试自动钢琴，与丽贝卡订婚，但阿玛兰妲亦喜欢他，百般阻挠其婚礼。最后他与阿玛兰妲相恋，但是阿玛兰妲拒绝与其结婚，绝望之下割腕自杀。</li>
<li>马格尼菲科·比斯马勒：上校最亲密的好友，建村元老的儿子，名字与其父亲相同。最后死在马孔多的暴徒手里。</li>
<li>赫里内勒多·马尔克斯：上校最亲密的好友，建村元老的儿子，名字与其父亲相同。喜欢阿玛兰妲，但阿玛兰妲一直不肯与其结婚，被拒绝后发给上校一个电报“马孔多在下雨”。曾被俘，但是上校用战俘救他出来。晚年时拒绝了上校重新发起战争的请求，最后在那场四年多的大雨中死去。</li>
<li>尼卡诺尔·雷伊纳：主持婚礼的神甫。</li>
<li>奥雷里亚诺·何塞：奥雷里亚诺和庇拉尔·特尔内拉的儿子，长大后爱上自己的姑妈阿玛兰妲，想与其发生关系，但被拒绝。之后成为了一个浪荡人士，最后被阿基莱斯·里卡多上尉开枪打死。</li>
<li>阿利黎奥·诺格拉：表面上是马孔多医生，实际上是自由党狂热人士。</li>
<li>维多利奥·梅迪纳：上校投奔的革命军将领。</li>
<li>桑塔索菲亚·德拉·彼达：阿尔卡蒂奥的情人。晚年时试图拯救被各种虫子侵蚀的家，但是失败了。最后离开了这个家。</li>
<li>格雷戈·史蒂文森上校：受奥雷里亚诺之托向阿尔卡蒂奥报信，但阿尔卡蒂奥并不相信他，将其关押起来。最后保守派攻打马孔多时被放出来一起作战，被大炮轰死。</li>
<li>罗格·卡尔尼塞罗：执行枪决奥雷里亚诺·布恩迪亚的上尉军官，但枪决被何塞·阿尔卡蒂奥阻止，叛变到奥雷里亚诺阵营。</li>
<li>蕾梅黛丝：桑塔索菲亚·德拉·彼达与阿尔卡蒂奥的长女，被称为美 人儿蕾梅黛。最后连带着床单飞上天。·</li>
<li>何塞·阿尔卡蒂奥第二：桑塔索菲亚·德拉·彼达与阿尔卡蒂奥的双胞胎儿子之一。长大后成为工会领导人，但是在一次活动中发生一个大屠杀，此后除他之外，领导人被官方全部杀死，官方宣传没发生任何事。他自己被一个年轻的军官放过。最后在梅尔基亚德斯的房间里与其孪生兄弟交谈中死去。</li>
<li>奥雷里亚诺第二：桑塔索菲亚·德拉·彼达与阿尔卡蒂奥的双胞胎儿子之一。孪生兄弟死后不久，他也在妻子旁死去。在最后下葬时弄混了，把两人葬在各自的坟墓里。又或者是，这才是正确的坟墓呢。</li>
<li>何塞·拉克尔·蒙卡达：保守党将军，战后马孔多的第一任市长。上校攻打马孔多时想逃走，但被捕了。最后判处死刑。</li>
<li>奥雷里亚诺：上校的十七个儿子的名都是这样，姓随其母亲，后来被一一暗杀。</li>
<li>阿基莱斯·里卡多：马孔多驻军首领，掌握马孔多的市政大权。开枪打奥雷里亚诺·何塞时，被两发来源不明的子弹打死。</li>
<li>费尔南达·德尔·卡皮奥：奥雷里亚诺第二的妻子，外来的女王，马达加斯 加女王。最后她穿着她的女王衣服在床上死去。</li>
<li>佩特拉·科特斯：曾与双胞胎一起睡觉的女人，后来成为奥雷里诺第二的情人。奥雷里亚诺第二因不满妻子的各种规矩以及所做之事，经常到她家里住。</li>
<li>何塞·阿尔卡蒂奥：费尔南达·德尔·卡皮奥与奥雷里亚诺第二的长子。从小就被期望成为教皇，但是到罗马后就立即放弃了神学。费尔南达死后回到马孔多，发现了那些金币。最后，他在沐浴时，被他赶出去的四个孩子按死在水池里，连金币也被掳走。</li>
<li>雷纳塔·蕾梅黛丝：费尔南达·德尔·卡皮奥与奥雷里亚诺第二的第一个女儿，昵称是梅梅。男友出事后终生一言不发，被母亲带到一个修道院，最后在克拉科夫一家阴森的医院衰老而死。</li>
<li>奥雷里亚诺·特里斯特：黑白混血儿，上校的十七个儿子之一。曾到马孔多生活，最后被猎杀。</li>
<li>奥雷里亚诺·森特诺：上校的十七个儿子之一。同样被猎杀。</li>
<li>卡米拉·萨迦丝杜梅：以“母象”（即能吃）的美名享誉全球。在马孔多曾和奥雷里亚诺第二来过一场大胃王比赛。</li>
<li>阿玛兰妲·乌尔苏拉：费尔南达·德尔·卡皮奥与奥雷里亚诺第二的第二个女儿。成年后带着丈夫回到马孔多，改变这个已经被虫蚁腐蚀得破旧无比的家。丈夫走后，与奥雷里亚诺过上了情欲泛滥的生活，造成的破坏却比虫蚁更大。不久家中也处于家居密林的深处，等到加泰罗尼亚智者最后的信到来后，他们已经与外界脱离一联系。生下一个有猪尾巴的儿子之后，因失血过多而死去。</li>
<li>马乌里肖·巴比伦：梅梅的男朋友。潜入梅梅家中，正揭开屋瓦钻进浴室时，被守夜人当作偷鸡贼一枪放倒，此后卧床不起，孤独终老而死。</li>
<li>奥雷里亚诺：梅梅与马乌里肖·马比伦的儿子，前三年一直被费尔南达关在上校的作坊里。长大后爱上了自己的姑姑阿玛兰妲·乌尔苏拉，受到庇拉尔的指导，没有像奥雷里亚诺·何塞一样听从姑姑的话离开，而是强行地与其发生关系 。加斯通走后，便与姑姑过上了纵欲的生活。姑姑和儿子死了之后，发现梅尔基亚德的羊皮卷记载着百年来他们家族所有的事，他也从其中找到了自己的身世。还没翻到自己的死期时，就明白自己不会走出这个房间以及整个家族的所有一世都从世人的记忆中抹去。</li>
<li>洛化索·加比兰：墨西哥革命中的上校，流亡到马孔多。与何塞·阿尔卡蒂奥第二成为地下工会的领导人。最后被政府抹杀。</li>
<li>奥雷里亚诺·阿玛多：上校十七个儿子里唯一的幸存者，在晚年时来到马孔多，被奥雷里亚诺以及何塞·阿尔卡蒂奥拒绝进屋，随后被多年来追踪的警察射穿他的前额的灰烬十字。</li>
<li>加斯通：阿玛兰妲·乌尔苏拉四十多岁的丈夫。来到马孔多后计划建造一个飞机场，或者其目的是为了让阿玛兰妲·乌尔苏拉厌倦在这里的生活。但自己却厌倦了苦苦等待的飞机，回到了布鲁塞尔。之后表明要回来时，阿玛兰妲·乌尔共拉挑明了话题，而他也顺水推舟地祝他们幸福。</li>
<li>尼格罗曼妲：奥雷里亚诺的朋友的曾孙女，亦是一个妓女。后来奥雷里亚诺因阿玛兰妲·乌尔苏拉产生了相思之情，想缓解这种感情，来找她睡觉，不久便与她成为情人。</li>
<li>阿尔瓦罗、赫尔曼、阿尔丰索和加夫列尔：因争吵中世纪是如何杀来蟑螂而与奥雷里亚诺成为最初也是最后的朋友。阿尔瓦罗、赫尔曼和阿尔丰索相继离去马孔多，加夫列尔赢了大奖后也去了巴黎。</li>
<li>罗德里戈/奥雷里亚诺：阿玛兰妲·乌尔苏拉与奥雷里亚诺的儿子，生下来有一条猪尾巴。母亲取名为罗德里戈，父亲取名为奥雷里亚诺。但奥雷里亚诺因失去了阿玛兰妲·乌尔苏拉的悲痛，没有管他，导致他被蚂蚁吃掉。</li>
</ul>
<h3 id="地名"><a href="#地名" class="headerlink" title="地名"></a>地名</h3><ul>
<li>马孔多：一个小村落 ；</li>
<li>里奥阿查：马孔多向东山脉一侧的古老城市；</li>
</ul>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>网友游玩会</title>
    <url>/2020/10/27/%E7%BD%91%E5%8F%8B%E6%B8%B8%E7%8E%A9%E4%BC%9A/</url>
    <content><![CDATA[<p><img src="http://image.jinl1874.xyz/img/20201027223503.jpg" alt="田里的拖拉机和装载着卷心菜的拖车，奥地利圣珀尔滕"></p>
<p>下午等虾的那三十分钟，是一整天等待的开始。</p>
<a id="more"></a>

<p>什么是夜场？几天前我的回答应该是类似一个酒吧喝酒的地方。后来查了一下”夜场“的定义——夜场，指夜晚时娱乐、休闲、放松的娱乐场所，包括酒吧、KTV、歌舞厅、夜总会、会所、夜店等。此类场所为客人提供酒水、食品、空间、设施设备等，以满足客人吃、喝、玩、乐、放松等需求。多存在于城市和城镇中。所以说，只要是在夜晚玩的场所，都可以叫夜场。</p>
<p>几天前，咖喱问我要不要一起去玩，当时手头吃紧(现在更紧)，所以就拒绝了。不久之后，我问她有谁没去的时候，她给我下了个套。她也说出下了个套，但是当时也没细想，因为被这个套打乱了思维。当时是这样，我先问有没有谁去，她把其它人说了一遍，然后我问剩下的，接着她说了一句绕了一圈是想问她，当时着实我吓到了，还说喜欢什么不是什么大事，我只能说喜欢什么不是大事，但是喜欢她是真的大事。</p>
<p>周一凌晨，咖喱再次问我要不要去，我想了十几分钟，说那就去吧。</p>
<h2 id="柚子的诱惑"><a href="#柚子的诱惑" class="headerlink" title="柚子的诱惑"></a>柚子的诱惑</h2><p>周一下午两点二十多分，我来到北门，虾说了三十分钟北门见。没想今天的第一个等待来得这么快，我在门外来回蹦哒了将近三十分钟，两点四十八点虾才姗姗来迟，手里还拿着个柚子。当时我真的想像波仔说的那样，把那个柚子爆扣在他头上。</p>
<p>接着她说明了缘由，是快递点拿柚子，然后又把柚子带回宿舍，最后手捧着一个出来。虽然可以原谅，但竟然连说都不说一声，不对，是只跟瓜和风哥说了，真的太过分了。</p>
<p><img src="http://image.jinl1874.xyz/img/20201027134844.png" alt=""></p>
<blockquote>
<p>孤独的柚子</p>
</blockquote>
<h2 id="柚子的味道"><a href="#柚子的味道" class="headerlink" title="柚子的味道"></a>柚子的味道</h2><p>三点多，在地铁站和波仔逸浩会合后来到了目的地。然后开启了第二轮的等待。咖喱没到、猫猫没到、水哥没到，总之就是等待。</p>
<p>等待的期间，先把柚子破膛开胸，取出红心，再剥开白皮，再轻咬一口：</p>
<p><img src="http://image.jinl1874.xyz/img/20201027140556.jpg" alt="img"></p>
<blockquote>
<p>这是酸酸的味道</p>
</blockquote>
<p><img src="http://image.jinl1874.xyz/img/20201027140637.jpg" alt="img"></p>
<blockquote>
<p>这是甜甜的味道</p>
</blockquote>
<p>挖掉心的柚子，只剩下一个锅壳，先后戴在波仔和风哥头上后，就失去它最后的用处，将躺在阴暗的垃圾桶里度过它的余生。</p>
<p>等待的过程中，我观察着不远处的过山车，这辆车时不时地载着几排乘客，一次次伴随着乘客的尖叫声，从顶处垂直飞奔下来，最后再溅起一排水花扬长而去。当时的我，还觉得这个最高处还有点低，尖叫声是大家享受过山车发来的声音。</p>
<p><img src="http://image.jinl1874.xyz/img/20201027141627.jpg" alt="img"></p>
<p>咖喱因为出了点事，来得时候是有点迟了，然后大家就去化了个万圣节妆。说是化妆，其实只是把某个图案涂上脸，毕竟是免费的。</p>
<p>来的时候我就发现了，不对是感觉到，咖喱穿的那条牛仔裤导致人看起来有点大。但其实我知道咖喱是不胖的，只是脸有点圆而己。于是就想着捉弄她一下，说了句咖喱穿这件衣服看起来有点胖……</p>
<p>后来在等待过车山时低头弯腰向咖喱道歉的时候，我明白了这种事是断断开不得玩笑的。</p>
<h2 id="过山车之恐"><a href="#过山车之恐" class="headerlink" title="过山车之恐"></a>过山车之恐</h2><p>上完课的猫猫来了，水哥也到了但不知道什么时候又不见了。</p>
<p>第一个要玩的项目当然是过山车，毕竟看起来就很爽，当时我确实是这么想的，也许虾他们玩过的也是这样认为的。</p>
<p>开始排队时已经五点了。</p>
<p>又是一个小时的等待，走走停停站站坐坐。虾时不时地发神经，瓜时不时地拍照（不得不说，女生的拍照能力是真的强，之前还是错怪虾子了），不过等待时说说笑笑，倒也不无聊。快到的时候玩了一个”谁是卧底“的小游戏，没有经验的我第一轮就被揪出来，毕竟对面唐老鸭，只我和波仔是米奇，而我的第一个词就是老薯。</p>
<p>六点多，终于等到，坐之前有多兴奋，之后就有多害怕。因为一些小原因，我和虾、逸浩坐同一排，其它人在前一排。启动之前，虾一直说要在第一排才有意思，才够爽，还 一直向前面的风哥喊话，不过启动之后，一开始还觉得可以，直到车在逐渐向上爬，速度逐渐慢下来，我似乎感到一丝丝不妙 。</p>
<p>接着车子在顶点停住，再向前一点再停住，前面传来一阵阵尖叫。第三次停顿时，我顿时了明白他们为什么会尖叫。身体仿佛悬在空中，夜色笼照了大地，底下的景物仍清晰可见。那一刻，我以为自己会掉下去，不，我相信自己不会掉下去，但是大脑让我以为会掉下去。这一刻，我终于想起了曾经被梦境中跳楼和高处支配的恐惧，但每次跳楼后我都会醒过来，而这次似乎是现实。那时才想起原来我是有恐高症来着，我给忘了，不对，是我在写文章的时候才想起来的。</p>
<p>下一刻，车掉了下去，这次身体是真的浮起来了，这或许就是失重的感觉吧。这时感受到的不是飞翔的自由，而是身体由内而外发出的生理性恐惧，高空和从高空掉下去的恐惧。实际的感觉也是是掉下去的感觉，喉咙似乎也发出了喊叫声。那时手在用力握着把手，但是我似乎用错了劲，这个东西应该是让我们把身体贴紧在椅子上，但我仅仅只是手贴在把手上，身体随着车上下浮动……</p>
<p>车子只走了一圈，但由于有两个高点，所以我又重复了一遍上面的流程，最后车滑过水面，溅起水花，回到起点。下车的时候，腿变得有点软，也许是排了一个多小时的队，再加上这次刺激导致的吧。虾还在旁边念念叨叨地，坐第三排没感觉，还是第一排才有感觉。现在回想起来，如果真的是第一排的话，我可能真的受不了了吧。<br>排一个多小时换两这次两分钟的体验值不值？当然值，但问我要不要再来一次，肯定是不会再来了。</p>
<p>这应该是我最后一次过山车了吧，那时我是这样想的，并且以为这是今天最后一次体验这种恐惧。</p>
<h2 id="异次孤岛"><a href="#异次孤岛" class="headerlink" title="异次孤岛"></a>异次孤岛</h2><p>坐完过山车，就要去鬼屋舒缓一下心情了。</p>
<p><img src="http://image.jinl1874.xyz/img/20201027213746.png" alt="image-20201027213743047"></p>
<p>这次的等待没有上次那么长，不到十分钟。倒是坐完过山车也面不改色的咖喱，听到要去鬼屋则变成一个受到惊吓的小鸟，紧紧地依偎着，果然人与人的体质不能一概而论，我曾在极度愤怒的情况下……</p>
<p>当时猫瓜风在前，鱼逸在中，虾咖波在后，前面的瓜姐好像受到演员的一戳，惊吓不小；后面的咖喱被吓得寸步难行。也许是不久前的刺激过大，不过更多的是吓人程度不够，演员太少，空间太开放，一直入不了戏，最大的惊吓还是波仔的一戳，以及一个角落突然出现的某个演员。</p>
<p>“异次孤岛”里最值得提的还是终点里的那束光，至少拍照效果好。</p>
<p><img src="http://image.jinl1874.xyz/img/20201027183342.png" alt="image-20201027183329191"></p>
<blockquote>
<p>异次元的道路</p>
</blockquote>
<h2 id="神庙森林"><a href="#神庙森林" class="headerlink" title="神庙森林"></a>神庙森林</h2><p>这也是鬼屋，我之前还以为是《神庙大逃亡》的场景，后来仔细想想，这游戏都已经成为时代的眼泪了。</p>
<p>这一次的等待也没有那么久，具体时间忘了，应该十几二十分钟吧。中途虾伸手摸了下别人角。</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>只要你不尴尬，那尴尬的就是别人。<br>瓜姐</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<p>没错，当时我觉得特尴尬。不久后他还要做个大冒险说要去摸那个谁的角，猜拳决定。之前猫不在，所以被虾坑了一把，但拒绝前往，后来经咖喱解释才清楚。本想再来一次，但是已经轮到我们了。</p>
<p>这次，我和一号在前，他们在后。一开始还觉得没什么，后来真的被白色的东西吓到了。一开始我还以为同样是个物品，但突然站起来还大叫一声，真的把我的心提到到嗓子眼，还狠狠地掐了一把逸浩，事后听他讲还挺疼的。后面再次见到同样的东西时，内心已毫无波动，圣斗士不会在同一个地方跌倒两次。</p>
<p>里面最有意思的还是那个用落水形成屏障，而形成的曲折小路，走上去有一种奇妙的感觉。</p>
<p>我和逸浩一起在前面，不知不觉和众人走散，旁边似乎是一对情侣。后面时不时地传来恐叫声，虾猫自动成为吓人演员，众多真角转弯成为他们的舞台，黑暗的屋子成为最佳掩护。当然，这是出去后才知道，其实我也挺想被他们吓的，毕竟来到鬼屋就是要享受被吓到的感觉吧，如果没被吓到，那岂不是白来了吗。不过，每个人的想要的都不一样，像有人就很享受过山车带来的刺激，但我就是受不了。 鬼屋里有人想吓人，有人想被吓，有人什么也不想。</p>
<h2 id="四维影院"><a href="#四维影院" class="headerlink" title="四维影院"></a>四维影院</h2><p>出来之后，发生了段小插曲，有个红衣服姐姐带着把伞突然出现，把咖喱吓跑了，而虾则碰（不知道碰没碰到）了下她，伴随着”呵“的一声，似乎想把她吓到。红衣服姐姐明显愣了一下，紧接着和虾玩起了”猫捉老鼠“的游戏，虾是薯。</p>
<p>之后玩了一阵子，又走向了第六次等待，这次要四十分钟。开始排队时，虾还在追逐。不知道是谁说的，虾要加红衣服姐姐的微信，所以一直在和她玩。后来他出现时，问其有没有加到，虾表示她没带手机，不好加。</p>
<p>四十分钟的等待，等来了一部名为《6 号凶座》的恐怖电影，剧情乏实可陈，倒是这个四维电影给我带来挺大影响，就是以后绝对不会去看所谓的 4D 电影。椅子动也就算了，毕竟还挺舒服的；椅子下面还有肩膀这里时不时有一个什么东西滑过，我知道是为了配合剧情而搞出来的，但还是挺害怕的（？）；当然更恶心的是当电影喷血时，椅子的管突然喷出水雾到脸上，用猫的话来说，好脏啊。</p>
<h2 id="U-型板之惧"><a href="#U-型板之惧" class="headerlink" title="U 型板之惧"></a>U 型板之惧</h2><p>决定下一项目的时候，看到 U 型滑板，大家就决定要去坐一次。风哥和瓜姐似乎有先见之明，提前退出去找下一个项目，要是我有这个先见就好了。</p>
<p>这次等待似乎没有那么久，大概有二十多分钟吧。由于垂直过山车的恐惧还留在我的心里，于是我想向逸浩确认一下，没想到他也没玩过。于是我找到”哪个项目没玩过“的咖喱，问玩这个会不会头晕（这个是旋转的），会不会有过山车的那种失重感觉，咖喱表示通通没有。听完咖喱的话，我提起的心才放下来。</p>
<p>直到等待时间的结束，放好书包，走到 U 型滑梯的中间，望着耸立两侧梯，发现事情远没有我想象的那么简单。一边的座位不够，不得不和他们分开坐到另一侧。</p>
<p>其实仔细想想咖喱也没说错，毕竟这个旋转不是一圈圈来着，而是转过来半圈再转回去，所以晕是不可能晕的；也没有那种从高空中停住然后往下掉的失重，取而代之的是那种飘到空中，再往下掉的感觉。</p>
<p>可能我恰好在圈的两侧，没有那种顶头掉下来的感觉，又或者是这次我吸取了上次的教训，把身体贴紧了点。但是每每 U 型车来到顶端时，意志中又生出了害怕，明知是不会有事的，就是控制不住自己。害怕来自无知，但正是因为有知才会意识到无知，或许是潜意识里不相信这个设备，害怕设备带来的潜在危险。</p>
<h2 id="旋转木马"><a href="#旋转木马" class="headerlink" title="旋转木马"></a>旋转木马</h2><p>这次意外地不用等待，因为是坐下层的，运气不好，没有找到大马，只能小马凑活凑活。当时确实有点累了，于是就趴在那，也没什么感觉，就算有也刺激不到我了。</p>
<p>不过从外面来看，确实挺漂亮的。</p>
<p><img src="http://image.jinl1874.xyz/img/20201027205901.png" alt="image-20201027205852570"></p>
<h2 id="归程"><a href="#归程" class="headerlink" title="归程"></a>归程</h2><p>再次木马前汇合时，已是接近 10 点了，拍完照后准备踏上归程。</p>
<p>一路上，看到高高的垂直过山车时，与刚见到的感觉不同，这次感觉特别高，想到当时悬在高空时，还是心有余悸。</p>
<p>要说有什么遗憾的话，就是没有去到那个凶宅里面玩，五星景点从外表就感觉不一样。</p>
<p>地铁站里，和波仔逸浩分道，再次坐上回校的地铁。</p>
<p><img src="http://image.jinl1874.xyz/img/20201027212853.png" alt="image-20201027212852432"><br>一切事总是有点缺憾的，坐完地铁时刚好有个车可以回南门，买好食物后回到园区时还没门禁，回到宿舍刚好还有热水洗澡。但是刚刚好这里还是有个不好，还是很大的不好，车子不够座位，在那里与虾咖分开，之后是猫、瓜、风。</p>
<p>这次最大感受是累，因为站着太久，从三点多一直站到十点多，中途虽然有一点时间坐下，但仅仅是杯水车薪罢了。还有就是高处带来的恐惧，最后是开心。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>雾山五行-剧评</title>
    <url>/2020/07/29/%E9%9B%BE%E5%B1%B1%E7%AC%AC%E4%B8%80%E9%9B%86/</url>
    <content><![CDATA[<p>就第一集来看，是一部非常优秀的动画。</p>
<h4 id="画面"><a href="#画面" class="headerlink" title="画面"></a>画面</h4><p>本片的风格是 2D 水墨画视频，第一感觉是惊艳，国产动画终于不是那种日式动画风了。粗线条的人物、水墨风的背景，这就是国产原汁原味的动画啊。<br>风景<br><img src="https://pic4.zhimg.com/80/v2-708c6c68cfd54a29681c1c8aa8f015a5.png" alt="Image"><br>屋子<br><img src="https://pic4.zhimg.com/80/v2-41e07649221ba1730cdf3b7fa266e746.png" alt="Image"><br>女主有点可爱啊<br><img src="https://pic4.zhimg.com/80/v2-24d5496376887ee539aac33f81302fc2.png" alt="Image"><br>颜艺<br><img src="https://pic4.zhimg.com/80/v2-4063a6cca45aafd5b1985f0b61deecf8.png" alt="Image"></p>
<p>还有就是《雾山》的打斗十分精彩，开头的特效打斗固然好看，但精彩程度不如后面三个蒙面和那两位大叔的刀剑枪之间的战斗。动作流畅，作画张数多<br><img src="https://pic4.zhimg.com/80/v2-14c7b5720b3de9143bd6bd85edb62506.png" alt="Image"><br>还有后面的耍长枪的打斗，这么多年了，我终于看到耍枪的打斗了。<br><img src="https://pic4.zhimg.com/80/v2-bcdf61e84e92b6dea2ffd74e1069475b.png" alt="Image"></p>
<h4 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h4><p>当前剧情还没展开，主要介绍了下背景以及一些人物。</p>
<p>开场火娃放出了麒麟（这背后应该有故事），然后被吊打。接着其它五行都出来，逼退了麒麟，但是麒麟他爹出来，捉了两个人质，要他们把麒麟捉回来换。</p>
<p>在后面还介绍了五行的作用（大概是这个词吧），是镇压雾山下的妖怪来着。酒鬼老头谈火娃的过错应该就是放出麒麟，之后火娃接受了某种约束，不能使用自己的能力之类，并且放一个鸭子身旁监视。<br><img src="https://pic4.zhimg.com/80/v2-a99eb7e3171eedcb2c68e25a8a587d67.png" alt="Image"></p>
<p>主要挖了几个坑，麒麟去哪了，自那件事后过了多了多久，为什么火娃不去找麒麟，那两个人质在结界里待久了会不会出事？</p>
<p>那三个小妖可以来到雾山，说明雾山很可能出现了问题。这个问题会不会与那个大哥有关？那些药师的大哥经常需要吃一个叫“聚仙丸”的药，感觉很有可能就是一个妖怪，就算不是妖怪，也应该和妖怪有一定的关系。</p>
<p>当然，上面只是虾扯蛋，具体会发生什么，等剧情发展吧。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>光是这画面以及这打斗就值得一看了，剧情方面还没看出什么来，就是配音方面有点不自然，换句话说就是尴尬。</p>
]]></content>
      <tags>
        <tag>anime</tag>
      </tags>
  </entry>
  <entry>
    <title>误会</title>
    <url>/2020/11/08/mistake/</url>
    <content><![CDATA[<p><img src="http://image.jinl1874.xyz/img/20201109091051.jpg" alt="德文特湖上的德文特岛房屋，英国坎布里亚郡湖区国家公园"></p>
<p>一个人觉得有问题的时候，我会觉得他有问题；一群人觉得有问题的时候，我觉得我出了问题。</p>
<a id="more"></a>

<p>俗话说，说者无意，听者有意。不久前，我一朋友看了某篇博客后，跑来问”你这是找到对象了？“。当时我简直是一头雾水，满脸问号。难道他说的酸臭味指的就是我吗？我还以为指的是同行的情侣，虽然他不认识。还说从字里行间看出来的，并指出是开头那段看出来的。当时我反驳了他，并直斥他的脑补能力怎么这么强。</p>
<p>直到昨天，我发了一篇名为《跨越两座城市的距离只为见她》，这个她有点明显，又很不明显。明面上的她很容易看出来，背后的她是谁我也不知道。</p>
<p>就当我以为大家都能明白标题里的她是谁的时候，突然有人问我这个她是谁。经过一翻讨论，我终于发现了这个异样的事，一件很奇怪的事，一件难以理解的事，一件令我震惊不己的事。我喜欢一个人，用准确的话来说是，他们以为我喜欢一个人。并且他们是从那篇博客看出来的。</p>
<p>我是一直觉得那篇博客没什么问题，就一简单的记叙文。但是本着大家都觉得有问题就是有问题的前提下，我就此事问了多个相关人士，得出结论，确实有问题。</p>
<p>但是知道了这件事后再回头看一下，发生的一些奇奇怪怪的事也可以解释了。</p>
<p>之前朋友的误会，到和那个她聊到那篇博客时，我的发言简直就是谈到暗恋的人才会说的，再到之前在群里的”背锅“、”被误会“，原来指的是这件事，还以为指的是另一个她。他们跟我说的时候我一直想的是另一个她，但没想他们说的是她，所以一直不明白他们想表达什么意思。方向错了，越想越错。</p>
<p>问题的根源果然是出在开头的那段上，那里我写得很模糊，是刻意模糊的，其实我也有隐瞒的地方。现在想想，他们当时会不会就是这样想的——”和你聊天的是你喜欢的人，但是对面突然就谈到喜欢，而你被吓到了，不正好说明你喜欢和你聊天的人嘛“。</p>
<p>因为模糊和隐瞒，导致了事情的发展偏移了轨道，但我以为那条轨道最多往另一个她方向拐，但怎么也没想到会往那个方向发展，直接就出轨了就，是真的完全没有料到。</p>
<p>不过，也无伤大雅，感觉还挺有意思的。</p>
<p>时 11 月 08 日。</p>
<p>原来我什么都不知道，只是自作多情而己。<br>时 11 月 17 日。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>情人若寂寥地出生在1874</title>
    <url>/2020/11/12/1874/</url>
    <content><![CDATA[<p><img src="http://image.jinl1874.xyz/img/20201112175339.jpg" alt="陈奕迅"><br>情人若寂寥地出生在 1874，刚刚早一百年一个世纪。</p>
<a id="more"></a>

<p>1874，这个词真的很有意思，刚好四个数字，又不难记，又有一定的寓义，用来作名字再也合适不过。而我的很多 ID 名以及手机锁屏密码都与这个词相关，。</p>
<p>《1874》是陈奕迅演唱、黄伟文作词和王双骏作曲编曲的一首歌。歌词的内容讲的是一个人没有遇到生命的那她，会不会那个她比他早出生了一百年，刚刚早一百年一个世纪。</p>
<p>这首歌最先吸引我的是 Eason 那富有磁性的演唱，再加上一丝丝摇滚味道的伴奏，让我一听到就爱上了这首歌。再细细品尝歌词时，一个人找不到另一个她，怀疑跟自己绝配的她，和他生错时代了。感觉与 Eason 另一首《与我常在》有一点异曲同工之妙，《与我常在》里认为自有自己才能和自己一起一直陪伴，而《1874》里认为这个人不存在现如今的世界，或者说是这个时空。</p>
<p>是眼光太高了吗？不是，是因为长久以来的孤独让他失去了对情人以及他人的信心，认为只有自己才能和自己一起，除非你是我，才可昼夜常在。除了自己，这个人可能比自己早生了一个世纪，今生是不可能再遇到，唯有在 1874 才能找到。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy 学习笔记</title>
    <url>/2020/11/18/scrapy-learn-note/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://www.runoob.com/wp-content/uploads/2018/10/8c591d54457bb033812a2b0364011e9c_articlex.png" alt="scrapy"></p>
<p>名词解释：</p>
<p>Scrapy Engine：引擎，负责不同组件的通信。</p>
<p>Scheduler：调度器，接受引擎发来的 Request 请求，并整理入队出队。</p>
<p>Item Pipeline：管道，处理从 Spider，并进行处理。</p>
<p>Spider：爬虫，处理 response，分析提取出数据，获取 Item 所需的字段。</p>
<p>Downloader：下载器，下载引擎发出的 request 请求</p>
<p>Downnloader Middleware：下载中间件</p>
<p>Spider Middleware：Spider 中间件</p>
<a id="more"></a>

<p>流程：</p>
<p>Engine 将 spider 处理的首条 request 通过调度器入队，再将处理好的 request 传给下载器，下载器再将下载好的东西传回引擎。引擎再把下载好的东西传到 Spider，Spider 处理之后，得到 item 以及下一个 url，最后引擎把 item 传给管道，url 再传给调度器再次循环。</p>
<h2 id="创建使用"><a href="#创建使用" class="headerlink" title="创建使用"></a>创建使用</h2><ul>
<li>创建一个 scrapy 项目，<code>scrapy startproject projectname</code></li>
<li>创建一个爬虫，<code>scrapy genspider spidername domain</code> # domain 指域名</li>
<li>运行爬虫，<code>scrapy crawl spider</code></li>
<li>保存，<code>scrapy crawl spider -o json/csv/xml/</code></li>
</ul>
<p>其它设置：</p>
<ul>
<li>items.py 设置 item 字典的取值。</li>
<li>settings 设置 ITEM_PIPELINES 的值，一般取消注释即可。</li>
<li>设置下载延迟 DOWNLOAD_DELAY。</li>
<li>设置请求头 DEFAULT_REQUEST_HEADERS。</li>
</ul>
<h2 id="Scrapy-Shell"><a href="#Scrapy-Shell" class="headerlink" title="Scrapy Shell"></a>Scrapy Shell</h2><p>使用 <code>scrapy shell &quot;https:www.zhihu.com&quot;</code></p>
<h2 id="CrawlSpider-类爬虫"><a href="#CrawlSpider-类爬虫" class="headerlink" title="CrawlSpider 类爬虫"></a>CrawlSpider 类爬虫</h2><p>创建， <code>scrapy genspider -t crawl zhihu &#39;zhihu.com&#39;</code></p>
<p>Link Extractors，提取链接。每个 LinkExtractor 有一个公共方法是 extract_links()，接收一个 Response 对象，返回一个;scrapy.link.Link 对象</p>
<h2 id="Scrapy-登录"><a href="#Scrapy-登录" class="headerlink" title="Scrapy 登录"></a>Scrapy 登录</h2><ol>
<li>使用 cookie</li>
<li>提供 post 的数据</li>
<li>首先发送页面的 get 请求，获取页面登录必须的参数，比如 zhihu.com 的_xsrf，然后和账户密码一起 post 到服务器，登录成功。</li>
</ol>
<p><code>scrapy.Formrequest.from_response()</code>这个方法自动找到表单进行登录……</p>
<h2 id="反反爬虫"><a href="#反反爬虫" class="headerlink" title="反反爬虫"></a>反反爬虫</h2><ol>
<li>动态设置 user-agent；</li>
<li>禁用 cookies，不需要用到 cookies 的地方就禁了它。通过 COOKIES_ENABLED 控制 CookiesMiddleware 的开启或关闭；</li>
<li>设置延迟下载；</li>
<li>Google 和百度的 cahe。比如百度快照会把相关的数据存在百度服务器上，绝对安全，但是没有图片和视频。</li>
<li>使用 ip 地址池</li>
<li>使用专门的爬虫代理组件，不过得加强。</li>
</ol>
<h2 id="logging-模块的使用"><a href="#logging-模块的使用" class="headerlink" title="logging 模块的使用"></a>logging 模块的使用</h2><ul>
<li><p>scrapy</p>
<ul>
<li><p>settings 中设置 LOG_LEVEL = “WARNING”</p>
</li>
<li><p>在 settings 中设置 Log_FILE = “./a.log”</p>
<blockquote>
<p>设置日志保存的位置 ，设置后终端不会显示日志内容</p>
</blockquote>
</li>
<li><p>import logging 实例化 logger 的方式在任何文件中使用 logger 输出内容</p>
</li>
</ul>
</li>
<li><p>普通项目中</p>
<ul>
<li><p>import logging</p>
</li>
<li><p>logging.basicConfig(……)</p>
<blockquote>
<p>设置日志输出的样式以及格式。</p>
</blockquote>
</li>
<li><p>实例化一个 <code>logger = logging.getLogger(__name__)</code></p>
</li>
<li><p>在任何 py 文件中调用 logger 即可</p>
</li>
</ul>
</li>
</ul>
<p>##　 scrapy-redis</p>
<p>先用正常的 scrapy 框架编写，最后再在 settings 添加几个参数即可使用 scrapy-redis 爬取。</p>
<p>settings.py 配置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定使用scrapy-redis的Scheduler</span></span><br><span class="line">SCHEDULER = <span class="string">"scrapy_redis.scheduler.Scheduler"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在redis中保持scrapy-redis用到的各个队列，从而允许暂停和暂停后恢复</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定排序爬取地址时使用的队列，默认是按照优先级排序</span></span><br><span class="line">SCHEDULER_QUEUE_CLASS = <span class="string">'scrapy_redis.queue.SpiderPriorityQueue'</span></span><br><span class="line"><span class="comment"># 可选的先进先出排序</span></span><br><span class="line"><span class="comment"># SCHEDULER_QUEUE_CLASS = 'scrapy_redis.queue.SpiderQueue'</span></span><br><span class="line"><span class="comment"># 可选的后进先出排序</span></span><br><span class="line"><span class="comment"># SCHEDULER_QUEUE_CLASS = 'scrapy_redis.queue.SpiderStack'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只在使用SpiderQueue或者SpiderStack是有效的参数,，指定爬虫关闭的最大空闲时间</span></span><br><span class="line">SCHEDULER_IDLE_BEFORE_CLOSE = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定RedisPipeline用以在redis中保存item</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'example.pipelines.ExamplePipeline'</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">'scrapy_redis.pipelines.RedisPipeline'</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定redis的连接参数</span></span><br><span class="line"><span class="comment"># REDIS_PASS是我自己加上的redis连接密码，需要简单修改scrapy-redis的源代码以支持使用密码连接redis</span></span><br><span class="line">REDIS_HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line"><span class="comment"># Custom redis client parameters (i.e.: socket timeout, etc.)</span></span><br><span class="line">REDIS_PARAMS  = &#123;&#125;</span><br><span class="line"><span class="comment">#REDIS_URL = 'redis://user:pass@hostname:9001'</span></span><br><span class="line"><span class="comment">#REDIS_PARAMS['password'] = 'itcast.cn'</span></span><br><span class="line">LOG_LEVEL = <span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_redis.dupefilters.RFPDupeFilter'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#The class used to detect and filter duplicate requests.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#The default (RFPDupeFilter) filters based on request fingerprint using the scrapy.utils.request.request_fingerprint function. In order to change the way duplicates are checked you could subclass RFPDupeFilter and override its request_fingerprint method. This method should accept scrapy Request object and return its fingerprint (a string).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#By default, RFPDupeFilter only logs the first duplicate request. Setting DUPEFILTER_DEBUG to True will make it log all duplicate requests.</span></span><br><span class="line">DUPEFILTER_DEBUG =<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Override the default request headers:</span></span><br><span class="line">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="改成-redis-运行"><a href="#改成-redis-运行" class="headerlink" title="改成 redis 运行"></a>改成 redis 运行</h2><p>先把 spider 文件继承的类改为 RedisCrawlSpider，再把 start_urls 注释掉，添加<code>redis_key = &quot;yyspider:start_urls&quot;</code>，再添加动态获取（可选）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># Dynamically define the allowed domains list.</span></span><br><span class="line">    domain = kwargs.pop(<span class="string">'domain'</span>, <span class="string">''</span>)</span><br><span class="line">    self.allowed_domains = filter(<span class="literal">None</span>, domain.split(<span class="string">','</span>))</span><br><span class="line">    super(YySpider, self).__init__(*args, **kwargs)</span><br></pre></td></tr></table></figure>

<p>最后，在对应的文件夹 <code>scrapy runsipder yy.py</code>运行相对应的文件名。</p>
<p>然后在相对应的 redis 上，执行 <code>lpush yyspider:start_urls http://www.youyuan.com/find/guangdong/mm18-25/advance-0-0-0-0-0-0-0/p1/</code>。</p>
<p>yy.spider 类例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YySpider</span><span class="params">(RedisCrawlSpider)</span>:</span></span><br><span class="line">    name = <span class="string">'yy'</span></span><br><span class="line">    allowed_domains = [<span class="string">'youyuan.com'</span>]</span><br><span class="line">    <span class="comment"># start_urls = [</span></span><br><span class="line">    <span class="comment">#     'http://www.youyuan.com/find/guangdong/mm18-25/advance-0-0-0-0-0-0-0/p1/']</span></span><br><span class="line"></span><br><span class="line">    redis_key = <span class="string">"yyspider:start_urls"</span></span><br><span class="line">    <span class="comment"># 第一级匹配</span></span><br><span class="line">    page_links = LinkExtractor(allow=(</span><br><span class="line">        <span class="string">r'youyuan.com/find/guangdong/mm18-25/advance-0-0-0-0-0-0-0/p\d+'</span>))</span><br><span class="line">    <span class="comment"># 第二级匹配</span></span><br><span class="line">    profile_links = LinkExtractor(allow=<span class="string">r"youyuan.com/\d+-profile"</span>)</span><br><span class="line"></span><br><span class="line">    rules = (</span><br><span class="line">        Rule(page_links),</span><br><span class="line">        Rule(profile_links, callback=<span class="string">'parse_item'</span>, follow=<span class="literal">False</span>),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">            <span class="comment"># Dynamically define the allowed domains list.</span></span><br><span class="line">        domain = kwargs.pop(<span class="string">'domain'</span>, <span class="string">''</span>)</span><br><span class="line">        self.allowed_domains = filter(<span class="literal">None</span>, domain.split(<span class="string">','</span>))</span><br><span class="line">        super(YySpider, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        item = YouyuanItem()</span><br><span class="line">        item[<span class="string">'username'</span>] = self.get_username(response)</span><br><span class="line"></span><br><span class="line">        item[<span class="string">'age'</span>] = self.get_age(response)</span><br><span class="line">        item[<span class="string">'avatar'</span>] = self.get_avatar(response)</span><br><span class="line">        item[<span class="string">'images_url'</span>] = self.get_images(response)</span><br><span class="line">        <span class="comment"># 个人独白</span></span><br><span class="line">        item[<span class="string">'content'</span>] = self.get_content(response)</span><br><span class="line">        <span class="comment"># 地址</span></span><br><span class="line">        item[<span class="string">'addr'</span>] = self.get_addr(response)</span><br><span class="line">        item[<span class="string">'education'</span>] = self.get_edu(response)</span><br><span class="line">        item[<span class="string">'hobby'</span>] = self.get_hobby(response)</span><br><span class="line">        <span class="comment"># 个人主页</span></span><br><span class="line">        item[<span class="string">'url'</span>] = response.url</span><br><span class="line">        <span class="comment"># 来源</span></span><br><span class="line">        item[<span class="string">'source'</span>] = <span class="string">'youyuan'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#item['domain_id'] = response.xpath('//input[@id="sid"]/@value').get()</span></span><br><span class="line">        <span class="comment">#item['name'] = response.xpath('//div[@id="name"]').get()</span></span><br><span class="line">        <span class="comment">#item['description'] = response.xpath('//div[@id="description"]').get()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬取 BiliBili 的视频、弹幕以及封面</title>
    <url>/2020/11/19/get-bilibili-video/</url>
    <content><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-7845078e3c79cca06685bd947ee64e1f.jpg" alt="Image"></p>
<p>详细解析 Python 该如何爬取 bilibili 的视频、弹幕以及封面，最后保存到本地。</p>
<a id="more"></a>

<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>用到的 Python 库：</p>
<ul>
<li>Python 3.7</li>
<li>requests</li>
<li>moviepy</li>
<li>json</li>
<li>re</li>
<li>os</li>
</ul>
<p>浏览器：Firefox/ 83.0</p>
<h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><p>打开一个视频网址，如(<a href="https://www.bilibili.com/video/BV1E4411e7ir)，然后直接打开发者工具，转到网络，选择XHR文件，再点击播放视频。可以看到很快就传输了很多文件。" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1E4411e7ir)，然后直接打开发者工具，转到网络，选择XHR文件，再点击播放视频。可以看到很快就传输了很多文件。</a><br><img src="https://pic4.zhimg.com/80/v2-85113af77b767f72731b2ca03aaa5b2f.png" alt="Image"><br>可以看出有两种不同的文件，一种是 30280，另一种是 30080。</p>
<p>因为 B 站是把音频和视频分开传输的，所以很明显，一种是视频，另一种就是音频。按大小来分的话，30080 是视频，30280 是音频文件。</p>
<p>首先用试着获取其中的一个文件，来测试一下。<br>先把请求视频 url 复制下来，再把请求头弄下来，接着发送个请求。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh,en-US;q=0.7,en;q=0.3'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">    <span class="string">'TE'</span>: <span class="string">'Trailers'</span>,</span><br><span class="line">    <span class="string">'Range'</span>: <span class="string">'bytes=1431-391742'</span>,</span><br><span class="line">    <span class="string">'Origin'</span>: <span class="string">'https://www.bilibili.com'</span>,</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'DNT'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.bilibili.com/video/BV1E4411e7ir'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://upos-sz-mirrorks3.bilivideo.com/upgcxcode/40/06/91280640/91280640-1-30280.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1605719498&amp;gen=playurl&amp;os=ks3bv&amp;oi=2028921166&amp;trid=cfe12b1b9d1b4b58bf13bb1d08429d3au&amp;platform=pc&amp;upsig=00dbb5691fd73fdc2b8e3a834e50ad15&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mid=11418834&amp;orderid=0,3&amp;agrr=0&amp;logo=80000000'</span></span><br><span class="line"></span><br><span class="line">res = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.flv'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(res.content)</span><br></pre></td></tr></table></figure>

<p>然而请求之后发现 flv 文件是空的，再看一下发回的请求文本，显示 403 禁止错误：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>403 Forbidden<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"white"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>403 Forbidden<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span>QCMAS/V2<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再仔细观察一下抓包情况，在发送请 get 请求之前，浏览器会发送两个 options 请求，应该是请求许可的意思。分别是请求音频许可和请求视频许可，因为请求 url 与请求音视频的 url 相同。<br><img src="https://pic4.zhimg.com/80/v2-5153a353ee437a06f7138f8f320da5bc.png" alt="Image"><br>那么用 session 来发送请求，保存好信息，再去请求链接。修改一下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求音视频的请求头</span></span><br><span class="line">headers_1 = &#123;</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh,en-US;q=0.7,en;q=0.3'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">    <span class="string">'TE'</span>: <span class="string">'Trailers'</span>,</span><br><span class="line">    <span class="string">'Range'</span>: <span class="string">'bytes=1431-391742'</span>,</span><br><span class="line">    <span class="string">'Origin'</span>: <span class="string">'https://www.bilibili.com'</span>,</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'DNT'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.bilibili.com/video/BV1E4411e7ir'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求的OPTIONS的请求头</span></span><br><span class="line">headers_2 = &#123;</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'cn-gdgz4-cmcc-v-10.bilivideo.com'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh,en-US;q=0.7,en;q=0.3'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Request-Method'</span>: <span class="string">'GET'</span>,</span><br><span class="line">    <span class="string">'Access-Control-Request-Headers'</span>: <span class="string">'range'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.bilibili.com/video/BV1E4411e7ir'</span>,</span><br><span class="line">    <span class="string">'Origin'</span>: <span class="string">'https://www.bilibili.com'</span>,</span><br><span class="line">    <span class="string">'DNT'</span>: <span class="string">'1'</span>,</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">    <span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://upos-sz-mirrorcos.bilivideo.com/upgcxcode/40/06/91280640/91280640-1-30080.m4s?e=ig8euxZM2rNcNbdlhoNvNC8BqJIzNbfqXBvEqxTEto8BTrNvN0GvT90W5JZMkX_YN0MvXg8gNEV4NC8xNEV4N03eN0B5tZlqNxTEto8BTrNvNeZVuJ10Kj_g2UB02J0mN0B5tZlqNCNEto8BTrNvNC7MTX502C8f2jmMQJ6mqF2fka1mqx6gqj0eN0B599M=&amp;uipk=5&amp;nbs=1&amp;deadline=1605752758&amp;gen=playurl&amp;os=cosbv&amp;oi=2028921166&amp;trid=18e55ae8ed4d41018ee9374a63501860u&amp;platform=pc&amp;upsig=346e8bea6d225d1ea592bb5a0c470c48&amp;uparams=e,uipk,nbs,deadline,gen,os,oi,trid,platform&amp;mid=11418834&amp;orderid=0,3&amp;agrr=1&amp;logo=80000000'</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">session.get(url, headers=headers_2)</span><br><span class="line">res = session.get(url, headers=headers_1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.flv'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(res.content)</span><br></pre></td></tr></table></figure>

<p>可以看到，test.flv 有文件大小了。<br><img src="https://pic4.zhimg.com/80/v2-ebf0c0dbd2661b9c39a7d2fa25468338.png" alt="Image"></p>
<p>但打开时显示解析错误：<br><img src="https://pic4.zhimg.com/80/v2-472360a7dc6b6cac2c2142ca3603df29.png" alt="Image"></p>
<p>再看一下多个不同请求的请求头，只有 range 发生明显的改变，而且 range 的值里的 bytes 参数，说明这很有可能是一个下载的文件大小范围。那么找到最后一个发送视频请求的的包，把最大值复制下来，然后再设置请求头里的 range 值为 0-最大值，即<code>&#39;Range&#39;:&#39;bytes=0-29271958&#39;</code>，然后再次运行 py 文件。很明显这次请求回来的文件比之前的大了许多，再点击播放，解析成功，有画面，但是没有声音。<br><img src="https://pic4.zhimg.com/80/v2-b85b56c06b33bba13b8b7c410033649e.png" alt="Image"></p>
<h3 id="找到-url-地址"><a href="#找到-url-地址" class="headerlink" title="找到 url 地址"></a>找到 url 地址</h3><p>要找到请求 url 肯定不能在在抓包里找到，可以尝试看下网页的源代码。<br>复制一点 url 的信息，在网页中查找，果然找到了信息。<br><img src="https://pic4.zhimg.com/80/v2-589145616caa6133d318734f71e06d21.png" alt="Image"><br>这些信息存在 <code>window.__playinfo__</code> 里，然后把这个 json 提取出来，放到一个 json 文件里，再用 Firefox 打开。</p>
<p><img src="https://pic4.zhimg.com/80/v2-a89fee6326296fbdc82bc033e8422ec2.png" alt="Image"></p>
<p><img src="https://pic4.zhimg.com/80/v2-6304876f124845ac5ed37c19d9062638.png" alt="Image"><br>可以看到，视频的 url 信息就在 ‘video’ 这个键里面，id 指的就是请求的质量，对应着上面的 accept_quality，<code>&#39;id&#39;: 116</code>指就是高清 1080p60。<br>视频的在里面，那么音频的 url 也在 <code>audio</code>这个键里面。</p>
<p>提取也很容易，先把 <code>window._playinfo</code> 用正则表达式获取到，再将其转为 python 的 json 对象，然后就可以取出来了。</p>
<p>请求的 range 参数怎么设置呢？可以把其删去，或者设为<code>&#39;range&#39;: &#39;bytes=0-&#39;</code>，这样就会请求一个全文件了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 请求视频页面，注意此时的请求头不是同一个</span></span><br><span class="line">res = session.get(url, headers=headers)</span><br><span class="line">text = res.text</span><br><span class="line">text = re.findall(<span class="string">r'&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;'</span>, text)[<span class="number">0</span>]</span><br><span class="line">json_data = json.loads(text)</span><br><span class="line"><span class="comment"># 一般有多种格式可选，优先选1080p，没有就选720p。什么？没有720p！这样的视频还有下载的必要？</span></span><br><span class="line">v_url = json_data[<span class="string">'data'</span>][<span class="string">'dash'</span>][<span class="string">'video'</span>][<span class="number">0</span>][<span class="string">'baseUrl'</span>]</span><br><span class="line">a_url = json_data[<span class="string">'data'</span>][<span class="string">'dash'</span>][<span class="string">'audio'</span>][<span class="number">0</span>][<span class="string">'baseUrl'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取准许</span></span><br><span class="line">session.options(v_url, headers=headers_2)</span><br><span class="line">session.options(a_url, headers=headers_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">video_content = session.get(v_url, headers=headers_1).content</span><br><span class="line">audio_content = session.get(a_url, headers=headers_1).content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.mp3'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">   fp.write(audio_content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.flv, '</span>w<span class="string">b') as fp:</span></span><br><span class="line"><span class="string">   fp.write(video_content)</span></span><br></pre></td></tr></table></figure>

<h3 id="弹幕"><a href="#弹幕" class="headerlink" title="弹幕"></a>弹幕</h3><p>要获取 B 站的弹幕，首先得知道 B 站的弹幕文件是从哪加载的。B 站的弹幕文件放在<code>http://comment.bilibili.com/{cid}.xml</code>，所以要获取弹幕，就要获取 B 站的视频的 cid。<br>视频的 cid 号在页面也可以找到，所以用正则表达式提取。<br><img src="https://pic4.zhimg.com/80/v2-135f61b5a63426a2195d960aca66ac3d.png" alt="Image"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = res.text</span><br><span class="line"><span class="comment"># 获取cid</span></span><br><span class="line">cid = re.findall(<span class="string">r'cid=([\d]+)'</span>, text)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取弹幕文件</span></span><br><span class="line">xml = <span class="string">'http://comment.bilibili.com/&#123;&#125;.xml'</span>.format(cid)</span><br><span class="line">danmaku = session.get(xml, headers=headers)</span><br><span class="line"><span class="comment"># 不设置的话，提取会乱码</span></span><br><span class="line">danmaku.encoding = <span class="string">'utf-8'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line"><span class="keyword">with</span> open(cid+<span class="string">'.xml'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(danmaku.text)</span><br></pre></td></tr></table></figure>

<h3 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h3><p>封面也可以在页面找到。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = res.text</span><br><span class="line">cover_url = re.findall(</span><br><span class="line">    <span class="string">r'&lt;meta data-vue-meta="true" itemprop="image" content="(.*?)"&gt;'</span>, text)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="合并音视频"><a href="#合并音视频" class="headerlink" title="合并音视频"></a>合并音视频</h3><p>这里使用 python 的 moviepy 库，安装命令<code>pip install moviepy</code>。</p>
<p>导入 <code>from moviepy.editor import *</code>，然后合并导出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">video = VideoFileClip(video_name)</span><br><span class="line">audio = AudioFileClip(audio_name)</span><br><span class="line">new_video = video.set_audio(audio)</span><br><span class="line">new_video.to_videofile(<span class="string">"test.mp4"</span>, fps=<span class="number">24</span>, remove_temp=<span class="literal">False</span>)</span><br><span class="line">os.remove(video_name)</span><br><span class="line">os.remove(audio_name)</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>完整代码查看我的 <a href="https://github.com/jinl1874/spider/tree/master/bilibili" target="_blank" rel="noopener">Github 地址</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Python 爬取知乎答案上的视频</title>
    <url>/2020/11/20/python-zhihu-video/</url>
    <content><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-bb617555b12dd3be6c590dc0f4239893.jpg" alt="Image"></p>
<p>使用 python requests 来下载知乎的视频，虽然有更简单的方法。</p>
<a id="more"></a>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>老规矩，先抓包。<br>随便进入一个<a href="https://www.zhihu.com/question/398940907/answer/1275941024" target="_blank" rel="noopener">视频页面</a>，进入开发者模式，选择网络，再筛选为 XHR。<br>很快啊，啪的一下进来，就找到了这么一个请求。<br><img src="https://pic4.zhimg.com/80/v2-7e27c91b207ddb2c058ade3d4ca5b3c1.png" alt="Image"><br>再点开这个 json，发现里面这么些数据：<br><img src="https://pic4.zhimg.com/80/v2-ca4e22e60affb10e8da45280f9600d69.png" alt="Image"><br>很明显，这里面有三个不同清晰度的视频，分别是 LD、HD、SD。点开里面的’play_url’之后，就会提示下载一个视频文件。这已经很明显了，这就是我们要找的视频地址。</p>
<p>那要怎么获取呢？</p>
<p>先看下 url，是这样的——(<a href="https://lens.zhihu.com/api/v4/videos/1254186650735267840)，前面的都是不变的，只有后面ID是动态的。" target="_blank" rel="noopener">https://lens.zhihu.com/api/v4/videos/1254186650735267840)，前面的都是不变的，只有后面ID是动态的。</a><br>那么首要任务就是将这个 ID 找出来，在网页代码搜索一下，发现为空。<br>由于新版的知乎视频里，在答案上插入视频需要将视频发表到另一个地方，所以试着找一下在答案找到这个视频的地址。然后再去访问一下那里，看有没有这个 ID。</p>
<p>很明显，我们在答案的代码中找到了视频的 url 地址，在一个 <code>&lt;script id=&quot;js-clientConfig&quot; type=&quot;text/json&quot;&gt;</code>标签里，有一个整个页面的 json 文件，包括了题目、答案和作者等详细信息，而视频 url 也在里面。</p>
<p>使用正则表达式提取出来，再去访问视频的 url。在视频的网页页面下，搜索一下视频 ID，果然在里面。<br><img src="https://pic4.zhimg.com/80/v2-a67f2f921865a245851fdc95abb8a7a5.png" alt="Image"></p>
<p>所以这就很简单了。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>先获取答案上的所有的视频 url；</li>
<li>再分别访问视频，获取一个返回包含视频信息的 json 的 url；</li>
<li>从 json 上获取到真实的视频 url 地址；</li>
<li>访问，再保存；</li>
</ol>
<h2 id="提取-url"><a href="#提取-url" class="headerlink" title="提取 url"></a>提取 url</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_video_urls</span><span class="params">(url)</span>:</span></span><br><span class="line">    res = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># 获取答案url上的id</span></span><br><span class="line">    answer_id = re.findall(<span class="string">r'answer/(\d+)'</span>, url)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取json文本</span></span><br><span class="line">    text = res.text</span><br><span class="line">    json_text = re.findall(</span><br><span class="line">        <span class="string">r'&lt;script id="js-initialData" type="text/json"&gt;(.*?)&lt;/script&gt;'</span>, text)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取答案的content文件。</span></span><br><span class="line">    data = json.loads(json_text)</span><br><span class="line">    content = data[<span class="string">'initialState'</span>][<span class="string">'entities'</span>][<span class="string">'answers'</span>][answer_id][<span class="string">'content'</span>]</span><br><span class="line">    <span class="comment"># 提取url</span></span><br><span class="line">    video_urls = re.findall(<span class="string">r'(https://www.zhihu.com/zvideo/\d+)'</span>, content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> video_urls</span><br></pre></td></tr></table></figure>

<h2 id="获取真实的视频地址以及标题"><a href="#获取真实的视频地址以及标题" class="headerlink" title="获取真实的视频地址以及标题"></a>获取真实的视频地址以及标题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    get_video_url = <span class="string">'https://lens.zhihu.com/api/v4/videos/&#123;&#125;'</span></span><br><span class="line">    <span class="comment"># 找到 json_url 的id</span></span><br><span class="line">    res = requests.get(url, headers=headers)</span><br><span class="line">    url = re.findall(</span><br><span class="line">        <span class="string">'&lt;iframe class="ZVideo-player" src=\"(.*?)\"'</span>, res.text)[<span class="number">0</span>]</span><br><span class="line">    video_id = re.findall(<span class="string">r'/video/(\d+)'</span>, url)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 合并</span></span><br><span class="line">    json_url = get_video_url.format(video_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取真实的视频url</span></span><br><span class="line">    res = requests.get(json_url, headers=headers)</span><br><span class="line">    data = json.loads(res.text)</span><br><span class="line">    <span class="comment"># 可选 LD 和 SD，不过一般选最清晰的 HD</span></span><br><span class="line">    HD_url = data[<span class="string">'playlist'</span>][<span class="string">'HD'</span>][<span class="string">'play_url'</span>]</span><br><span class="line"></span><br><span class="line">    title = data[<span class="string">'title'</span>]</span><br><span class="line">    video_name = title + <span class="string">'.mp4'</span></span><br><span class="line">    <span class="keyword">return</span> video_name, HD_url</span><br></pre></td></tr></table></figure>

<h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(name, url)</span>:</span></span><br><span class="line">    res = requests.get(url, headers=headers)</span><br><span class="line">    <span class="keyword">with</span> open(name, <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(res.content)</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><a href="https://github.com/jinl1874/spider/tree/master/zhihu_video" target="_blank" rel="noopener">Github|spider</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>以前的她</title>
    <url>/2020/11/25/ex/</url>
    <content><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-5ce6e313ee4a976fbddf4dc9424ce4fd.jpg" alt="Image"></p>
<h2 id="以前的她"><a href="#以前的她" class="headerlink" title="以前的她"></a>以前的她</h2><p>网友喜欢听故事，那就写一篇故事吧。</p>
<a id="more"></a>

<p>先说明，里面有一些美化的情节，也缺漏一些情节，因为有些事是实在写不下来，想起就尴尬到脸红。不过就算没写下来，用一个词来形容的话，就是渣男。虽然笔者也不知道渣不渣，但是感觉真的挺像的，如果读者觉得不像，那就有可能被笔者的博客美化了。</p>
<p>有风说的对，既然已经做过一些亲蜜举动了，再否定就是对她的不尊重了，那就认真地写下来吧。博客还真是个好东西，以前不敢说的话，可以在这里说出来。说起来还没正式写过一篇关于这方面的文章呢，这次正好写一下吧。正好练下手，为接下来的事做准备，虽然已经开始了。</p>
<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>大概是在高三下半学期的时候，她就坐在金鱼的后面，而金鱼坐在第一排。而同桌，自初中以来就是与同性一起坐的(小县城学校…..）。高中分班的关系，在以前就认识她了，也没什么特别的印象，就是稍微有点黑吧（以金鱼来对比的话）。同桌、后桌、后同桌（影姐）、邻桌以及金鱼一起说说笑笑，打打闹闹，大概就是这样熟悉起来的。也因为金鱼经常做出一些奇怪的举动，比如上课时与她交换位置坐（当然也有一次，也是因为生物老师比较年轻随和才敢），并且看到她的书，有很多边角折起来了，然后爱书的金鱼就一本本给弄回来了。然后玩笑就这样开起来了，包括同桌邻桌和后同桌，就传金鱼喜欢她。</p>
<p>值得一提的是，她有一个非常要好的朋友。这个朋友结交过程是，有那么一天，这个朋友与其同桌闹矛盾了，在宿舍一直哭，然后她就递了纸巾过去，安慰了一下，此后就成为最好的朋友了。这个是和性格有关，用一个二刺螈词来形容她的话，就是“三无”，无口无面无心。金鱼曾与其是邻桌，然而从头到尾都没听到过她的声音，也没见过她有什么表情。她的脸有点小圆，与咖喱不同的是，她是比较瘦的，头发是黑长直的。就像二刺螈里走出来的少女，就称为三无妹子吧。</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>记得还是四月五月，回到家，然后就加了其 QQ。就表了白，（其实这半开玩笑来着，好感确实是有的，但是还没到那种地步）。没等她给出具体的答复，就说叫她不要跟其它人说，理由就是影响学习之类的。就过了今天就大家都忘了有过这件事，仍然记得当时她是答应得很清楚的。<br>后来据她说，那天来到学校后，她和她的同桌影姐在操场走啊走，问了影姐（因为影姐当时也喜欢某个人）几个问题，最后终于确定了内心，然后回到教室就给了金鱼答复。<br>当时收到答复的金鱼是震惊的，明明之前都说好来着，怎么你就…..<br>然后就这样开始了，金鱼表白，然后她答应了。所以就是这个戏剧化的开头，导致之后的事情变得很奇怪，并且里面好像还藏着一个奇妙的事。</p>
<h3 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h3><p>然后要怎么做？鬼知道啊，又没人教过，书里又没讲。看过的言情小说都是霸道总裁之类的（由此产生对爱情小说的刻板印象，直到读到经典的爱情小说也没改过来）。</p>
<p>之后不久，有个朋友（与她的关系比较一般）过生日，就胡乱送了个礼物（大概就是一个零食），然后她（这个朋友）就请我去吃了个晚餐。印象中这是送的第一个生日礼物吧，想起来都不忍直视。以前还挺羡慕可以在学校过生日的，后来才觉得生日在暑假也挺好的，至少还可以安慰自己，没过生日是因为在暑假。</p>
<p>回来之后的当晚，她就问金鱼为什么不告诉她，金鱼表示很惊讶（脑补一下语气词），为什么要告诉她，不就是去吃个饭，当时还有一大堆同学一起吃。然后她说那个谁（同行的同学）也告诉了，金鱼只能表示无话可说。</p>
<p>然后就是大概有一周多吧，相处就是佛系（几年前的词用到几年前的场景挺合适的）相处。就是除了在教室，其实在教室也没有很多交流，其它地方都没有交集，吃饭、晚自修下课，金独自一人，她和她的朋友一起。然后就莫名其妙地全班就知道了，其实也不算莫名其妙，怎么知道的呢。听她说是她的舍长（弄哭三无少女的那个）发现了端倪，就逼问她，大意是如果还想呆在宿舍的话就全部说出来了。之后她就全部招供，然后就知道了。</p>
<p>知道之后还是这样佛系，金鱼觉得这样就挺好的，这些事等高考之后再说嘛。但是同桌邻桌全都看不下去了，就说还没见过金鱼和她牵手，今晚必须牵手回去（男女生宿舍是同路的）。然后就在众目睽睽之下牵手走回去了，中途他们还挺识相地走开了。</p>
<p>很快就到了新的编座位的时候了，然后金鱼的同桌不变，位置变了另一组的第二排，前面只有一个人坐，是全班第一来着。而她变编到了中后面，同桌也换了其它人。</p>
<p>之后也偶尔约出去吃下饭、散散步之类的。之后到了 520，然后就买了俩米兔（小米吉祥物）玩偶，一个送给她，一个挂在自己的小米书包上。后来她扔了，而另一个米兔还一直留在书包上，直到去年换了新个书包。她也送了个小挂件，原本是挂手上的，然后就觉得挺不好意思的，就挂在了小米手环上。</p>
<h3 id="破裂"><a href="#破裂" class="headerlink" title="破裂"></a>破裂</h3><p>是什么时候开始的，金鱼大概忘了。反正就是莫名其妙地不理人，就看到也当没看到，搞得金鱼都不好意思打招呼了。</p>
<p>临近高考了，金鱼也觉得这不是个办法，然后就去找她谈了谈，当然什么也没有改变。</p>
<p>最后就去约好了高考结束再去搞这些麻烦事，先把高考搞完再说。</p>
<p>说到高考，最有意思的还是前两天晚上，然后搬到了新教室（因为原教室要用于高考。办公室走廊处有个很大的燕子窝，导致下面堆了很多鸟粪。那天就谈完之后，心情有些不好。同桌就和金鱼谈了一会儿，金鱼表示心跳有点快。然后他就去找生物老师，说金鱼紧张。生物老师是个看起来挺年轻的女性，性格也挺好的，不过有时也会导致掌控不了教室。之后，生物老师就把金鱼和同桌一起叫去走廊那里，以为金鱼是在为高考紧张，就边拍后背边说晚上喝点牛奶、早点睡，放轻松之类的话。</p>
<p>到考完语文和数学的那晚上，一群人去和化学老师说笑的时候，才发现其它老师也知道了金鱼高考紧张的事了。</p>
<h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>高考结束后，全班都聚在大排档（班长家开的，然后请大家）吃谢师宴。</p>
<p>就有一个毕业册，其他班都是高考前发的，就金鱼那班是高考后班主任才发。然后毕业册要给大家签个名嘛，就拿给她签个名，谁曾想到她竟然在翻到一页写了好多话，后来撕也不是，不撕（因为有其它人签名嘛）也不是。</p>
<p>吃完饭后去了 KTV 唱了唱歌，就和她一起出去谈了谈，不过那个三无妹子好像不太乐意。</p>
<p>问了挺多问题之后，终于清楚了。大概就是三无妹子和其同桌，经过一番讨论，觉得金鱼并不喜欢她，然后她也这么觉得，然后就这样了。我觉得吧，金鱼那个举止以及表现，确实是看不出有多喜欢她。不过还是觉得跟本人谈一下更好。其实除了这点，我觉得那个三无妹子还有因为金鱼与其最好（可能也是唯一）的朋友在一起了，导致她陪三无妹子的时间更少了，大概是挚友的中心不再是自己了。当然，三无妹子不是百合，她暗恋班上的另一位同学，高考过后，在几个朋友的帮助下的，他俩在一起了。在这之前，我的一位朋友表白三无失败了。</p>
<p>其中，删去了几个重要的细节，要写出去是太难了。</p>
<h3 id="再发展"><a href="#再发展" class="headerlink" title="再发展"></a>再发展</h3><p>大概就是高考结束后第二天，她先回学校，金鱼还在外面玩。然后就因为学校要考学业水平测试，因此大门关闭，成为了围城。里面的人想出去，外面的人想进来。最后在傍晚时再次见面，最后分别踏上回家的道路。</p>
<p>拿到手机的金鱼，就与其开始了联系之旅。也许那是金鱼最后一次把自身情况分享出去吧，也是最后一次打了那么久的电话。</p>
<p>之后，她把那天不久之前发生的事说了出来。原来她曾经向班上的第一名表白过，然后被拒绝。其实在更早之前，金鱼曾经看到过她用手机拍过他的照片。而那个过生日的朋友，其实也说过一点隐晦的话。不过很多事，金鱼都是看的时候没反应，事后知道事情，再往回看，才发现事情原来是这样，比如某波哥。</p>
<p>结束之前，其实也有过几次矛盾，除了金鱼和她的矛盾外，还有三无妹子的事。</p>
<p>其实要说是多大的事的话，也不是多大的矛盾，好好沟通一下的话，其实还是可以缓解的。但是根本矛盾却一直没触及到，其实是我和她，一开始根本就不适合在一起。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>结束得好奇怪，某一天，她发信息来说明分手的原因（原因就不说了，因为金鱼是个好人），然后就删了金鱼的微信、QQ，然后就是这么突然。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>这是一场莫名其妙地开始，又莫名其妙地结束的恋爱。</p>
<p>大概就是一个回避型人格遇到一个焦虑型人格，回避型在一直在逃避，无法给焦虑型安全感。矛盾一直存在，也一直没有解决。比如她把他说给她的朋友家人知道，而他没有能说的朋友。如果一方没有大的改变的话，分开其实是必然的，他是一直知道。因为他曾计划过何时该如何向她分手，但是被她提前了一步。</p>
<p>大概就是这样吧！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>【悠哉日常大王·解】光华的苦恼</title>
    <url>/2020/12/02/nono-biyori-2/</url>
    <content><![CDATA[<p><img src="https://pic4.zhimg.com/80/v2-5e88f01c16d3448d5b12574e272e6d5d.png" alt="Image"></p>
<p>多年以后，面对要毁灭世界的恶魔时，光华将会想起九岁那年木实带她城市购物的那个下午。</p>
<a id="more"></a>

<p>这个世界很奇怪，更奇怪的是没有人对其感到奇怪，光华不理解。</p>
<p>宫内光华的是乡下长大，一直渴望成为一个“城里人”，于是初中毕业后就选择到东京读书，离开了呆了九年的旭丘分校。</p>
<p>为什么对“乡下妹”这么排斥呢？其实光华不是排斥乡下，而是对城里充满了向往。</p>
<p>幼年时，光华有点小调皮，并对世界充满了好奇。与姐姐妹妹不同，父母不在家的这段时间里，姐姐小时候有雪子阿姨照顾，妹妹也与副食店的结下了一段特殊的情谊，而与她一起玩的大多是处于同一年龄段的人。。说起副食店的，这名字还是刚入学的时候光华给她取的名字，那时的副食店还是黑发来着，并且光华还捉弄了一番她。因此年少的她变得很爱探索，家里、学校，又或者是山上，田里，小村里到处都是她的踪迹。后来，她和夏海在山里搭建了属于她们的秘密基地。在那里，光华可以俯视整个村子。</p>
<p>那时的她，以为整个世界都在她的掌控之下。</p>
<p>直到九岁那年，木实要去城里购买新生活用品与乐器，便邀请光华与其一同作伴前往。征得父母的同意后，光华第一次坐上离开本地的电车，来到了东京。</p>
<p>车站前，马路上车水马龙，广场上人来人往，远处高楼大厦耸立。光华呆呆站在那里，似乎过了很久，但又不是很久，直到木实叫她才反应过来。那之后去买了什么、做了什么，光华现在已经忘了，唯一记得的是城市对井底之蛙的自己带来的震憾。自那以后，光华的心已经不在家里的小乡村，而是大城市——东京，也下定决心未来要到最大的城市东京去，去做一个城市人。</p>
<p><img src="http://i1.hdslb.com/bfs/archive/3c261d2e4286fbe048e8db4ccd0960e594fd8a78.jpg" alt="http://i1.hdslb.com/bfs/archive/3c261d2e4286fbe048e8db4ccd0960e594fd8a78.jpg"></p>
<p>初三过后，光华从旭丘分校毕业，在她的要求下，最终还是来到了东京的某所学校读高中。在那里，她遇到了她的朋友，是她的室友春风，也遇到了那个恶魔。</p>
<p>周四那天下午，学校里的学生基本都回家了，只有光华和春风在教学楼附近校道上散步。</p>
<p>黄昏中淡淡的阳光照在她们身上，在地上投出两个长长的影子。而不远处的教学楼顶上的，有一个小女孩在上面站着，她扎着个双马尾，背后有两个小翅膀。她很快就注意到了在下面走的光华和春风，于是伸出手指向她们，并大喊：“下面的人听着，我是来自其它世界的恶心，接下来我要去征服世界了。”不过语气太过激动，身体重心向前倾，导致整个人从六层楼高的楼顶掉了下来。</p>
<p>光华和春风赶紧跑过去，小女孩没事，只是头上多了一个肿包。这是一件很奇怪的事，光华却不觉得奇怪，但她并没有意识到这种不觉得奇怪本身就是一件很奇怪的事，或许光华潜意识里就是觉得这个世界是奇怪的。<br>光华与春风吃力地把她搬上她们所在的教室，想不到她个子挺小，但还是挺重的。气喘吁吁的光华这时才仔细端详起她的脸，觉得有一丝丝眼熟。还没醒过来她，因为疼痛，稚气未脱的脸上脸角下垂，露出难受的表情，却意外地感觉很可爱。光华忍不住伸手过去捏她的脸。</p>
<p>不过，受到捏脸刺激的小女孩醒了，发现有人在捏她的脸，连忙退后两步。但右脚不心绊到左脚，导致再次失去平衡，伴随着“啊”的一声，她再次倒在地板上。</p>
<p>“你没事吧？”春风轻轻地问。</p>
<p>“怎么可能没事啊，刚刚从上面掉下来，现在又摔了一下，疼死了啊！”小女孩边摸头边大声说道。</p>
<p>“明明从楼顶掉下去都没事，为什么摔一下也会疼呢？”光华在旁边吐槽。</p>
<p>春风走过去，帮她揉揉头，问道：“你是谁啊，为什么会出现在这里？”</p>
<p>她挺起胸膛：“我叫露西，从另一个世界来的恶魔来到这里，就是为了征服这个世界。为了证明自己已经长大了，有独当一面的能力。”</p>
<p>春风微笑着摸摸露西的头：“好啊，你要好好努力哦。”</p>
<p>光华在旁说道：“那么露西，今晚你住哪了，根据地又在哪？”</p>
<p>露西结结巴巴：“怎……怎么能告诉你呢，这……这可是大机密。”</p>
<p>光华偷笑道：“其实是没有地方住了吧。”</p>
<p>春风说：“可以先来我们这住一下的。”</p>
<p>听到此话的露西，两眼发光，抱紧了春风，嘴上却说：”既然你这么诚心邀请了，我就勉为其难地去吧。”</p>
<p>光华摇摇头：“春风你又把东西往家里带了。”</p>
<p>至此，小小的宿舍多了一位新的住客，而班级上，也多了一个看起来小很多的女生。</p>
<hr>
<p>露西有一个妹妹，她叫皮可，她经常做出一些搞怪的事，也经常欺负露西。虽然皮可没有明说，可露西知道明明那个要求这样做的爸爸已经不在了，为什么还要这样做。为此，露西在皮可说要征服世界前，提出要自己去征服，皮可也答应了。露西不想去征服，她只想见一个人，那个一直温柔保护她的人。</p>
<p>但是却遇到了她们，爱吐槽的光华以及温柔的春风，露西觉得她们人很好，说说笑笑地很开心，也有有一股很熟悉的感觉，尤其春风摸自己头的时候。好景不长，觉得长久没有动静的皮可亲自来到这里了。</p>
<p>那天，皮可突然出现在教室里，恰好坐在光华的前面。光华与其聊了一会儿，发现她是露西的妹妹。椰子树型的橘黄色头发，还有这种性格，相似的姐姐，怎么这么像越谷一家呢。</p>
<p>这时露西发现了她，惊讶地大喊了一声。</p>
<p>皮可的出现打乱了露西的生活，使得露西不得不面对这件事。后来在宿舍当中，皮可让露西去帮忙做家务事，因为露西有个特点就是想要做什么，结果偏与其相对。结果就是露西弄坏了春风最爱的娃娃，以及妈妈给春风的头饰。导致一向温和的春风，说了一句“我最讨厌露西了”。而愧疚难过的露西也跟着妹妹走了。</p>
<p>之后，在面对皮可要发射毁灭世界的导弹时，露西想起了每当爸爸打她骂她时，每次自己难过时，哥哥总是出来安慰她，出来保护她，一直是她的保护伞。可是不知道是不是自己太依赖哥哥了，导致哥哥消失了，爸爸也消失了。是自己一直没有长大，导致哥哥太过疲倦了，所以哥哥才没有回来吗。</p>
<p>是的，要长大，要独当一面，这样哥哥才会回来，这样才会再见到哥哥。</p>
<p>露西又想起了春风和光华，想起了和她们在一起的生活，就好像哥哥在身边一样。不久前，露西叫一个人把自己的头饰送到春风家，不知道春风现在肯不肯原谅她了。</p>
<p>终于，露西下定了决心。她走到皮可面前，并毁灭了整个装置，面对妹妹的恶魔质疑，露西说：“我，和善恶没有关系，我只是想和春风还有光华在一起生活。”</p>
<p>最后世界毁灭被阻止，在姐姐的邀请下，皮可也加入了进来。</p>
<p>一天，光华突然问皮可：“你是不是还有一个哥哥。”</p>
<p>皮可答道：“你怎么知道的？哥哥有是有，不过今年不知道去哪了。”</p>
<p>光华感到奇怪：“我家乡里也有三兄妹，感觉性格和你们有点相似。”</p>
<p>接着又说：“说起来，家里有个从东京转校过去的学生呢，到现在已经过了两个学期，不知道现在家里怎么样。”</p>
<p>露西问：“什么时候转过去的？”</p>
<p>“唔，那天的话，应该是 4 月 13 日。”</p>
<p>4 月 13 日，那天正好是哥哥消失的日子，不知道还能不能再次见到哥哥啊。已经大半年了，哥哥还好吗。露西这样想着，脸上露出伤感的表情。</p>
<p>看到皮可露西的表情有点异样，光华又说：“等这学年结束，我就带你们去我的家里玩吧。那里有我奇怪的妹妹，爱睡觉的姐姐，还有和你们很像的越谷家的姐妹，她们还有一个哥哥，不过不怎么喜欢说话，还有一个傲娇副食店的，还有个小腹黑的高三师姐。你们一定会成为好朋友的。”</p>
<p>“好啊！”露西边说边想着，在那里或许会有不一样的生活吧。</p>
<p>“皮可也要去。”皮可其实一直知道，这个世界与恶魔的世界相为镜子，恶魔世界有的人，这个世界也有。听光华的描述，皮可就已经大致确定了。况且皮可从光华身上感受到了哥哥的气息，也许哥哥就在那里。说起来，如果我的哥哥和另一个哥哥碰到的话，时间会不会出现错误？</p>
<p>春风微笑地说：“这学期结束后，大家一起去吧，我想去光华家玩呢。”</p>
<p>完。</p>
]]></content>
      <categories>
        <category>动漫</category>
      </categories>
      <tags>
        <tag>manga</tag>
        <tag>脑洞</tag>
      </tags>
  </entry>
  <entry>
    <title>微软商店不能联网的问题</title>
    <url>/2020/10/15/ms-store-network/</url>
    <content><![CDATA[<p>#! <a href="https://zhuanlan.zhihu.com/p/326491789" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/326491789</a></p>
<p><img src="https://pic4.zhimg.com/80/v2-93c03b740bdf08706f6111a3d81d1caa.jpg" alt="Image"></p>
<h1 id="解决微软商店不能联网的问题"><a href="#解决微软商店不能联网的问题" class="headerlink" title="解决微软商店不能联网的问题"></a>解决微软商店不能联网的问题</h1><p>微软商店 每次都不能连上网，犯了 N 次错之后，发现主要是代理问题。</p>
<a id="more"></a>

<p>打开 IE 浏览器，在上面的工具栏上点击“工具”，再选择 Internet 选项。<br><img src="https://pic4.zhimg.com/80/v2-a2f83c2c43871f0cee175c0889b7817e.png" alt="Image"></p>
<p>连接 -&gt; 局域网设置 -&gt; 去掉勾选“为 Lan 使用代理服务器” -&gt; 确定<br><img src="https://pic4.zhimg.com/80/v2-2d75fcd25b306a158809ca681d24c761.png" alt="Image">!</p>
<p>然后就可以了。<br><img src="https://pic4.zhimg.com/80/v2-5e538d785089542df5e9b32a363eb91d.png" alt="Image"></p>
]]></content>
      <categories>
        <category>Window</category>
      </categories>
      <tags>
        <tag>soft</tag>
        <tag>window</tag>
      </tags>
  </entry>
</search>
