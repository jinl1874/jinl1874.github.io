<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Test Article</title>
    <url>/2020/05/20/Test-Article/</url>
    <content><![CDATA[<p>This is a test article, weclome subscribe “<a href="https://jinl1874.github.io&quot;" target="_blank" rel="noopener">https://jinl1874.github.io&quot;</a></p>
<p>▶ hexo s<br>INFO Start processing<br>INFO Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop.</p>
]]></content>
      <categories>
        <category>Testing</category>
      </categories>
      <tags>
        <tag>tags</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter 使用简介</title>
    <url>/2020/06/21/Jmeter/</url>
    <content><![CDATA[<h4 id="使用Jmeter测试网页的性能"><a href="#使用Jmeter测试网页的性能" class="headerlink" title="使用Jmeter测试网页的性能"></a>使用Jmeter测试网页的性能</h4><ol>
<li><p>打开Jmeter</p>
</li>
<li><p>添加测试线程组<br>右键 <code>Test Plan</code> $\rightarrow$ <code>Add</code> $\rightarrow$ <code>Threads(Users)</code> $\rightarrow$ <code>Thread Group</code>。</p>
<p> <img src="http://image.jinl1874.xyz/img/20200621101959.png" alt="添加测试线程组"></p>
</li>
<li><p>添加Http请求<br>右键<code>Thread Group</code> $\rightarrow$ <code>Add</code> $\rightarrow$ <code>Samper</code> $\rightarrow$ <code>HTTP Request</code>。</p>
<p><img src="http://image.jinl1874.xyz/img/20200621102456.png" alt="添加http request"></p>
<p>结果：<br><img src="http://image.jinl1874.xyz/img/20200621102807.png" alt="result"></p>
</li>
<li><p>添加观察树<br>右键 <code>Test Plan</code> $\rightarrow$ <code>Add</code> $\rightarrow$ <code>Listener</code> $\rightarrow$ <code>View Result Tree</code>。<br><img src="http://image.jinl1874.xyz/img/20200621110646.png" alt="观察树"></p>
</li>
<li><p>测试<br>点击<code>HTTP Request</code>，在<code>path</code>项输入一个网址，例如 <a href="https://www.zhihu.com/" target="_blank" rel="noopener">https://www.zhihu.com/</a> ，然后点击<code>run</code>。<br> 然后点击<code>View Result Tree</code>，就会出现以下结果：<br> <img src="http://image.jinl1874.xyz/img/20200621140400.png" alt=""></p>
</li>
<li><p>集合点<br>右键<code>Thread Group</code> $\rightarrow$ <code>Add</code> $\rightarrow$ <code>Timer</code> $\rightarrow$ <code>Synchronizing Timer</code>。<br>第一个变量代表的是线程数量。<br>第二个变量代表的是结束的时间，当时间达到一个段后，所有的线程都会被释放。</p>
</li>
</ol>
<h3 id="Thread-Group变量"><a href="#Thread-Group变量" class="headerlink" title="Thread Group变量"></a>Thread Group变量</h3><ol>
<li>Number of Thread(users):  指模拟的用户数。<br>例子：如果要模拟一百个人，那么输入一百即可。</li>
<li>Ramp-Up Period(in seconds)：虚拟用户增长时长。<br> 例子：测试一个考勤系统，登录的时候不是所有人一起登陆，而是有一个时间点是大家一起登陆的。比如是八点到九点这一段时间登录的，时长就是3600秒。但不需要设置这么大的数</li>
<li>Loop Count：一个虚拟用户所需要做的测试数。如果把<code>Infinite</code>勾上的话，那么运行的时候是永不停止的，除非手动强制停止。</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>jmeter</tag>
      </tags>
  </entry>
  <entry>
    <title>使用自定义域名后出现“404There isn&#39;t a GitHub Pages site here”解决方法</title>
    <url>/2020/05/22/blog-problem-0/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul>
<li>每次将新文章使用“hexo d”推送后，再打开浏览器就会显示“404There isn’t a GitHub Pages site here”这个错误。</li>
</ul>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul>
<li>我们在自定义域名之前会在下图里“Custom domain”，<br><img src="http://image.jinl1874.xyz/img/blog_problem.png" alt="setting"></li>
<li>点击“save”后，仓库的根目录会生成一个“CNAME”文件，<br><img src="http://image.jinl1874.xyz/img/blog_problem_2.png" alt=""></li>
<li>但是本地的“public”目录里面并没有这个文件，所以更新会删除这个文件，就会导致访问失败。</li>
</ul>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul>
<li>在hexo的source文件夹下新建一个CNAME文件，内容如下。这样使用<code>hexo generate</code>就会在public目录生成CNAME文件了，这样推送过去后就不会删除了。<br><img src="http://image.jinl1874.xyz/img/20200522235649.png" alt="solve"></li>
<li>添加文件后，重新生成推送后，问题就迎刃而解了。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p>欢迎访问个人博客主页 <a href="https://jinl1874.github.io" target="_blank" rel="noopener">jinl1874</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Problem</category>
      </categories>
      <tags>
        <tag>hexo, blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用Hexo和GithubPage免费搭建博客网站</title>
    <url>/2020/05/21/hexo-0/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果已经安装了下面两个软件，那么可以直接安装Hexo了。</p>
<h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">安装node</a>，也可以去node.js中文网<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">下载</a></p>
<blockquote>
<p>注意：windowns 用户要把 “Add to Path” 勾选上</p>
</blockquote>
<h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h3><p>Windows: <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载</a><br>MAC: <code>▶ brew install git</code><br>Linux (Ubuntu, Debian)：<code>▶ sudo apt-get install git-core</code><br>Linux (Fedora, Red Hat, CentOS)：<code>▶ sudo yum install git-core</code></p>
<h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>上述步骤完成后，就可以进入下一环节——生成项目文件了。</p>
<h2 id="建成"><a href="#建成" class="headerlink" title="建成"></a>建成</h2><h3 id="1-生成"><a href="#1-生成" class="headerlink" title="1. 生成"></a>1. 生成</h3><ul>
<li>打开cmd或者powershell，进入要放置文件的目录，再生成目录和博客文件。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">▶ hexo init blog(自定义)</span><br></pre></td></tr></table></figure></li>
<li>进入对应目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ cd blog</span><br></pre></td></tr></table></figure></li>
<li>安装npm <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ npm install</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><ul>
<li>打开 <code>_config.yml</code>文件，来进行详细博客网站配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo # 网站名字</span><br><span class="line">subtitle: &#39;&#39; # 网站副标题</span><br><span class="line">description: &#39;&#39; # 网站描述</span><br><span class="line">keywords:  # 关键词</span><br><span class="line">author: John Doe # 作者名字</span><br><span class="line">language: zh-CN # 语言选择 &quot;zh-CN&quot;</span><br><span class="line">timezone: &#39;Asia&#x2F;Shanghai&#39; # 时区选择 &quot;Asia&#x2F;Shanghai&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：内容与注释之间需要空格隔开<br>更多详细配置可以访问 Hexo 的<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">中文文档</a></p>
</blockquote>
</li>
</ul>
<h3 id="3-写文章"><a href="#3-写文章" class="headerlink" title="3. 写文章"></a>3. 写文章</h3><p>输入<code>▶ hexo new TestArticle</code>，出现下列文字，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Created: D:\web\my_blog\source\_posts\TestArticle.md</span><br></pre></td></tr></table></figure>
<p>说明创建文章成功。<br>打开并编辑该文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: TestArticle</span><br><span class="line">date: 2020-05-21 21:39:56</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">生活就像海洋，只有意志坚强的人才能到达彼岸。</span><br></pre></td></tr></table></figure>

<h3 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h3><ul>
<li><p>生成静态文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ hexo generate</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 248 ms</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: archives&#x2F;index.html</span><br><span class="line">INFO  Generated: fancybox&#x2F;blank.gif</span><br><span class="line">INFO  Generated: fancybox&#x2F;jquery.fancybox.css</span><br><span class="line">INFO  Generated: fancybox&#x2F;jquery.fancybox.pack.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_sprite.png</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_overlay.png</span><br><span class="line">INFO  Generated: fancybox&#x2F;jquery.fancybox.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_loading.gif</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_loading@2x.gif</span><br><span class="line">INFO  Generated: fancybox&#x2F;fancybox_sprite@2x.png</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;fancybox_buttons.png</span><br><span class="line">INFO  Generated: archives&#x2F;2020&#x2F;05&#x2F;index.html</span><br><span class="line">INFO  Generated: archives&#x2F;2020&#x2F;index.html</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;FontAwesome.otf</span><br><span class="line">INFO  Generated: js&#x2F;script.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.css</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-media.js</span><br><span class="line">INFO  Generated: css&#x2F;style.css</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-thumbs.js</span><br><span class="line">INFO  Generated: fancybox&#x2F;helpers&#x2F;jquery.fancybox-buttons.css</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: css&#x2F;fonts&#x2F;fontawesome-webfont.svg</span><br><span class="line">INFO  Generated: 2020&#x2F;05&#x2F;21&#x2F;TestArticle&#x2F;index.html</span><br><span class="line">INFO  Generated: 2020&#x2F;05&#x2F;21&#x2F;hello-world&#x2F;index.html</span><br><span class="line">INFO  Generated: css&#x2F;images&#x2F;banner.jpg</span><br><span class="line">INFO  29 files generated in 978 ms</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该命令可以简写为 <code>hexo g</code></p>
</blockquote>
</li>
<li><p>启动本地服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">▶ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></li>
<li><p>打开浏览器，输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></p>
</li>
<li><p>出现下述画面后，博客可以算是初步完成了。<br><img src="https://s1.ax1x.com/2020/05/21/YqoCcD.png" alt="结果截图"></p>
</li>
</ul>
<blockquote>
<p>更多详细的命令，可以参考官方<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">文档</a></p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>github上有一个免费的 <a href="https://pages.github.com/" target="_blank" rel="noopener">GithubPages</a> 供大家使用。</p>
<blockquote>
<p>Websites for you and your projects.</p>
</blockquote>
<h3 id="1-仓库"><a href="#1-仓库" class="headerlink" title="1. 仓库"></a>1. 仓库</h3><ul>
<li>打开<a href="https://github.com/" target="_blank" rel="noopener">github</a>注册账号。</li>
<li>新建一个 Repository，仓库名为 <code>yourname.github.io</code>，例如 <code>jinl1874.github.io</code>，</li>
<li>“Description”选填，</li>
<li>勾选”Initialize this repository with a README”，</li>
<li>最后点击”Create repository”。</li>
<li>点击仓库左边的Settings，把<code>yourname.github.io</code>填进”Repository name”，最后点击”Rename”。</li>
</ul>
<h3 id="2-连接"><a href="#2-连接" class="headerlink" title="2. 连接"></a>2. 连接</h3><p><em>将本地git与github连接起来</em></p>
<ul>
<li>创建SSH Key<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把上面的邮件地址换成你自己的邮件地址，然后一直回车</p>
</blockquote>
</li>
<li>进入你的主目录[C://Users//xxx]，勾选查看隐藏文件，找到<code>.ssh</code>目录，用记事本打开<code>id_rsa.pub</code>，复制全部内容。</li>
<li>打开github的”Settings”，点击”SSH and GPG keys”，再”New SSH key”，起一个名字，然后把刚才复制的内容放在key里面，最后点击”Add SSH key”。</li>
<li>这样，你的git就与远程仓库github连接起来了。</li>
</ul>
<h3 id="3-上线"><a href="#3-上线" class="headerlink" title="3. 上线"></a>3. 上线</h3><ul>
<li><p>安装 <code>hexo-deployer-git</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ npm install hexo-deployer-git --save</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.3 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">+ hexo-deployer-git@2.1.0</span><br><span class="line">added 1 package from 1 contributor in 2.588s</span><br><span class="line"></span><br><span class="line">5 packages are looking for funding</span><br><span class="line">  run &#96;npm fund&#96; for details</span><br></pre></td></tr></table></figure></li>
<li><p>更改配置，打开<code>_config.yml</code>，找到deploy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; # https:&#x2F;&#x2F;github.com&#x2F;jinl1874&#x2F;jinl1874.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>hexo deploy</code>(可简化为<code>hexo d</code>)，打开浏览器，输入(yourname.github.io)即可访问网站。</p>
</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><ul>
<li>写好文章后使用下面两条命令进行发表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g # 生成静态页面</span><br><span class="line">hexo d # 同步到github page</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><h3 id="1-使用自己的域名"><a href="#1-使用自己的域名" class="headerlink" title="1. 使用自己的域名"></a>1. 使用自己的域名</h3><ul>
<li>前往阿里云或者腾讯云注册自己的域名。</li>
<li>在<code>yourname.github.io</code>的setting里，找到”Custom domain”，将其更改为你的域名后保存。<br><img src="https://raw.githubusercontent.com/jinl1874/image/master/github.png" alt="githubPage"></li>
<li>到域名控制台上，找到域名列表点击解析设置，添加两个CNAME类型即可。<br><img src="https://s1.ax1x.com/2020/05/21/YL9TdP.png" alt="cname"></li>
</ul>
<h3 id="2-使用next主题"><a href="#2-使用next主题" class="headerlink" title="2. 使用next主题"></a>2. 使用next主题</h3><ul>
<li><p>下载安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">▶ cd your-hexo-site</span><br><span class="line">▶ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开站点<code>_config.yml</code>，找到<code>theme</code>字段，并更改为next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置布局。打开主题配置文件<code>_config.yml</code>（与上个<code>_config.yml</code>不同），设置 Scheme</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line"># scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">#scheme: Pisces # 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">scheme: Gemini # 个人更喜欢双栏分割</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置菜单<br>把home, categories, archives, tags, schedule,以及about留下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || fa fa-home</span><br><span class="line">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class="line">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class="line">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class="line">  schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class="line">  # sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class="line">  # commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br></pre></td></tr></table></figure>
<p>添加对应的页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page archives</span><br><span class="line">hexo new page cabout</span><br><span class="line">hexo new page schedule</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>更多next主题配置请访问next<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
<p>欢迎访问个人博客主页<a href="https://jinl1874.github.io" target="_blank" rel="noopener">jinl1874</a></p>
]]></content>
      <categories>
        <category>BlogBuild</category>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>图片转为PDF文件的几种方法</title>
    <url>/2020/06/30/img-to-pdf/</url>
    <content><![CDATA[<blockquote>
<p>最近下载《Death Note》漫画，只是只有图片，想了想还转为 PDF 比较好看，经过一番查找，找到了几种方法。</p>
</blockquote>
<h4 id="1-系统自带的打印为-PDF-文件"><a href="#1-系统自带的打印为-PDF-文件" class="headerlink" title="1. 系统自带的打印为 PDF 文件"></a>1. 系统自带的打印为 PDF 文件</h4><p>具体操作：选择好图片 -&gt; 右键 -&gt; 打印 -&gt; 选择大小为 A4 纸 -&gt; 打印。<br>优点：简单，并且不用安装任何软件。<br>缺点：图片的大小会改变，不能展示原来的图片。</p>
<h4 id="2-SanPDF"><a href="#2-SanPDF" class="headerlink" title="2. SanPDF"></a>2. SanPDF</h4><p>一个专业搞 PDF、WORD、EXCEL 之间转换以及操作的软件。<br>具体操作：去<a href="https://www.sanpdf.com/" target="_blank" rel="noopener">官网</a>下载安装，可以把安装目录放在 C 盘以外的盘。安装后打开，选择图片转 PDF，然后添加文件，再点击右上角的生成 pdf 即可在图片所在目录找到 PDF 文件。<br><img src="https://pic4.zhimg.com/80/v2-5d3facfd8a47d609b034dfb45649554b.png" alt="Image"><br>生成的 pdf 如图所示:<br><img src="https://pic4.zhimg.com/80/v2-dca7e5275bae0c6cb21925d34c92c604.png" alt="Image"><br>优点：图片是原生大小，亦是原生质量，比较清晰。此软件还可以操作其它诸如 word 与 pdf 互转、pdf 转图片等操作，是个难得的好软件。<br>缺点：是付费软件，不过可以绿色软件下载。</p>
<h4 id="3-使用-python-里的-reportlab-生成-pdf"><a href="#3-使用-python-里的-reportlab-生成-pdf" class="headerlink" title="3. 使用 python 里的 reportlab 生成 pdf"></a>3. 使用 python 里的 <code>reportlab</code> 生成 pdf</h4><ul>
<li>首先需要安装<code>reportlab</code>库，如果你的电脑已经安装了 pip，那么只需一条<code>pip install reportlab</code>命令即可。</li>
<li>以下是 python 图片转为 pdf 的代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> reportlab.lib.pagesizes <span class="keyword">import</span> A4, portrait, landscape</span><br><span class="line"><span class="keyword">from</span> reportlab.pdfgen <span class="keyword">import</span> canvas</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_images_to_pdf</span><span class="params">(img_path, pdf_path)</span>:</span></span><br><span class="line">    pages = <span class="number">0</span></span><br><span class="line">    (w, h) = portrait(A4)</span><br><span class="line">    c = canvas.Canvas(pdf_path, pagesize=portrait(A4))</span><br><span class="line">    l = os.listdir(img_path)</span><br><span class="line">    l.sort(key=<span class="keyword">lambda</span> x: int(x[:<span class="number">-4</span>]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        f = img_path + os.sep + str(i)</span><br><span class="line">        c.drawImage(f, <span class="number">0</span>, <span class="number">0</span>, w, h)</span><br><span class="line">        c.showPage()</span><br><span class="line">        pages = pages + <span class="number">1</span></span><br><span class="line">    c.save()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path = <span class="string">r"D://web//script//pxtt-118"</span></span><br><span class="line">pdf_path = <span class="string">r"D://web//script//pdf//pxtt-118.pdf"</span></span><br><span class="line"></span><br><span class="line">convert_images_to_pdf(path, pdf_path)</span><br></pre></td></tr></table></figure>

<p>将上面的 path 改为图片的目录路径，pdf_path 改为具体到文件名的路径。注意图片目录路径不能包含除图片外的文件，否则会报错。</p>
<p>优点：同上面系统操作 pdf。<br>缺点：很麻烦。</p>
<p>欢迎访问我的<a href="https://jinl1874.xyz">博客网站</a>。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>Other</category>
      </categories>
      <tags>
        <tag>img</tag>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取芝士漫画里的图片并转为pdf</title>
    <url>/2020/06/15/sipder-1/</url>
    <content><![CDATA[<blockquote>
<p>最近想找点漫画看，发现<a href="https://manhua.zsh8.com/" target="_blank" rel="noopener">芝士漫画</a>这个平台不错，于是就想着下载来看。</p>
</blockquote>
<h3 id="安装-python"><a href="#安装-python" class="headerlink" title="安装 python"></a>安装 python</h3><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">下载 python</a><br>下载好 python 安装包，安装时一路 next 过去，注意勾上“add to path”(一般是默认勾选的)。</p>
<h3 id="安装所需的模块"><a href="#安装所需的模块" class="headerlink" title="安装所需的模块"></a>安装所需的模块</h3><p>本次的爬虫使用 requests 模块获取数据，再用 xpath 语法解析代码。<br>需要的模块包括 requests，lxml，reportlab。<br>使用 pip 安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install lxml</span><br><span class="line">pip install reportlab</span><br></pre></td></tr></table></figure>

<h3 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h3><ol>
<li>新建一个 python 文件</li>
<li>导入相应的模块</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import io</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">from lxml import etree</span><br><span class="line">from reportlab.lib.pagesizes import A4, portrait, landscape</span><br><span class="line">from reportlab.pdfgen import canvas</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>定义全局变量</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">headers &#x3D; &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko&#x2F;20100101 Firefox&#x2F;76.0&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 默认url</span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;pxtt&#x2F;pxtt-040&#x2F;91864.html&quot;</span><br><span class="line"></span><br><span class="line"># 解析出url中的章节名</span><br><span class="line">re_object &#x3D; re.match(</span><br><span class="line">    &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;.*?&#x2F;(.*?)&#x2F;.*?html&quot;, url)</span><br><span class="line">chapter &#x3D; re_object.group(1)</span><br><span class="line"></span><br><span class="line"># 文件当前目录</span><br><span class="line">current_dir &#x3D; os.getcwd()</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><p>定义方法</p>
<ul>
<li>get_text()：得到访问返回的资源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def get_text(url):</span><br><span class="line">    response &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure>

<ul>
<li>parse_text(text)：分析文档，保存图片，并得到下一章的 url</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def parse_text(text):</span><br><span class="line">    # 建立解析</span><br><span class="line">    html &#x3D; etree.HTML(text, etree.HTMLParser())</span><br><span class="line">    # 获取漫画图片所有的链接</span><br><span class="line">    links &#x3D; html.xpath(&quot;&#x2F;&#x2F;div[@id&#x3D;&#39;gallery-1&#39;]&#x2F;&#x2F;dt&#x2F;a&#x2F;@href&quot;)</span><br><span class="line">    for i, link in enumerate(links):</span><br><span class="line">        save_image(link, i)</span><br><span class="line">        # 降低访问的速度，防止被识别为机器人</span><br><span class="line">        time.sleep(15)</span><br><span class="line">        print(&quot;完成&quot;, i, &quot;个......&quot;)</span><br><span class="line">    print(&quot;已完成&quot;, chapter, &quot;的下载!&quot;)</span><br><span class="line"></span><br><span class="line">    #　在第一章的时候只有一个next_chapter链接</span><br><span class="line">    try:</span><br><span class="line">        next_chapter &#x3D; html.xpath(</span><br><span class="line">            &quot;&#x2F;&#x2F;div[@class&#x3D;&#39;fusion-single-navigation-wrapper&#39;]&#x2F;a&#x2F;@href&quot;)[1]</span><br><span class="line">    except Exception as e:</span><br><span class="line">        next_chapter &#x3D; html.xpath(</span><br><span class="line">            &quot;&#x2F;&#x2F;div[@class&#x3D;&#39;fusion-single-navigation-wrapper&#39;]&#x2F;a&#x2F;@href&quot;)[0]</span><br><span class="line">        return next_chapter</span><br><span class="line">    return next_chapter</span><br></pre></td></tr></table></figure>

<ul>
<li>save_image(link, index): 访问得到的图片链接，并保存在本地</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def save_image(link, index):</span><br><span class="line">    read &#x3D; requests.get(link)</span><br><span class="line">    # 当前文件夹的加上章节名形成新的文件夹</span><br><span class="line">    dir_ &#x3D; current_dir + &#39;\\&#39; + chapter</span><br><span class="line">    # 创建文件夹</span><br><span class="line">    if not os.path.exists(dir_):</span><br><span class="line">        os.makedirs(dir_)</span><br><span class="line">    # 保存图片</span><br><span class="line">    with open(dir_ + &#39;\\&#123;&#125;&#39;.format(str(index)+&quot;.jpg&quot;), &#39;wb&#39;) as fp:</span><br><span class="line">        fp.write(read.content)</span><br><span class="line">        fp.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>convert_images_to_pdf(img_path, pdf_path)：根据图片的文件夹以及 pdf 文件夹加上文件名来生成 pdf 文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def convert_images_to_pdf(img_path, pdf_path):</span><br><span class="line">    pages &#x3D; 0</span><br><span class="line">    (w, h) &#x3D; portrait(A4)</span><br><span class="line">    c &#x3D; canvas.Canvas(pdf_path, pagesize&#x3D;portrait(A4))</span><br><span class="line">    l &#x3D; os.listdir(img_path)</span><br><span class="line">    l.sort(key&#x3D;lambda x: int(x[:-4]))</span><br><span class="line">    for i in l:</span><br><span class="line">        f &#x3D; img_path + os.sep + str(i)</span><br><span class="line">        c.drawImage(f, 0, 0, w, h)</span><br><span class="line">        c.showPage()</span><br><span class="line">        pages &#x3D; pages + 1</span><br><span class="line">    c.save()</span><br></pre></td></tr></table></figure>

<ul>
<li>begin()：开始，并更新全局变量名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def begin():</span><br><span class="line">    global url</span><br><span class="line">    global re_object</span><br><span class="line">    global chapter</span><br><span class="line">    local_url &#x3D; input(</span><br><span class="line">        &quot;输入要下载的章节url(例: https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;pxtt&#x2F;pxtt-041&#x2F;93181.html)\n&gt;&gt;&gt;&quot;)</span><br><span class="line">    # 判断是否符合url格式</span><br><span class="line">    re_object &#x3D; re.match(</span><br><span class="line">        &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;.*?&#x2F;(.*?)&#x2F;.*?html&quot;, local_url)</span><br><span class="line">    if (re_object):</span><br><span class="line">        url &#x3D; local_url</span><br><span class="line">        # 更新章节名</span><br><span class="line">        re_object &#x3D; re.match(</span><br><span class="line">            &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;.*?&#x2F;(.*?)&#x2F;.*?html&quot;, url)</span><br><span class="line">        chapter &#x3D; re_object.group(1)</span><br><span class="line">        print(&quot;即将开始.....&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;输入错误！将使用默认链接！\n&quot;)</span><br></pre></td></tr></table></figure>

<ul>
<li>main()：主函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    begin()</span><br><span class="line">    boolean &#x3D; &quot;y&quot;</span><br><span class="line">    count &#x3D; 0</span><br><span class="line">    # 保存pdf的文件夹</span><br><span class="line">    if not os.path.exists(current_dir + &#39;\\pdf\\&#39;):</span><br><span class="line">        os.makedirs(current_dir + &#39;\\pdf\\&#39;)</span><br><span class="line">    while(boolean &#x3D;&#x3D; &quot;y&quot;):</span><br><span class="line">        text &#x3D; get_text(url).text</span><br><span class="line">        next_chapter &#x3D; parse_text(text)</span><br><span class="line"></span><br><span class="line">        img_path &#x3D; current_dir + &#39;\\&#39; + chapter</span><br><span class="line">        pdf_path &#x3D; current_dir + &#39;\\pdf\\&#39; + chapter + &#39;.pdf&#39;</span><br><span class="line">        #　有些图片是错误，会导致无法生成pdf文件。</span><br><span class="line">        try:</span><br><span class="line">            convert_images_to_pdf(img_path, pdf_path)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">        re_object &#x3D; re.match(</span><br><span class="line">            &quot;https:&#x2F;&#x2F;manhua.zsh8.com&#x2F;.*?&#x2F;(.*?)&#x2F;.*?html&quot;, next_chapter)</span><br><span class="line">        chapter &#x3D; re_object.group(1)</span><br><span class="line">        print(&quot;下一章节：&quot;, chapter)</span><br><span class="line">        count +&#x3D; 1</span><br><span class="line">        print(count)</span><br><span class="line">        #　下载章节的数目，可根据自己需要更改</span><br><span class="line">        if (count &gt; 37):</span><br><span class="line">            break</span><br><span class="line">        url &#x3D; next_chapter</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>直接在终端运行 python 文件，等待一段时间，就会在 python 文件的当前目录下生成文件。<br><img src="http://image.jinl1874.xyz/img/20200615222857.png" alt="文件夹"><br>文件夹里的图片：<br><img src="http://image.jinl1874.xyz/img/20200615222947.png" alt="图片"><br>pdf 文件：<br><img src="http://image.jinl1874.xyz/img/20200615223024.png" alt="pdf"></p>
<p>完整代码可参考我的<a href="https://github.com/jinl1874/spider" target="_blank" rel="noopener">github 库</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>安装并使用IDM(Internet Download Manager)</title>
    <url>/2020/06/28/use-idm/</url>
    <content><![CDATA[<h4 id="IDM-是什么？"><a href="#IDM-是什么？" class="headerlink" title="IDM 是什么？"></a>IDM 是什么？</h4><blockquote>
<p>Internet Download Manager（简称 IDM）是一个用于 Windows 系统的下载管理器。<br>IDM 可以让用户自动下载某些类型的文件，可将文件划分为多个下载点以更快下载，并列出最近的下载，方便存取文件。相对于其他下载管理器，具有独特的动态档案分割技术。<br>其优点在于，能分析下载地址中的实际地址，但若地址无效时则跳换成失效网页，当地址重新有效而无法恢复成原来的地址。<br>而缺点在于，必须设置分段的临时文件存放的磁盘位置，下载完成后再自动合并成一个完整的文件，同时删除临时文件（这种做法不同于其他下载软件预先分配一整块磁盘空间）。所以，下载的如果是机密文件，就容易被数据恢复软件恢复，造成安全隐患。<br>– 摘自<a href="https://zh.wikipedia.org/zh-hans/Internet_Download_Manager" target="_blank" rel="noopener">维基百科</a></p>
</blockquote>
<p>通俗来讲就是一个优秀的下载工具。</p>
<h4 id="为什么使用-IDM"><a href="#为什么使用-IDM" class="headerlink" title="为什么使用 IDM"></a>为什么使用 IDM</h4><p>因为 IDM 使用的是多线程下载，所以比浏览器自带的下载要快很多。<br>并且 IDM 其它的功能：</p>
<ul>
<li>下载百度网盘；</li>
<li>下载 BIliBili、Youtube 等主流视频网站以及几乎所有的盗版视频网站的视频。</li>
<li>下载文件自动分类</li>
</ul>
<h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><ol>
<li>这是个收费软件，可以去<a href="https://www.internetdownloadmanager.com/" target="_blank" rel="noopener">官网</a>购买下载。</li>
<li>也可使用绿色版：<br><a href="https://pan.baidu.com/s/1o_QEqKeSZLFKu9WQToo-8Q" target="_blank" rel="noopener">网盘地址</a><br>提取码：jinl<ul>
<li>下载上述文件后，提取到一个纯英文目录（养好安装文件都放在纯英文目录的习惯）。</li>
<li>打开其文件目录，点击<code>绿化.bat</code>文件。<small>// 不执行这一步的话浏览器无法调用 IDM 下载</small></li>
</ul>
</li>
</ol>
<h4 id="推荐配置"><a href="#推荐配置" class="headerlink" title="推荐配置"></a>推荐配置</h4><ul>
<li>常规<br><img src="http://image.jinl1874.xyz/img/20200629000033.png" alt="image"></li>
<li>连接<br>把最大连接数改为 32(虽然一般不会用到这么多）。</li>
<li>代理服务器<br>如果你的电脑已经挂了代理，并希望下载 Youtube 等网站的东西，可选择切换为<code>使用系统代理</code>。</li>
<li>其它的保持默认即可。</li>
</ul>
<h4 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h4><ul>
<li>Firefox：打开浏览器$\rightarrow$打开 Firefox 附加组件$\rightarrow$搜索 idm$\rightarrow$点进第一个搜索结果安装。</li>
<li>Chrome：打开浏览器$\rightarrow$打开 Chrome 网上应用$\rightarrow$搜索 idm$\rightarrow$点进第一个搜索结果安装。<br><small>Chrome 需要额外配置：右上三点$\rightarrow$更多工具$\rightarrow$扩展$\rightarrow$<em>IDM Integration Module</em>$\rightarrow$详细信息$\rightarrow$打开允许访问文件网址。</small></li>
<li>其它浏览器：同上</li>
</ul>
<p>配置好浏览器后，以后下载文件就是自动调用 IDM 下载了。</p>
<h4 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h4><p>当浏览器开打含有视频播放的网页时，视视屏框的右上角会出现一个悬浮条，直接点击下载即可。<br><img src="http://image.jinl1874.xyz/img/20200629005318.png" alt=""><br>注意：</p>
<ol>
<li>下载优酷的官方上传的版权视频时，会下载到一个无法解析的.ts 文件。</li>
<li>当 B 站的使用 HTML5 播放器时，下载的 B 站视频没有声音，此时使用 Flash 播放器即可。Flash 就要淘汰了怎么办？可以在 Chrome 浏览下载一款名为“B 站下载助手”的插件。</li>
</ol>
<h4 id="下载百度网盘的文件"><a href="#下载百度网盘的文件" class="headerlink" title="下载百度网盘的文件"></a>下载百度网盘的文件</h4><ol>
<li>首先下载插件<a href="http://pan.newday.me/" target="_blank" rel="noopener">网盘助手</a>。<br>这个插件可以直接生成直链，而 IDM 需要直链才能下载。除此之外，此插件还有很多功能，如自动填充提取码等，就不一一赘述了。</li>
<li>要下载网盘里的文件，首先需要将文件保存在自己的网盘里。在要下载的文件前打上勾，这时上方就会出现<code>生成链接</code>的选项$\downarrow$。<br><img src="http://image.jinl1874.xyz/img/20200629011751.png" alt="生成链接"></li>
<li>点击后会出现下载直链$\downarrow$<br><img src="http://image.jinl1874.xyz/img/20200629012103.png" alt="直链"></li>
<li>右键该链接，选择 IDM 下载。<br><img src="http://image.jinl1874.xyz/img/20200629012412.png" alt="idm"></li>
</ol>
<p>注意：如果出现 403、401 等错误，可以点击修改步骤三的里的应用 ID，一般改为<code>778750</code>即可。</p>
<hr>
<p>以上就是全部内容，欢迎访问个人<a href="https://jinl1874.xyz">博客</a>。</p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>使用七牛云和PicGo来创建自己的图床</title>
    <url>/2020/05/22/qiniuImage/</url>
    <content><![CDATA[<blockquote>
<p>最近搭了个博客，就有较大放置图片的需求，于是就想搭了个图床。<br>其它的图床不是要收费就是使用体验非常差，经常出现上传错误。而七牛云有10G的免费空间，对个人用户而言足够了。再加上PicGo的使用，能很方便能上传图户并获取链接。</p>
</blockquote>
<hr>
<h3 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h3><p>七牛云，PicGo，备案好的域名。</p>
<h4 id="1-注册七牛云"><a href="#1-注册七牛云" class="headerlink" title="1. 注册七牛云"></a>1. 注册七牛云</h4><ul>
<li>打开<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>注册账号，进行个人账号认证。需要上传身份，有了支付宝的认证也不需要人工审核了，上传身份后就认证成功了。<h4 id="2-创建空间"><a href="#2-创建空间" class="headerlink" title="2. 创建空间"></a>2. 创建空间</h4></li>
<li>管理控制台 $\rightarrow$ 对象储存 $\rightarrow$ 空间管理 $\rightarrow$ 新建空间。</li>
<li>空间名称随便填，储存区域也可以随便选，访问控制选择公开，点击确定创建。</li>
</ul>
<h4 id="3-注册2级域名"><a href="#3-注册2级域名" class="headerlink" title="3. 注册2级域名"></a>3. 注册2级域名</h4><ul>
<li>域名控制台 $\rightarrow$ 解析 $\rightarrow$ 添加记录 $\rightarrow$<br><img src="http://image.jinl1874.xyz/img/%E6%8E%A7%E5%88%B6.png" alt="域名控制"></li>
<li>记录类型选择CNAME，主机记录按自己喜好，记录值随便填一个能用的。<br><img src="http://image.jinl1874.xyz/img/add_sub_domain.png" alt="域名"></li>
</ul>
<h4 id="4-绑定二级域名"><a href="#4-绑定二级域名" class="headerlink" title="4. 绑定二级域名"></a>4. 绑定二级域名</h4><ul>
<li><p>空间管理 $\rightarrow$ 域名管理 $\rightarrow$ 绑定域名 $\rightarrow$ 加速域名 $\rightarrow$填入子域名(如 &lt;image.jinl1874.xyz&gt;)。<br><img src="http://image.jinl1874.xyz/img/input_sub_domain.png" alt="填入子域名"></p>
</li>
<li><p>绑定成功后会跳转，复制CNAME的值。</p>
</li>
<li><p>回到域名控制台，修改刚才添加的记录，把CNAME的值放入放进记录值，然后保存。<br><img src="http://image.jinl1874.xyz/img/sub_domain_success.png" alt="成功"></p>
</li>
<li><p>可能会有一段时间的等待，回到域名管理，如果下图红圈出成功，那么七牛云已经创建并绑定成功了。<br><img src="http://image.jinl1874.xyz/img/success.png" alt="sucees"></p>
</li>
</ul>
<h4 id="5-使用PicGO"><a href="#5-使用PicGO" class="headerlink" title="5. 使用PicGO"></a>5. 使用PicGO</h4><ul>
<li><p>推荐下载<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.2.2" target="_blank" rel="noopener">2.22版本</a></p>
</li>
<li><p>安装成功后，打开PicGo设置，拉到最下面，勾选“七牛图床”。</p>
</li>
<li><p>在图床设置，设置七牛图床。<br><img src="http://image.jinl1874.xyz/img/picgo_setting.png" alt="picGoSetting"></p>
</li>
<li><p>打开七牛云，进入密钥管理，复制AK和SK分别填到AccessKey和SecretKey；</p>
</li>
<li><p>存储空间名即是你创建的对象存储的名字</p>
</li>
<li><p>访问地址即你的http://+二级域名（如<a href="http://image.jinl1874.xyz" target="_blank" rel="noopener">http://image.jinl1874.xyz</a>)</p>
</li>
<li><p>存储区域根据下图而填，我的是华南区，所以填Z2。<br><img src="http://image.jinl1874.xyz/img/20200522225637.png" alt="area"></p>
</li>
<li><p>点击确定，建议设为默认图床。</p>
</li>
<li><p>此时已经设置成功，可以在“上传区”上传图片。</p>
</li>
</ul>
<h4 id="到了此处，搭建图床的工作已经完成。"><a href="#到了此处，搭建图床的工作已经完成。" class="headerlink" title="到了此处，搭建图床的工作已经完成。"></a>到了此处，搭建图床的工作已经完成。</h4><p>欢迎访问个人博客主页<a href="jinl1874.github.io">jinl1874</a></p>
]]></content>
      <categories>
        <category>BlogBuild</category>
        <category>Other</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>获取必应首页的壁纸</title>
    <url>/2020/06/01/sipder/</url>
    <content><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol>
<li><p>安装python3</p>
</li>
<li><p>安装 requests、lxml库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install lxml</span><br></pre></td></tr></table></figure>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3></li>
<li><p>导入模块和设置变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://cn.bing.com/'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537."</span></span><br><span class="line">    <span class="string">"36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用requests库请求必应首页的资源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure></li>
<li><p>使用xpath解析出图片的名字与链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用xpath解析得到数据</span></span><br><span class="line">html = etree.HTML(response.text, etree.HTMLParser())</span><br><span class="line"><span class="comment"># 得到图片链接</span></span><br><span class="line">image_url = html.xpath(<span class="string">"//head//link[@id='bgLink']/@href"</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 得到一个名字与版权的字符串</span></span><br><span class="line">filename = html.xpath(<span class="string">"//a[@id='sh_cp']/@title"</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 使用正则表达式去年版权商</span></span><br><span class="line">re_object = re.match(<span class="string">'(.*?)\s.*?\\)'</span>, filename)</span><br><span class="line">filename = re_object[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 因为得到 image_url 是没网址前缀的，所以需要加上</span></span><br><span class="line">pic_url = url + image_url</span><br><span class="line">filename = filename + <span class="string">".jpg"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>生成一个文件夹放置图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前的文件目录</span></span><br><span class="line">current_dir = os.getcwd()</span><br><span class="line">img_dir = current_dir + <span class="string">"\\bing_img"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_dir):</span><br><span class="line">    os.makedirs(img_dir)</span><br></pre></td></tr></table></figure></li>
<li><p>保存图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">read = requests.get(pic_url)</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="keyword">with</span> open(img_dir + <span class="string">'\\&#123;&#125;'</span>.format(filename), <span class="string">'wb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(read.content)</span><br><span class="line">    fp.close()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>在命令行下运行该文件，会得到一个文件夹，图片就放在里面。</p>
<p><a href="https://github.com/jinl1874/spider" target="_blank" rel="noopener">github地址</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 javascript 编写自动填写问卷星的脚本</title>
    <url>/2020/06/30/%E4%BD%BF%E7%94%A8js%E6%93%8D%E4%BD%9C%E9%97%AE%E5%8D%B7%E6%98%9F/</url>
    <content><![CDATA[<h5 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h5><p>最近闲来无事，想来做一个自动填写的问卷星 JS 脚本。</p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>此脚本目前仅支持单选、多选以及填空题。<br>单选、多选采用随机选择的方法，而填空题则需要自己配置填写的内容。<br>具体配置方法为：<br>如果问卷里的第四题是填空题，那么在全局变量<code>config</code>加上一个键值，里面有 id 和 answer 两个键，填上相应的值（第四题即<code>id: 4</code>)即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> config = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">4</span>,</span><br><span class="line">    answer: [<span class="string">"不知道"</span>, <span class="string">"随便吧"</span>, <span class="string">"自学去"</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><p>打开浏览器，进入问卷页面如<a href="https://www.wjx.cn/jq/83481770.aspx" target="_blank" rel="noopener">js 测试</a>。<br>有以下两种方法运行：</p>
<blockquote>
<p>我用的是 Firefox 浏览器，其它浏览器的操作都差不多，可以就是快捷键有区别。</p>
</blockquote>
<ol>
<li>按<code>F12</code>，点击控制台，再把脚本粘贴到文本输入框，再点击上面的<code>运行</code>即可。<br><img src="http://image.jinl1874.xyz/img/20200630132036.png" alt="运行js"></li>
<li>浏览器安装一个名为<code>Violentmonkey</code>即<a href="https://violentmonkey.github.io/get-it/" target="_blank" rel="noopener">暴力猴</a>的脚本插件。安装完成之后，进入问卷页面，点击 violentmonkey 的图标，会出现一个弹框，<br><img src="http://image.jinl1874.xyz/img/20200630133801.png" alt="violentmonkey"><br>再点击其中的<code>+</code>，会出现编辑脚本的页面。<br><img src="http://image.jinl1874.xyz/img/20200630134305.png" alt="edit"><br>将脚本粘贴进去，保存文件，再回到问卷页面刷新，此时脚本即可自动运行。</li>
</ol>
<h5 id="脚本编写思路"><a href="#脚本编写思路" class="headerlink" title="脚本编写思路"></a>脚本编写思路</h5><ol>
<li><p>主体思路，找到所有<code>class=&quot;div_question&quot;</code>的 div，再遍历<code>div</code>，分析每个 div 是什么类型的题目，再选择对应的操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Traverse</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> title_list = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"div_question"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; title_list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> title = title_list[i];</span><br><span class="line">        <span class="keyword">var</span> lies = title.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">        <span class="keyword">var</span> textarea = title.getElementsByTagName(<span class="string">"textarea"</span>);</span><br><span class="line">        <span class="keyword">var</span> lis = [];</span><br><span class="line">        <span class="comment">// 将lies放在数组里</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> kl = <span class="number">0</span>; kl &lt; lies.length; kl++) &#123;</span><br><span class="line">            lis.push(lies[kl]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是选择，那么执行以下操作</span></span><br><span class="line">        <span class="keyword">if</span> (lis.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是多选</span></span><br><span class="line">            <span class="keyword">if</span> (lis[<span class="number">0</span>].getElementsByClassName(<span class="string">'jqCheckbox'</span>).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                multiple_selection(lis);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果是单选</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                single_selection(lis);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是填空题，那么调用对应的处理函数。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (textarea.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            blanks(title, textarea);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是其它，添加相应的操作.....</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"other"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>单选和多选采用随机数算法</p>
<ul>
<li>单选题，直接生成一个随机数，再点击随机数的选项。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理单选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">single_selection</span>(<span class="params">lis</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> random_0 = random_num(lis.length);</span><br><span class="line">    lis[random_0].getElementsByClassName(<span class="string">'jqRadio'</span>)[<span class="number">0</span>].click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>多选题，先随机生成一个要选的选项数，再用一个 for 循环执行。循环里面再生成随机数，接着去点击随机数对应的选项。<br>在随机的情况下，有可能会重复点击选项，导致没有选项选上，这时就需要检测一下有没有选项被选上了，如果没有，那就手动选一个。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理多选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiple_selection</span>(<span class="params">lis</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取随机数</span></span><br><span class="line">    <span class="keyword">var</span> random_0 = random_num(lis.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= random_0; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> random_1 = random_num(lis.length);</span><br><span class="line">        lis[random_1].getElementsByClassName(<span class="string">'jqCheckbox'</span>)[<span class="number">0</span>].click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果选中的全部抵消了，那么就手动加上一个</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = lis[i].getElementsByClassName(<span class="string">"jqChecked"</span>);</span><br><span class="line">        <span class="keyword">if</span> (element.length &gt; <span class="number">0</span>)</span><br><span class="line">            flag = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">        lis[random_0].getElementsByClassName(<span class="string">'jqCheckbox'</span>)[<span class="number">0</span>].click();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>填空题的内容从配置文件里找出，也采用随机填写。<br>先获取题目的 id，然后从<code>config</code>中找到对应的值，再随机选取一个值将其赋值到文本框里。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 填空</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blanks</span>(<span class="params">title, textarea</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前题目的id</span></span><br><span class="line">    <span class="keyword">var</span> id_text = title.getAttribute(<span class="string">"id"</span>);</span><br><span class="line">    <span class="keyword">var</span> re_id = <span class="regexp">/div(\d+)/</span>;</span><br><span class="line">    <span class="keyword">var</span> id = re_id.exec(id_text)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 遍历config里id值为id的answer</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; config.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == config[j].id) &#123;</span><br><span class="line">            textarea[<span class="number">0</span>].innerHTML = config[j].answer[random_num(config[j].answer.length)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重定向到 PC 版网页。<br>由于问卷星手机版的网页与 PC 版相差无几，因此使用正则表达式修改即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将手机版网页转为PC版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">redirect</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> re = <span class="regexp">/(https:\/\/www\.wjx\.cn\/)(m|jq)(.*)g/</span></span><br><span class="line">        <span class="keyword">var</span> obj = re.exec(url);</span><br><span class="line">        <span class="keyword">if</span> (obj[<span class="number">2</span>] == <span class="string">'m'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"redirect now"</span>);</span><br><span class="line">            <span class="built_in">window</span>.location.href = obj[<span class="number">1</span>] + <span class="string">"jq"</span> + obj[<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"do......"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>由于填写完成并提交后会跳转到一个抽奖页面，此时的网址含有问卷页面的 id，因此可以将其抽取出来，重定向到问卷填写页面。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 完成填写重新打开填写界面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">new_wxj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.location.href;</span><br><span class="line">    <span class="comment">//https://www.wjx.cn/wjx/join/complete.aspx?q=83481770&amp;JoinID=106588372552&amp;jidx=1&amp;s=&amp;njqj=1</span></span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/complete\.aspx\?q=(\d+)/</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = re.exec(url);</span><br><span class="line">    <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">"https://www.wjx.cn/jq/"</span> + obj[<span class="number">1</span>] + <span class="string">".aspx"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"no pat"</span>, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>完整代码<a href="https://github.com/jinl1874/Javascript" target="_blank" rel="noopener">在此</a>，<br>欢迎访问我的博客<a href="https://jinl1874.xyz">网站</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 双线布置到2020新版 Coding 和 GithubPage</title>
    <url>/2020/05/23/useCoding/</url>
    <content><![CDATA[<h4 id="为什么使用-Coding"><a href="#为什么使用-Coding" class="headerlink" title="为什么使用 Coding"></a>为什么使用 Coding</h4><p>现在国内访问 github 的速度已经非常慢了，而且百度的爬虫也无法抓取到 github page 上面的内容。<br>而 Coding 类似于 github，也是一个免费的代码托管平台，随便一个仓库都可以用来做静态网页服务，访问速度也还可以。</p>
<p>关于 github page 的使用可以参考我的上一篇博客<a href="https://jinl1874.xyz/2020/05/21/hexo-0/">使用 Hexo 和 GithubPage 免费搭建博客网站</a>。</p>
<h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><ul>
<li>打开<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>，注册账号。</li>
<li>现在 Coding 只能注册团队了，不过五人以下是免费的。团队名称以及域名按自己喜好而填吧。</li>
</ul>
<h4 id="建仓"><a href="#建仓" class="headerlink" title="建仓"></a>建仓</h4><ul>
<li>全部项目 $\rightarrow$ 新建项目 $\rightarrow$ 代码托管项目 $\rightarrow$ 填写名称、标识 $\rightarrow$ 勾选启用 Readme.md 及公开源代码 $\rightarrow$ 完成创建。</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul>
<li>项目设置 $\rightarrow$ 功能开关 $\rightarrow$ 打开持续部署和持续集成<br><img src="http://image.jinl1874.xyz/img/20200523233703.png" alt="项目设置"><br><img src="http://image.jinl1874.xyz/img/20200523233828.png" alt="功能"></li>
<li>持续部署 $\rightarrow$ 静态网站 $\rightarrow$ 立即发布静态网站<br><img src="http://image.jinl1874.xyz/img/20200523234059.png" alt="部署"></li>
<li>填写网站名字 $\rightarrow$ 保存<br><img src="http://image.jinl1874.xyz/img/20200523234300.png" alt="保存"></li>
</ul>
<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><ul>
<li><p>配置好后在静态网站选项里会有一个访问地址，先记好。<br><img src="http://image.jinl1874.xyz/img/20200523234509.png" alt="address"></p>
</li>
<li><p>域名解析控制台 $\rightarrow$ 解析 $\rightarrow$ 修改 github 记录 $\rightarrow$ 解析路线设为境外<br><img src="http://image.jinl1874.xyz/img/20200523235105.png" alt="github"></p>
<blockquote>
<p>两个都记录都要改</p>
</blockquote>
</li>
<li><p>如果你之前在 github 设置了强制 https，那么在修改后，先暂停使用两个 github 记录，否则之后 Coding 申请证书会失败。不过建议还是要暂停一下，免得后面出现问题。</p>
</li>
<li><p>添加两个记录，类型为 CNAME，主机记录分别为@和 www，记录值为刚才得到的访问地址。<br><img src="http://image.jinl1874.xyz/img/20200524000911.png" alt=""><br><img src="http://image.jinl1874.xyz/img/20200524000014.png" alt="添加记录"></p>
</li>
<li><p>回到 Coding，点击右上角的“齿轮设置”，拉到下面“自定义域名”，分别绑定两个域名，如“<a href="http://www.jinl1874.xyz”和“jinl1874.xyz”。" target="_blank" rel="noopener">www.jinl1874.xyz”和“jinl1874.xyz”。</a><br><img src="http://image.jinl1874.xyz/img/20200524000244.png" alt=""></p>
</li>
<li><p>可以选择首选域名，也可以勾选跳转到首先，这样打开网站时地址栏就会默认是那个域名了。</p>
</li>
<li><p>然后就默默地等申请证书成功，几分钟到十几分钟不等。最后显示证书状态为正常就算成功了。<br><img src="http://image.jinl1874.xyz/img/20200524000745.png" alt="证书"></p>
</li>
<li><p>回到域名解析器，恢复 github 的域名解析记录。</p>
</li>
</ul>
<h4 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h4><ul>
<li>进入你的主目录[C://Users//xxx]，勾选查看隐藏文件，找到<code>.ssh</code>目录，用记事本打开<code>id_rsa.pub</code>，复制全部内容。</li>
<li>代码仓库 $\rightarrow$ 设置 $\rightarrow$ 部署公钥 $\rightarrow$ 新建部署公钥 $\rightarrow$ 粘贴到公钥内容 $\rightarrow$ 新建。</li>
</ul>
<h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><ul>
<li>复制 Coding 仓库地址。</li>
<li>打开项目配置文件<code>_config.yml</code>，修改<code>deploy</code>内容。<br><img src="http://image.jinl1874.xyz/img/20200524001602.png" alt="项目"></li>
<li>打开命令行进入 Hexo 所目录，输入<code>▶ hexo g -d</code>。不久会跳出来一个提示输入账号密码的窗口，输入 Coding 的邮箱与密码，无误后会上传代码至仓库。</li>
</ul>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ul>
<li>由于设置的是自动部署，代码上传后就会自动部署。</li>
<li>可以打开浏览器，输入域名查看网站</li>
</ul>
<p>至此，在 Coding 配置 Hexo 已经完成了。</p>
<p>欢迎访问个人博客主页<a href="https://jinl1874.xyz">jinl1874</a></p>
]]></content>
      <categories>
        <category>BlogBuild</category>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 学习笔记（1）：基本语法</title>
    <url>/2020/07/03/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h4><ol>
<li><p>文本编辑器：VSCode<br>去(官网)[<a href="https://code.visualstudio.com/]下载" target="_blank" rel="noopener">https://code.visualstudio.com/]下载</a> vscode，安装时一路点 next，最后在应用商店选择下载一个 javascript 的插件，需要中文界面的话可以搜索安装”Chinese”插件。</p>
</li>
<li><p>浏览器：Firefox 浏览器（或者 Chrome）。</p>
</li>
<li><p>js 的位置：Html 的文档里的<code>&lt;script&gt;</code>标签里，或者是别起一个后缀名为”.js”的文件，再在<code>&lt;script&gt;</code>标签的<code>src</code>属性引用它。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"example.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>运行，打开浏览器的开发者模式，进入控制台，然后把代码放在输入框中，再点上面的<code>运行</code>即可运行代码，如图所示。<br><img src="https://pic4.zhimg.com/80/v2-6e5927f48e6c9f6eaac9ad93d2fa8767.png" alt="Image"></p>
</li>
</ol>
<h4 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h4><ol>
<li><p>语句结尾不需加上分号，但建议在末尾加上分号，这是一种良好的习惯。</p>
</li>
<li><p>注释：</p>
<ul>
<li>单句的注释是在语句前加上<code>//</code>，如<code>// console.log(&quot;Test&quot;);</code>；</li>
<li>一段代码的注释是在代码前加上<code>/*</code>，在代码后加上 <code>/*</code>，如：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">alert("document");</span></span><br><span class="line"><span class="comment">console.log("Daoli");</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>变量（variable）</p>
<ul>
<li>变量不需要提前声明，不过提前声明是个良好的编程习惯。下面的语句是声明。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num;</span><br></pre></td></tr></table></figure>

<p>亦可直接声明赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>变量区分大小写；</li>
<li>变量名不允许包含空格或标点符号（除了美元符号<code>$</code>）。</li>
</ul>
</li>
<li><p>数据类型</p>
<ul>
<li>js 是一种弱类型语言，可以在任何时候改变变量的数据类型。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">num = <span class="string">"jinl"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串：由零个或多个字符构成，字符包括但不限于字母、数字、标点符号和空格，字符串必需包括在引号里；</li>
<li>数值：数值不限于是整数，js 可以使用带小数点的数值；</li>
<li>布尔值：只有两种取值：<code>true</code> 或者 <code>false</code>。</li>
</ul>
</li>
<li><p>数组</p>
<ul>
<li>声明：可选给定数组的长度；</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array_0 = <span class="built_in">Array</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> array_1 = <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>赋值：直接<code>array_0[index] = &quot;str&quot;</code>,或者：<code>var array_0 = new(&quot;str1&quot;, &quot;str2&quot;, &quot;str3&quot;, &quot;str4&quot;)</code>；</li>
<li></li>
</ul>
</li>
<li><p>对象</p>
<ul>
<li>与数组类似，对象也使用一个名字表示一组值。每个值是对象的一个属性。前面代表键，冒号后面代表值。</li>
<li>创建方法：使用花括号语法：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test_obj = &#123;</span><br><span class="line">  name: <span class="string">"apple"</span>,</span><br><span class="line">  year: <span class="number">1999</span>,</span><br><span class="line">  eat_or_not: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>访问属性：取对象里的键。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = test_obj(<span class="string">"name"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-操作"><a href="#3-操作" class="headerlink" title="3. 操作"></a>3. 操作</h4><ol>
<li>加减乘除的符咒分别是<code>+-*/</code>，用法与其它的语言一样。</li>
<li>可以使用<code>i++</code>以用<code>i += 1</code>这种方式。</li>
<li>js 的<code>+</code>可以将字符串与数值相连接，连接后是一个更长的字符串，如<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"101"</span> + <span class="number">11</span>;</span><br><span class="line"><span class="comment">// str === "10111"</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-条件语句"><a href="#4-条件语句" class="headerlink" title="4. 条件语句"></a>4. 条件语句</h4><ol>
<li><p>与 C 语的中的用法一致，基本语法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>比较操作符包括：大于(<code>&gt;</code>)、小于(<code>&lt;</code>)、大于等于(<code>&gt;=</code>)、小于等于(<code>&lt;=</code>)以及等于(<code>==</code>)与不等于(<code>!=</code>)。<br>其中要注意的是<code>==</code>不表示一定相等，比如下面的例子中，<code>a</code>与<code>b</code>是相等的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">  alert(<span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候就需要另一种等号(<code>===</code>)，这个等号会进行严格的比较，同理，不相等要比较需要使用(<code>!==</code>)来比较。<br>我个人的建议是，一律使用<code>===</code>与<code>!==</code>。</p>
</li>
<li><p>逻辑操作符<br>与<code>&amp;&amp;</code>，或<code>||</code>，非<code>！</code>。</p>
</li>
</ol>
<h4 id="5-循环"><a href="#5-循环" class="headerlink" title="5. 循环"></a>5. 循环</h4><ol>
<li>while 循环。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line">   statement；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>do-while 循环。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  statement;</span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure></li>
<li>for 循环<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (initial condition; test condition; alter condition) &#123;</span><br><span class="line">    statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
实例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="number">10</span>; index++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h4><ol>
<li>定义示例函数：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test是函数名，params是参数，true是返回值。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  alert(params);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>调用示例：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bool = test(<span class="string">"Test!"</span>);</span><br></pre></td></tr></table></figure></li>
<li>变量作用域：如果函数内使用了 var 对象，那么就被视为局部变量，否则为全局变量。</li>
</ol>
<h4 id="7-对象"><a href="#7-对象" class="headerlink" title="7. 对象"></a>7. 对象</h4><ol>
<li><p>对象是自包含的数据集合，包含在对象的数组可以通过属性(property)和方法(method)来访问。<br>js 里，属性和方法都使用“点”语法来访问。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">object.property;</span><br><span class="line">object.method();</span><br></pre></td></tr></table></figure></li>
<li><p>内建对象：一般使用<code>new</code>的关键字去新建一个对象的实例。如新建一个数组对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 学习笔记（2）</title>
    <url>/2020/07/05/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1. DOM"></a>1. DOM</h4><ol>
<li><p>DOM 的 D 指的是<code>Document</code>（文档），O 指的<code>Object</code>（对象），M 指的是<code>Model</code>（模型）。</p>
</li>
<li><p>JS 的对象包括三种，分别是：</p>
<ul>
<li>用户定义对象，不过在这里很少用。</li>
<li>内建对象，包括 Math、Array 等内建对象。</li>
<li>宿主对象，由浏览器提供的对象。</li>
</ul>
</li>
<li><p>模型，即将文档用“树”图表示出来，如例图所示：<br><img src="https://pic4.zhimg.com/80/v2-908a37eed3d355f8539d8552c8e725f6.png" alt="Image"><br>根元素是 html，有两个子分支 head 与 body，它们处于同一层次，属于兄弟关系，他们也分别有不同的子元素。</p>
</li>
</ol>
<h4 id="2-节点node"><a href="#2-节点node" class="headerlink" title="2. 节点node"></a>2. 节点<code>node</code></h4><p>节点包括元素节点、文本节点和属性结点。</p>
<ol>
<li>元素节点：标签的名字即元素的名字，如文本段落元素的名字是“p”，列表项元素的名字是“li”。</li>
<li>文本节点：<p>元素包含文本，它是一个文本节点。大多文本节点被包括在元素节点的内部。并非所有的元素节点都包含有文本节点，如<code>&lt;ul&gt;&lt;li&gt;Test&lt;/li&gt;&lt;/ul&gt;</code>中的<code>&lt;ul&gt;</code>没有直接包含文本节点，包括其它元素节点，后者即<code>&lt;li&gt;</code>包含文本节点。</li>
<li>属性节点：用来对元素做出更具体的描述。例如几乎所有的元素都有一个 title 属性，可以利用这个属性对包含在元素里的东西做出准确详细的描述：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"test"</span>&gt;</span>此处应有文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
里面的<code>title=&quot;test&quot;</code>是属性节点。</li>
</ol>
<h4 id="3-CSS"><a href="#3-CSS" class="headerlink" title="3. CSS"></a>3. CSS</h4><p>CSS 即层叠样式表，可以告诉浏览器该如何显示文档内容。</p>
<ol>
<li>样式的声明可放在文档中的<code>&lt;head&gt;</code>里，亦可另起一文件。</li>
<li>语法：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">selector</span> &#123;</span><br><span class="line">  <span class="attribute">property</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
例子：<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
这个会自动应用于文档里所有的 p 元素。</li>
<li>id 属性：独一无二的标识符，只可用于一处。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#id</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"id"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>class 属性：可应用于所有元素中。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
使用：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="4-获取节点"><a href="#4-获取节点" class="headerlink" title="4. 获取节点"></a>4. 获取节点</h4><ol>
<li>getElementById，获取具体某个 id 的节点。<br>使用方法:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id_element = <span class="built_in">document</span>.getElementById(id_name);</span><br></pre></td></tr></table></figure></li>
<li>getElementsByClassName，获取所有使用该 class 的节点，返回的是一个数组。注意<code>getElementsByClassName</code>中间的 <code>elements</code>有加<code>s</code>。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> class_element = <span class="built_in">document</span>.getElementsByClassName(class_name);</span><br></pre></td></tr></table></figure></li>
<li>getElementsByTagName，获取所有名为该 TagName 的节点，返回的是一个数组。注意<code>getElementsByTagName</code>中间的 <code>elements</code>有加<code>s</code>。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tag_element = <span class="built_in">document</span>.getElementsByTagName(tag_name);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="5-获取和设置属性"><a href="#5-获取和设置属性" class="headerlink" title="5. 获取和设置属性"></a>5. 获取和设置属性</h4><ol>
<li><p>获取属性：<code>getAttribute</code>，获取想要查询的属性值，参数为查询属性的名字。<br><code>getAttribute</code>不能通过<code>document</code>节点调用，只用被元素节点调用。<br>使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先得到节点值</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="comment">// 再获取其中的属性值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  alert(lis[i].getAttribute(<span class="string">"title"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置属性：<code>setAttribute</code>，设置具体的属性值，参数为属性名字和属性值。同样只用被元素节点调用。<br>使用方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先得到节点值</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="comment">// 再修改其中的属性值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">  alert(lis[i].getAttribute(<span class="string">"title"</span>));</span><br><span class="line">  lis[i].setAttribute(<span class="string">"title"</span>, <span class="string">"li_tag"</span>);</span><br><span class="line">  alert(lis[i].getAttribute(<span class="string">"title"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 学习笔记（3）：图片库</title>
    <url>/2020/07/07/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<h4 id="1-为什么要使用图片库"><a href="#1-为什么要使用图片库" class="headerlink" title="1. 为什么要使用图片库"></a>1. 为什么要使用图片库</h4><p>可以把所有的图片都放到一个网页里，不过当图片过多时，会导致网页体积过大。<br>因此，为每张图片分别创建一个网页的解决方案。<br>使用 js 来伊娃衅片是最佳选择：把整个图片库的浏览链接集中在图片库主页里，当用户点击了这个主页里的某个 图片链接时，才把相应的图片传送过去。</p>
<h4 id="2-准备"><a href="#2-准备" class="headerlink" title="2. 准备"></a>2. 准备</h4><ol>
<li>文件：准备几张图片，放在一个 images 的目录里，再创建一个<code>gallery.html</code>文件，与 images 同目录。</li>
<li>标记：使用无序列表<code>&lt;ul&gt;</code>来标记图片链接，<br>标记清单：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Image Gallery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Snapshots<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span> <span class="attr">title</span>=<span class="string">"a dog east something"</span>&gt;</span> dog <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/follower.jpg"</span> <span class="attr">title</span>=<span class="string">"a follower "</span>&gt;</span>follower<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/part.jpg"</span> <span class="attr">title</span>=<span class="string">"a part here"</span>&gt;</span>part<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/sea.jpg"</span> <span class="attr">title</span>=<span class="string">"the sea "</span>&gt;</span>sea<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/star.jpg"</span> <span class="attr">title</span>=<span class="string">"water star"</span>&gt;</span>star<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-改进"><a href="#3-改进" class="headerlink" title="3. 改进"></a>3. 改进</h4><p>点击某个链接后可以留在当前页面；<br>点击链接后可以看到图片以及可以看到图片清单。</p>
<p>方法：<br>增加一个占位符图片，当没有点时，显示一个默认图片，当点击图片的链接时，拦截网页的默认行为，将图片显示为所点击链接的图片。<br>将<code>&lt;img id=&quot;default&quot; src=&quot;images/default.jpg&quot; alt=&quot;My image gallery&quot;&gt;;</code>插入无序列表后。新建一个名为<code>default</code>的 id 样式表，样式可自定义。<br>显示结果：<br><img src="https://pic4.zhimg.com/80/v2-8a4beab26883ec8160922259ee3da143.png" alt="Image"></p>
<h4 id="4-实现"><a href="#4-实现" class="headerlink" title="4. 实现"></a>4. 实现</h4><ol>
<li><p>代码：要修改占位符的显示，只需将占位符的<code>src</code>属性修改为相对应的图片属性即可，需要使用的 js 方法有<code>getAttribute()</code>和<code>setAttribute()</code>。<br>具体代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// whic_pic 是元素结点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_pic</span>(<span class="params">whic_pic</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取href属性</span></span><br><span class="line">  <span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br><span class="line">  <span class="comment">// 获取默认结点</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">"default"</span>);</span><br><span class="line">  <span class="comment">// 设置属性</span></span><br><span class="line">  placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置属性</span></span><br><span class="line">placeholder.src = source;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用：</p>
<ul>
<li>在同目录下创建一个名为<code>show_pic.js</code>的文件，将上述代码放进去，再在<code>gallery.html</code>的<code>&lt;head&gt;</code>标签里写入<code>&lt;script src=&quot;show_pic.js&quot;&gt;&lt;/script&gt;</code>。</li>
<li>要点击某个链接触发事件时，需要使用<code>onclick</code>事件处理函数。添加事件处理函数的语法是<code>event=&quot;javaScript Statement(s)</code>，所以调用<code>show_pic</code>的方法是：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onclick = <span class="string">"show_pic(this)"</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>拦截网页默认操作：当某个元素添加了事件处理函数后，如果那段 js 代码返回的值是 true，那么 onclick 事件处理函数就认为这个链接被点击了；如果返回的的 false，那么就认为没有被点击。例如<code>onclick=&quot;return false&quot;</code>这个事件处理函数就会被浏览器认为没有点击，那么也不会调用默认的函数了。所以具体的代码为：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onclick = <span class="string">"show_pic(this); return false"</span>;</span><br></pre></td></tr></table></figure>

<p>详细代码为：<br>// 目前只有手动添加</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"a dog east something"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    dog</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/follower.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"a follower "</span></span></span><br><span class="line"><span class="tag">    &gt;</span>follower<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/part.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"a part here"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>part<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/sea.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"the sea "</span></span></span><br><span class="line"><span class="tag">    &gt;</span>sea<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/star.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"water star"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>star<span class="tag">&lt;/<span class="name">a</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在已经完成了图片库，无论点击哪个都不会跳转了。<br><img src="https://pic4.zhimg.com/80/v2-a4bcfbfb4a0f1de277c6e4451b4bbbf9.png" alt="Image"></p>
</li>
</ol>
<h4 id="5-扩展"><a href="#5-扩展" class="headerlink" title="5. 扩展"></a>5. 扩展</h4><blockquote>
<p>添加切换图片时可以显示不同的文本功能。之前在每个 a 属性里都设置了 title 属性，只要用<code>getAttribute</code>函数就可以将其提取出来，然后可以插入到 HTML 文档中。<br>为此需要学习几个新的 Dom 属性。</p>
</blockquote>
<ol>
<li><p>childNodes 属性：在节点树上，这个属性可以获取元素所有的子元素，是一个数组。使用方法：<code>var children = element.childNodes</code>，例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取body节点，因为一个文档只有一个body标签，所以只需取第一个元素即可</span></span><br><span class="line"><span class="keyword">var</span> body_element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 获取子元素</span></span><br><span class="line"><span class="keyword">var</span> body_children = body_element.childNodes;</span><br></pre></td></tr></table></figure>

<p>实测：将以下代码放进<code>show_pic.js</code>里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count_body</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> body_element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> num = body_element.childNodes.length;</span><br><span class="line">  alert(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了使文档加载时使用，再添加<code>window.onload = count_body;</code>到 js 文件里，接着打开文档，弹出计算的所有的 body 子元素属性了。</p>
</li>
<li><p>nodeType 属性<br>body 应该只有 3 个子元素，但是显示的数字却比 3 大，只为文档树的节点类型并非只有元素节点一种。文档里几乎每一样东西都是一个节点，甚至连空格和换行符都是。<br>第一个节点都有 nodeType 属性，nodeType 的值并不是英文，元素节点的 nodeType 是 1，属性节点的值是 2，文本节点的是 3。<br>比如<code>body_elemnt.nodeType</code>的值是 1.</p>
</li>
<li><p>标记添加描述<br>在<code>&lt;img&gt;</code>下添加<code>&lt;p id=&quot;description&quot;&gt;Choose an image&lt;/p&gt;</code>这一段文本节点。</p>
</li>
<li><p>获取该结点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取title属性</span></span><br><span class="line"><span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line"><span class="comment">// 获取p结点</span></span><br><span class="line"><span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>实现文本切换<br>使用 DOM 提供的<code>nodeValue</code>属性，它可以得到和设置节点的值。<br><code>&lt;p&gt;</code>元素本身是<code>nodeValue</code>是一个空值，需要的是<code>&lt;p&gt;</code>子元素包含的值。<br>因此使用方法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">p_element.childNodes[<span class="number">0</span>].nodeValue;</span><br></pre></td></tr></table></figure></li>
<li><p>firstChild 和 lastChild 属性<br>firstChild 是获取节点的第一个元素，lastChild 是获取最后一个元素。<br>即<code>node.childNodes[0] === node.firstChild</code>。<br>使用这两个元素更简洁了。</p>
</li>
<li><p>利用 nodeValue 刷新</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将p元素赋值给nodeValue</span></span><br><span class="line">p_element.firstChild.nodeValue = title;</span><br></pre></td></tr></table></figure>

<p>最终代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// whic_pic 是元素结点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_pic</span>(<span class="params">whic_pic</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取href属性</span></span><br><span class="line">  <span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br><span class="line">  <span class="comment">// 获取默认结点</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">"default"</span>);</span><br><span class="line">  <span class="comment">// 设置属性</span></span><br><span class="line">  placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br><span class="line">  <span class="comment">// 获取title属性</span></span><br><span class="line">  <span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">  <span class="comment">// 获取p结点</span></span><br><span class="line">  <span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br><span class="line">  <span class="comment">// 将p元素赋值给nodeValue</span></span><br><span class="line">  p_element.firstChild.nodeValue = title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>几个新 DOM 属性：</p>
<ul>
<li>childNodes</li>
<li>nodeType</li>
<li>firstChild</li>
<li>lastChild</li>
</ul>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a>。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（4）</title>
    <url>/2020/07/08/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/</url>
    <content><![CDATA[<h3 id="平衡退化"><a href="#平衡退化" class="headerlink" title="平衡退化"></a>平衡退化</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h4><ol>
<li><p>定义：网站的访问者有可能使用不支持 js 的浏览器（虽说现在应该没有了），又或者是禁止网页使用 js（因为弹窗广告），所以需要在浏览器不支持 js 的情况下浏览网站，这就是平稳退化（graceful degradation）。</p>
</li>
<li><p>例子：新窗口打开一个链接，许多电子商务网站的结算页面都有指向服务条款的链接，与其让用户手动点击打开，不如自动打开一个新窗口来显示相关信息。<br>js 使用 window 对象的<code>open()</code>方法来创建新的浏览器窗口。使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url 表示要打开的链接，name 表示是新窗口的名字，方便js调用，features 表示的是新窗口的属性。</span></span><br><span class="line"><span class="built_in">window</span>.open(url, name, features);</span><br></pre></td></tr></table></figure></li>
<li><p>具体应用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop_up</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(url, <span class="string">"pop_up"</span>, <span class="string">"weight=300, height=400"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数不会对网页的访问有任何影响，影响到网页的只有：如何使用此函数。可以使用伪协议（pseudo-protocol)。</p>
</li>
</ol>
<h4 id="2-伪协议"><a href="#2-伪协议" class="headerlink" title="2. 伪协议"></a>2. 伪协议</h4><ol>
<li><p>真协议用来在计算机之间传输数据包，如 HTTP 协议。伪协议使用非标准化协议，可以通过一个链接来调用 js 函数。</p>
</li>
<li><p>具体应用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onclick</span>=<span class="string">"pop_up('https://zhihu.com'); return false;"</span>&gt;</span></span><br><span class="line">  知乎网</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>上述代码同样无法平稳退化。要使得平稳退化，须得在 a 标签的 href 属性加上 url 链接。具体如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"https://zhihu.com"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onclick</span>=<span class="string">"pop_up('https://zhihu.com'); return false;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  知乎网</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简化一下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"https://zhihu.com"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onclick</span>=<span class="string">"pop_up(this.getAttribute('href')); return false;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  知乎网</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更简明的引用方法————<code>this.href</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://zhihu.com"</span> <span class="attr">onclick</span>=<span class="string">"pop_up(this.href); return false;"</span>&gt;</span></span><br><span class="line">  知乎网</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="分离-JavaScript"><a href="#分离-JavaScript" class="headerlink" title="分离 JavaScript"></a>分离 JavaScript</h3><h4 id="1-分离"><a href="#1-分离" class="headerlink" title="1. 分离"></a>1. 分离</h4><ol>
<li><p>使用类似于 CSS 的方法，比如使用下面这个语句来表明“当这个链接点击时，也可以调用<code>pop_up</code>函数”。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://zhihu.com"</span> <span class="attr">class</span>=<span class="string">"pop_up"</span>&gt;</span>知乎网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js 语言不强制事件必须在 HTML 文档上处理，因此可以在外部把事件添加到某个元素上。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.event = action;</span><br></pre></td></tr></table></figure>

<p>可以使用 id 或者 className 或者 TagName 来确定元素，比如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getElementById(id).event = action;</span><br></pre></td></tr></table></figure>

<p>涉及多个元素时，可以用<code>getElementByTagName</code>以及<code>getAttribute</code>把事件添加到特定属性的元素上。<br>具体操作为：</p>
<ul>
<li>先用使用<code>getElementByTagName</code>获取元素数组。</li>
<li>遍历数组。</li>
<li>再根据属性值<code>class==pop_up</code>筛选出那个元素。</li>
<li>把这个链接的<code>href</code>属性值传递给<code>pop_up()</code>函数。</li>
<li>取消这个链接的默认行为。</li>
</ul>
<p>具体代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (links[i].getAttribute(<span class="string">"class"</span>) === <span class="string">"pop_up"</span>) &#123;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      pop_up(<span class="keyword">this</span>.getAttribute(<span class="string">"href"</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要把上述代码存入一个外部 js 文件，就等于把这些操作从 html 分离出来了。</p>
</li>
<li><p>上述代码存入外部文件后，会无法正常运行。<br>因为这个语句的第一语使用了 document 这个对象，js 文件加载的时候文档可能会不完整。所以要等文档全部加载后才能运行，这时可以使用 window.onload 函数，当触发这个函数时，document 对象已经存在。<br>所以最终代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = prepareLinks;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareLinks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (links[i].getAttribute(<span class="string">"class"</span>) === <span class="string">"pop_up"</span>) &#123;</span><br><span class="line">      links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        pop_up(<span class="keyword">this</span>.getAttribute(<span class="string">"href"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="向后兼容"><a href="#向后兼容" class="headerlink" title="向后兼容"></a>向后兼容</h3><pre><code>某些支持js脚本的古老浏览器，也不一定能正常工作。</code></pre><h4 id="1-对象检测-object-detection"><a href="#1-对象检测-object-detection" class="headerlink" title="1. 对象检测(object detection)"></a>1. 对象检测(object detection)</h4><ol>
<li><p>js 万物皆是对象，所以只要判断是否有对应的对象存在即可。</p>
</li>
<li><p>根据条件表达的求值结果，使用<code>if</code>语句来决定应该执行什么操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (method) &#123;</span><br><span class="line">  statements;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如，有一个使用了<code>getElementById()</code>方法的函数，就可以在调用前检查浏览器是否支持这个函数。使用对象检测时，要删掉方法名后面的括号，如果不删掉，测试的是方法的结果，无论方法存不存在。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById)&#123;</span><br><span class="line">   statements using getElementById;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果浏览器不支持方法的话，那么将永远无法调用。</p>
</li>
<li><p>上面使用的方法有一个不足之处是，会增加花括号，多了以后会导致代码阅读困难。<br>改进方法是换一种方式。改为“当不支持这个方法是，就结束”。具体代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!getElementById) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>所以在把 onclick 事件加到链接时，可以加一 if 语来判断浏览器是否支持。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = prepareLinks;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareLinks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementsByTagName) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (links[i].getAttribute(<span class="string">"class"</span>) === <span class="string">"pop_up"</span>) &#123;</span><br><span class="line">      links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        pop_up(<span class="keyword">this</span>.getAttribute(<span class="string">"href"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-嗅探技术"><a href="#2-嗅探技术" class="headerlink" title="2. 嗅探技术"></a>2. 嗅探技术</h4><ol>
<li>定义：指通过提取浏览器供应商提供的信息来解决向后兼容的问题。</li>
<li>理论上可行，不过随着浏览器的发展，这种技术已经被淘汰了。</li>
</ol>
<h3 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h3><h4 id="1-少访问-DOM-和减少标记"><a href="#1-少访问-DOM-和减少标记" class="headerlink" title="1. 少访问 DOM 和减少标记"></a>1. 少访问 DOM 和减少标记</h4><ol>
<li><p>以下面的代码为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>))&#123;</span><br><span class="line">  <span class="keyword">var</span> links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt;links.length; i++)&#123;</span><br><span class="line">    statements......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码可以运行，但相同的操作重复了两次，浪费了性能，所以可以进行优化一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line"><span class="keyword">if</span> (links.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;links.length; i++)&#123;</span><br><span class="line">    statements......</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="2-合并和放置脚本"><a href="#2-合并和放置脚本" class="headerlink" title="2. 合并和放置脚本"></a>2. 合并和放置脚本</h4><ol>
<li>包含脚本的方式是使用外部文件，而不是包在<code>&lt;script&gt;</code>里。并且可以把 funtionA.js、funtionB.js 和 futntionC.js 合并到同一个文件，这样就可以减少加载页面时发送的请求。</li>
<li>把脚本放在<code>&lt;head&gt;</code>标签会有一个问题，位于<code>&lt;head&gt;</code>块中的脚本会导致浏览器无法并行加载其它文件（如图像和其它脚本）。</li>
<li>把<code>&lt;script&gt;</code>标签都放在文档的末尾，<code>&lt;/body&gt;</code>的标记之前，可以使页面变得更快。</li>
</ol>
<h4 id="3-压缩脚本"><a href="#3-压缩脚本" class="headerlink" title="3. 压缩脚本"></a>3. 压缩脚本</h4><ol>
<li>定义：把脚本中不必要的字节，如空格和注释，统统删除，从而达到压缩文件的目的。有的甚至会重写部分代码，使用更短的变量名等。</li>
<li>精简后的代码很难看懂，却能减少文件大小，很多情况下，应该有两版本，一个是工作副本，可以修改并添加注释，一个是精简副本，用于放在站点上。为了区分，一般会在精简版本的文件名上加上 min 字符。</li>
<li>代码压缩工具：<ul>
<li>Douglas Crockford 的 JSMin <a href="http://www.crockford.com/javascript/jsmin.html" target="_blank" rel="noopener">http://www.crockford.com/javascript/jsmin.html</a>;</li>
<li>雅虎的 YUI compressor <a href="http://developer.yahoo.com/yui/compressor" target="_blank" rel="noopener">http://developer.yahoo.com/yui/compressor</a></li>
<li>谷歌的 Closure Compiler <a href="http://closure-compiler.appspot.com/home" target="_blank" rel="noopener">http://closure-compiler.appspot.com/home</a></li>
</ul>
</li>
</ol>
<p>几个 DOM 脚本编辑工作相关的概念和实践：</p>
<ul>
<li>平稳退化</li>
<li>分离 Javascript</li>
<li>向后兼容</li>
<li>性能考虑</li>
</ul>
<blockquote>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>使用多看的Dobby制作精美排版的epub电子书</title>
    <url>/2020/07/08/%E4%BD%BF%E7%94%A8%E5%A4%9A%E7%9C%8B%E7%9A%84Dobby%E5%88%B6%E4%BD%9C%E7%B2%BE%E7%BE%8E%E6%8E%92%E7%89%88%E7%9A%84epub%E7%94%B5%E5%AD%90%E4%B9%A6/</url>
    <content><![CDATA[<h4 id="epub-是什么"><a href="#epub-是什么" class="headerlink" title="epub 是什么"></a>epub 是什么</h4><p>epub 是一种主流书本阅读格式，很多排版好的书本格式都是 epub。<br>epub 是一个压缩包，是类 html 文件、css 文件、配置文件以及字体图片等文件的集合。</p>
<h4 id="为什么使用多看的-Dobby"><a href="#为什么使用多看的-Dobby" class="headerlink" title="为什么使用多看的 Dobby"></a>为什么使用多看的 Dobby</h4><p>有很多软件可以制作 epub 电子书，比如常见的 sigil。dobby 是基于 sigil 开发的，预先设置了一些样式，比如可以制作多看特有的弹注、全屏封面以及一些文字样式与区域样式。<br>优点是操作简单，可以比较容易排版出一个比较精美的电子书，不涉及 html 代码的操作。<br>缺点是不能操作源代码，无法自定义样式，要实现使用这些功能，需要使用其它软件，如 sigil。<br>简单来说，就是简单。</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>以凉宫系列的第一卷《凉宫春日的忧郁》为例。此处下载下面所需的文件：<a href="https://wwa.lanzous.com/b0cqcwbsh" target="_blank" rel="noopener">https://wwa.lanzous.com/b0cqcwbsh</a> 密码:gatu</p>
<ol>
<li>电子书的 txt 文件</li>
<li>书自带的插图</li>
<li>要制作的书的 pdf 或 epub 文件，方便对照。</li>
<li>Dobby 软件<br>蓝奏云链接：<a href="https://wwa.lanzous.com/b0cqcw9da" target="_blank" rel="noopener">https://wwa.lanzous.com/b0cqcw9da</a> 密码:3dfi<br>github release：<a href="https://github.com/jinl1874/e-book/releases/tag/1.0" target="_blank" rel="noopener">https://github.com/jinl1874/e-book/releases/tag/1.0</a><br>下载压缩包后，解压到一个英文目录里，打开里面的<code>DobbyGUI.exe</code>即可使用。</li>
</ol>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><ol>
<li><p>打开 dooby -&gt; 文件 -&gt; 新建 -&gt; 选择小说模板 -&gt; 填写项目名称 -&gt; 点击确定，然后就会跳转到 dobby 首页。<br><img src="https://pic4.zhimg.com/80/v2-d8c6f8572f093f646b17d6f5bc051a19.png" alt="Image"></p>
</li>
<li><p>创建好的项目里面会有一些排版好 xhtml 文件，可以去熟悉一下样式的效果。</p>
</li>
</ol>
<h4 id="排版章节"><a href="#排版章节" class="headerlink" title="排版章节"></a>排版章节</h4><ol>
<li>先把除了<code>copyright.xhml</code>和<code>chapter.xhtml</code>的文件全删掉。</li>
<li>双击<code>chapter.xhml</code>文件，把凉宫的“序曲”文本粘贴上去，然后全选文本，在右边的段落样式里选择“正文宋体”。<br><img src="https://pic4.zhimg.com/80/v2-722f233c4c3c28cd09da5c5c6be04dad.png" alt="Image"></li>
<li>把光标移动到章节名（这里即序曲）那里，在右边选择标题样式，觉得哪个顺眼就选哪个。<br><img src="https://pic4.zhimg.com/80/v2-cd0bea3143d83fcc1515776456ee8a12.png" alt="Image"></li>
<li>检查一下整个章节，如有特殊的文本需要特殊的处理。比如：<ul>
<li>如果有注释的话，在右边的插件工具里找到多看注释，然后把光标移动要注释的词上，填上注释文本，再点击插入即可，记得把原来的注释文本删去；</li>
<li>若有一些信件、电报或者报纸之类的文本，可以选择把段落样式改为引文；</li>
<li>如果存在副章节点的话，可以将其放在章节名下一行，段落样式选择“扉章文字偏右”；</li>
<li>在后记里可以选择使用“引文楷体”。</li>
</ul>
</li>
<li>在左边的“图书浏览器”里右键<code>chapter.xhtml</code>文件，选择新建空白章节，项目会根据右键的文件名，来自动命名递增数字的文件名。比如这样项目就会创建一个<code>chapter1.xhtml</code>文件，如果是在<code>chapter1.xhtml</code>新建，那么创建的文件名就是<code>chapter2.xhtml</code>。</li>
<li>在新建的<code>chapter1.xhtml</code>文件粘贴上下一章的文本，再根据上面的流程走。</li>
<li>直到把所有的章节都排版完成。</li>
</ol>
<blockquote>
<p>记得每做好一个后要（ctrl+s）保存，不然崩溃的时候……</p>
</blockquote>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ol>
<li>添加图片：在左边的图片目录上右键，再点击添加已有文件，把下载好的图片全选上。</li>
<li>设置全屏封面：在文本目录上右键 -&gt; 新增全屏插图页 -&gt; 选择图片 -&gt; 确定。<br><img src="https://pic4.zhimg.com/80/v2-99c12d9c0dccdc51c79674ea8d714838.png" alt="Image"><br>再把这个文件放在顶部位置，并改名<code>cover.xhtml</code>。<br><img src="https://pic4.zhimg.com/80/v2-852940c660c569ecae27e795a88691d8.png" alt="Image"></li>
<li>彩页：新建一个文件，命名为<code>inset_0.xhtml</code>，在右边的插件工具里选择浮层图（可以点开查看大图），样式选择“无”。<br><img src="https://pic4.zhimg.com/80/v2-e2c4133184eed8b0cb41c0026db9043a.png" alt="Image"><br>对照着本书的 epub 文件，按照顺序一个个添加，如果添加不了，就再新建一个文件添加。<br>彩页的位置是在<code>copyright.xhtml</code>文件下面。</li>
<li>插图：同样是对照 epub 文件，按“ctrl+F”调出搜索框，然后搜索插附近的文字，找到插图所在的位置。选择“插件工具”的“随文图”，选择图片插入。<br><img src="https://pic4.zhimg.com/80/v2-031ffa185f2e5dc3de773ba1e810c192.png" alt="Image"><br>一般来说，一章只有一张插图，不过也有特殊的。相继把所有的插图都插入后，就可以进行下一环节————填写版权信息了。</li>
</ol>
<h4 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h4><ol>
<li>在<code>copyright.xhtml</code>文件写上本书的版权信息，包括但不限于作者、书名、译者、ISBN、校对、制作等信息，如果准备的 epub 文件里有，那就直接照抄；如果没有，最好上豆瓣查找，那里的信息比较全。</li>
<li>还可以加上一些免责任声明，比如“仅供个人学习交流，禁止商业用途。下载后请在 24 小时内删除，制作者不负任何责任。转载时，请注明以上信息，尊重翻译者的辛勤劳动。”这一类文本。</li>
<li>段落样式选择“版权信息正文”<br><img src="https://pic4.zhimg.com/80/v2-9ef0dbe75ea949cd989e8c080292b669.png" alt="Image"></li>
</ol>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p>点击左下角的编辑目录，再选择“从标题生成目录”，一般这样就足够了。<br><img src="https://pic4.zhimg.com/80/v2-1a1310c09c903749ecf753529fd86ecd.png" alt="Image"><br>如果有需要添加或者编辑的目录，可以在目录条目那里右键，可选编辑/添加条目。</p>
<h4 id="元数据编辑"><a href="#元数据编辑" class="headerlink" title="元数据编辑"></a>元数据编辑</h4><ol>
<li>菜单栏 -&gt; 导出 -&gt; 编辑元数据 -&gt; 填上对应的信息（版权信息有相应的信息）。<br><img src="https://pic4.zhimg.com/80/v2-77389faf15c7701c4ff97ab577a14a6c.png" alt="Image"></li>
<li>添加基本：可以添加 ISBN、出版日期、简介等信息。<br><img src="https://pic4.zhimg.com/80/v2-377996b3e95c5e2923f73a605dede17a.png" alt="Image"></li>
<li>设置封面：一般是第一张全屏插画图。<br><img src="https://pic4.zhimg.com/80/v2-4d5ba7ed9449563271323dc5c141136d.png" alt="Image"></li>
<li>完成后点击“OK”。</li>
</ol>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><ol>
<li>到了这里，就可以发布 epub 电子书了。</li>
<li>菜单栏 -&gt; 导出 -&gt; 发布电子书。</li>
</ol>
<h4 id="阅读器"><a href="#阅读器" class="headerlink" title="阅读器"></a>阅读器</h4><p>要想获得最好的阅读体验，推荐下载“多看阅读”。</p>
<p>以上就是制作 epub 电子书的流程，里面还有更多的功能，可以慢慢去挖掘。</p>
<blockquote>
<p>欢迎访问个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>epub</tag>
        <tag>read</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（5）：图片库改进</title>
    <url>/2020/07/11/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89/</url>
    <content><![CDATA[<p>审视一下之前的图片库，思考一下：</p>
<h4 id="支持平稳退化？"><a href="#支持平稳退化？" class="headerlink" title="支持平稳退化？"></a>支持平稳退化？</h4><ol>
<li><p>当 js 被禁用后，用户点击链接时会自动调动原来 a 标签的方法，同样可以查看所有的图片，网页的基本功能没有受到损害。</p>
</li>
<li><p>使用伪协仪的话就没戏了。</p>
</li>
</ol>
<h4 id="js-与-html-标记分离吗？"><a href="#js-与-html-标记分离吗？" class="headerlink" title="js 与 html 标记分离吗？"></a>js 与 html 标记分离吗？</h4><ol>
<li><p>不分离，<code>onclick</code>事件直接插在标记文档里。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onclick</span>=<span class="string">"show_pic(this); return false;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">"a dog east something"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    dog</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>为了让浏览器知道与哪些链接有着不一样的行为，可以添加一个<code>class</code>属性：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span> <span class="attr">class</span>=<span class="string">"gallerypic"</span> <span class="attr">title</span>=<span class="string">"a dog east something"</span>&gt;</span></span><br><span class="line">    dog</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是这种方法太麻烦了，可以直接给整个清单设置一个 ID。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"image_gallery"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/dog.jpg"</span> <span class="attr">title</span>=<span class="string">"a dog east something"</span>&gt;</span> dog <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/follower.jpg"</span> <span class="attr">title</span>=<span class="string">"a follower "</span>&gt;</span>follower<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/part.jpg"</span> <span class="attr">title</span>=<span class="string">"a part here"</span>&gt;</span>part<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/sea.jpg"</span> <span class="attr">title</span>=<span class="string">"the sea "</span>&gt;</span>sea<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/star.jpg"</span> <span class="attr">title</span>=<span class="string">"water star"</span>&gt;</span>star<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>只有一个“挂钩”，但是也足够了。</p>
</li>
<li><p>添加事件处理函数<br>具体操作：</p>
<ul>
<li><p>检查是否支持<code>getElementsByTagName</code>和<code>getElementById</code>；</p>
</li>
<li><p>检查是否存在有<code>id=image_gallery</code>的元素；</p>
</li>
<li><p>遍历<code>image_gallery</code>的所有链接；</p>
</li>
<li><p>设置 <code>onclick</code> 事件，让其关联操作：</p>
<ul>
<li>将这个链接作为参数传递给<code>show_pic</code>函数；</li>
<li>取消链接被点击时的默认行为，不让浏览打开该链接。</li>
</ul>
</li>
</ul>
<p>具体代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepare_gallery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">document</span>.getElementsByTagName || <span class="built_in">document</span>.getElementById))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!gallery) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  links = gallery.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 把整个link元素传进去</span></span><br><span class="line">      show_pic(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>共享 onload<br>当有多个函数需要 onload 时使用，那么可以创建一个匿名函数来绑定指令。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  first_function();</span><br><span class="line">  second_function();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这是最简单的处理方式，还有一个弹性最佳的解决方案。这个方案需要写一点代码，但一不旦有了那些代码，把函数绑定到<code>window.onload</code>事件就行了。<br>这个函数名是<code>addLoadEvent</code>，要完成的操作有：</p>
<ul>
<li>把现在的<code>window.load</code>事件处理函数的值存入变量<code>oldonload</code>。</li>
<li>如果处理函数还没有绑定函数，就像平时那样把新函数添加给它。</li>
<li>如果已经绑定了函数，就把新函数追加到现有指令的末尾。<br>具体代码：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = func;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      oldonload();</span><br><span class="line">      func();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
如果需要把函数加到队列里去，只需写以下代码：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addLoadEvent(first_function);</span><br><span class="line">addLoadEvent(second_function);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="不要做太多的假设"><a href="#不要做太多的假设" class="headerlink" title="不要做太多的假设"></a>不要做太多的假设</h4><ol>
<li><p>检查元素是否存在</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"placeholder"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 如果 id为 `description`存在，那么执行修改文字，否则忽略</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"description"</span>)) &#123;</span><br><span class="line">  <span class="comment">// 获取title属性</span></span><br><span class="line">  <span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">  <span class="comment">// 获取p结点</span></span><br><span class="line">  <span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br><span class="line">  <span class="comment">// 将p元素赋值给nodeValue</span></span><br><span class="line">  p_element.firstChild.nodeValue = title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全部代码为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_pic</span>(<span class="params">whic_pic</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"default"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 获取 href 属性</span></span><br><span class="line">  <span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br><span class="line">  <span class="comment">// 获取默认结点</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">"default"</span>);</span><br><span class="line">  <span class="comment">// 如果 id为 `description`存在，那么执行修改文字，否则忽略</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"description"</span>)) &#123;</span><br><span class="line">    <span class="comment">// 设置属性</span></span><br><span class="line">    placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br><span class="line">    <span class="comment">// 获取 title 属性</span></span><br><span class="line">    <span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">    <span class="comment">// 获取 p 结点</span></span><br><span class="line">    <span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br><span class="line">    <span class="comment">// 将 p 元素赋值给 nodeValue</span></span><br><span class="line">    p_element.firstChild.nodeValue = title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改进后即使不存在要找的元素，也不会发生错误。</p>
</li>
<li><p>如果 palceholder 图片在文档中删去，并在浏览器刷新页面，就会出现无论点击哪个链接，都没有任何响应。<br>因为 prepare_gallery 函数取消了 onclick 事件的默认行为。其实是否要返回一个 false 用来取消默认行为，应该由 show_pic 函数决定。show_pic 返回两个可值的值。</p>
<ul>
<li>如果切换图片成功，返回 true；</li>
<li>否则，返回 false。<br>为了修正该问题，应该在返回前验证返回值，来决定是否阻止默认行为，如果返回 true，则更新。可以利用<code>!</code>来对 show_pic 的返回值取反。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !show_pic(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
如果 show_pic 返回 true，那么就返回 false，浏览器会取消默认行为；<br>如果返回 false，那就返回 true，浏览器会使用 onclick 的默认行为。<br>所以最终代码为：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepare_gallery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">document</span>.getElementsByTagName || <span class="built_in">document</span>.getElementById))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!gallery) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  links = gallery.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !show_pic(<span class="keyword">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ol>
<li><p>检查 title 属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = which_pic.getAttribute(<span class="string">"title"</span>);</span><br></pre></td></tr></table></figure>

<p>为了检查 title 属性是否真的存在，可以测试是否为 null。当不存在时，可以设置为空字符</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (which_pic.getAttribute(<span class="string">"title"</span>)) &#123;</span><br><span class="line">  <span class="keyword">var</span> text = which_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> text = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完成同一操作的其它方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = which_pic.getAttribute(<span class="string">"title"</span>)</span><br><span class="line">  ? which_pic.getAttribute(<span class="string">"title"</span>)</span><br><span class="line">  : <span class="string">""</span>;</span><br></pre></td></tr></table></figure>

<p>上面的<code>?</code>是一个三元操作符（ternary operator）。问号的后面是<code>text</code>的两种取值可能，如果<code>which_pic.getAttribute(&quot;title&quot;)</code>的返回值不为空，那么将其赋给<code>text</code>；如果返回值为空值，那么<code>text</code>将被赋为第二个值。<br>三元操作符是<code>if/else</code>的一种变形体，比较简短，逻辑表达不怎么明显，不习惯的话可以用回<code>if/else</code>表达式。</p>
</li>
<li><p>增加了几项检查，函数的代码也变多了。实际工作中，需要自己决定是否真的需要检查，它们针对的是 HTML 文档有可能不在你控制范围内的情况。理想情况下，应该不需要对 HTML 文档做太多的假设。</p>
</li>
</ol>
<h4 id="键盘访问"><a href="#键盘访问" class="headerlink" title="键盘访问"></a>键盘访问</h4><ol>
<li><p><code>prepare_gallery()</code>的核心代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !show_pic(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>也可以使用三元操作符：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>用鼠标点击时是没有任何问题的，但是用键盘来的话就不一定了。<br>使用 tab 键是可以移动链接的，再按回车键就可以启用当前链接。<br>使用<code>onkeypress</code>来处理键盘事件，按下键盘的按键会触发该事件。复制一份指令即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line">links[i].onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>更简单的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// js函数之间是可以赋值的</span></span><br><span class="line">links[i].onkeypress = links[i].onclick;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这就是 js 和 html 分离带来的好处<br>把所有的函数和事件都放在了外部文件，只需要修改 js 代码，而不用去修改 html 代码。</p>
</li>
<li><p>onkeypress 的问题<br>在某些浏览器里，按 Tag 键都会触发该函数，现在应该没有这种奇怪的浏览器了。<br>最好不要使用<code>onkeypress</code>事件处理函数，<code>onclick</code>事件处理已经能满足要求，对键盘的支持也相当完美。<br>最终代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_pic</span>(<span class="params">whic_pic</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"default"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 获取 href 属性</span></span><br><span class="line">  <span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br><span class="line">  <span class="comment">// 获取默认结点</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.getElementById(<span class="string">"default"</span>);</span><br><span class="line">  <span class="comment">// 设置属性</span></span><br><span class="line">  <span class="comment">// 如果 id为 `description`存在，那么执行修改文字，否则忽略</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"description"</span>)) &#123;</span><br><span class="line">    placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br><span class="line">    <span class="comment">// 获取 title 属性</span></span><br><span class="line">    <span class="keyword">var</span> title = whic_pic.getAttribute(<span class="string">"title"</span>);</span><br><span class="line">    <span class="comment">// 获取 p 结点</span></span><br><span class="line">    <span class="keyword">var</span> p_element = <span class="built_in">document</span>.getElementById(<span class="string">"description"</span>);</span><br><span class="line">    <span class="comment">// 将 p 元素赋值给 nodeValue</span></span><br><span class="line">    p_element.firstChild.nodeValue = title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepare_gallery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="built_in">document</span>.getElementsByTagName || <span class="built_in">document</span>.getElementById))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!gallery) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  links = gallery.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> show_pic(<span class="keyword">this</span>) ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="js-与-css-结合"><a href="#js-与-css-结合" class="headerlink" title="js 与 css 结合"></a>js 与 css 结合</h4><ol>
<li><p>id 可以使用在 CSS 样式表里，比如，把图片清单的项目符号去掉，可以得用<code>image_gallery</code>写如下的 CSS 语句。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#image_gallery</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将这些 CSS 语句存入一个外部文件如<code>layout.css</code>，然后再从 gallery.html 的头部<head>引用其。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"layout.css"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以将其改变为横向</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#image_gallery</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-53bc454ddb197b6284a55ade119fa8c9.png" alt="Image"></p>
</li>
</ol>
<h4 id="DOM-Core-和-HTML-DOM"><a href="#DOM-Core-和-HTML-DOM" class="headerlink" title="DOM Core 和 HTML-DOM"></a>DOM Core 和 HTML-DOM</h4><ol>
<li><p>已经使用的 DOM 方法：</p>
<ul>
<li>getElementById</li>
<li>getElementsByTagName</li>
<li>getAttribute</li>
<li>setAttribute</li>
</ul>
<p>HTML-DOM 提供了一个 forms 对象，可以把下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"form"</span>);</span><br></pre></td></tr></table></figure>

<p>简化为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.forms;</span><br></pre></td></tr></table></figure>

<p>把图片 src 取出来的语句：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.getAttribute(<span class="string">"src"</span>);</span><br></pre></td></tr></table></figure>

<p>简化为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.src;</span><br></pre></td></tr></table></figure>

<p>HTML-DOM 的代码会很短，但是只能用来处理 Web 文档。<br>用 HTML-DOM 重写 show_pic 的话，可以变得更简短：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = whic_pic.getAttribute(<span class="string">"href"</span>);</span><br></pre></td></tr></table></figure>

<p>简化为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = whic_pic.href;</span><br></pre></td></tr></table></figure>

<p>设置属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">placeholder.setAttribute(<span class="string">"src"</span>, source);</span><br></pre></td></tr></table></figure>

<p>可改为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">placeholder.src = source;</span><br></pre></td></tr></table></figure>
</li>
<li><p>即使了解 HTML-DOM，也要了解 DOM-sore，即使你只决定使用一种，毕竟要阅读别人编写的脚本。</p>
</li>
</ol>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>无</p>
<blockquote>
<p>欢迎访问我的个人<a href="https://jinl1874.xyz">博客</a></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（6）：动态创建标记</title>
    <url>/2020/07/13/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89/</url>
    <content><![CDATA[<p>网页的结构由标记语言创建，js 可用来改变细节而不改变结构。<br>同样，js 也可用来改变网页的结构和内容。</p>
<h4 id="传统方法"><a href="#传统方法" class="headerlink" title="传统方法"></a>传统方法</h4><ol>
<li><p><code>document.write</code>：<br><code>write</code>方法可以把字符串插入到文档里。<br>使用方法，编辑 test.html 文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">"&lt;p&gt; 这是一个段落 &lt;/p&gt;"</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-4bd0170134f423a47cb3fe7ac79348e8.png" alt="Image"></p>
<p>缺点：这样做会使得标记与 js 代码混杂在一起，代码即不容易理解，也无法享受代码与结构分离的好处。应避免<code>&lt;body&gt;</code>乱用<code>&lt;script&gt;</code>标签，尽量减少使用<code>document.write</code>。</p>
</li>
<li><p>innerHTML 属性<br>innerHTML 属性可以用来读写给定元素里的 HTML 内容。<br>读，编辑 test.html 文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">em</span>&gt;</span>my<span class="tag">&lt;/<span class="name">em</span>&gt;</span> content!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后编写 example.js （记得把 example.js 文件加到 HTML 文件里面）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">  alert(test.innerHTML);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-29ea46299e5678b96642faeb3e882c10.png" alt="Image"><br>结果显示，innerHTML 只是粗暴地把元素里面所有的代码找出来。当需要把插入大段的 HTML 文件时，它就有用武之地了。</p>
<p>写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">  test.innerHTML = <span class="string">"&lt;p&gt; Insert in &lt;em&gt;innerHTML&lt;/em&gt; &lt;/p&gt;"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-0c88b799d4b1fd0fd6738b5d74f8adbe.png" alt="Image"><br>直接赋值对应的即可，赋值后会把原来的 html 代码覆盖掉。<br>这是 HTML 专有属性，不能用于其它标记语言文档，如 xhtml 文档。</p>
</li>
</ol>
<h4 id="DOM-方法"><a href="#DOM-方法" class="headerlink" title="DOM 方法"></a>DOM 方法</h4><ol>
<li><p>添加节点<br>编辑 test.html，让<code>id=test</code>的 div 标签内容为空。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把一段文本插入到上面的 div 元素，用 DOM 的话来形容，添加一个 p 元素节点，再把这个节点作为 div 元素的子节点。<br>具体步骤：</p>
<ol>
<li>createElement 创建一个新元素:<br>语法：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(nodeName);</span><br></pre></td></tr></table></figure>
创造一个 p 元素结点并赋值给一个变量：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br></pre></td></tr></table></figure></li>
<li>appendChild 把新元素插入节点数：<br>使用 appendChild 方法。<br>语法：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parent.appendChild(child);</span><br></pre></td></tr></table></figure>
例子：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line"><span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">test.appendChild(para);</span><br></pre></td></tr></table></figure>
或者：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"test"</span>).appendChild(<span class="built_in">document</span>.createElement(<span class="string">"p"</span>));</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>添加文本节点<br>使用 crateTextNode 方法。<br>语法与 createElement 相似：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.createTextNode(text);</span><br></pre></td></tr></table></figure>

<p>创建一个内容为 “test”的文本节点并赋值变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure>

<p>使用 appendChild 添加到 p 元素结点：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">para.appendChild(txt);</span><br></pre></td></tr></table></figure>

<p>最终代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">  <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">  test.appendChild(para);</span><br><span class="line">  <span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="string">"test"</span>);</span><br><span class="line">  para.appendChild(txt);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-e4775390176cc0a1ea597996f86e110c.png" alt="Image"></p>
</li>
<li><p>一个复杂的例子：<br>创建一个以下节点：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is <span class="tag">&lt;<span class="name">em</span>&gt;</span>my<span class="tag">&lt;/<span class="name">em</span>&gt;</span> content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个 html 包含一个 p 元素节点，p 元素里又包含一个文本节点“This is”，一个 em 结点和一个文本节点“contents.”。<br>那么只要依次创建加入即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> test = <span class="built_in">document</span>.getElementById(<span class="string">"test"</span>);</span><br><span class="line">  <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">  test.appendChild(para);</span><br><span class="line">  <span class="comment">// 添加第一个文本节点</span></span><br><span class="line">  <span class="keyword">var</span> txt_0 = <span class="built_in">document</span>.createTextNode(<span class="string">"This is "</span>);</span><br><span class="line">  para.appendChild(txt_0);</span><br><span class="line">  <span class="comment">// 添加em节点</span></span><br><span class="line">  <span class="keyword">var</span> em = <span class="built_in">document</span>.createElement(<span class="string">"em"</span>);</span><br><span class="line">  <span class="keyword">var</span> em_txt = <span class="built_in">document</span>.createTextNode(<span class="string">"my"</span>);</span><br><span class="line">  em.appendChild(em_txt);</span><br><span class="line">  para.appendChild(em);</span><br><span class="line">  <span class="comment">// 添加第三个节点</span></span><br><span class="line">  <span class="keyword">var</span> text_1 = <span class="built_in">document</span>.createTextNode(<span class="string">" content."</span>);</span><br><span class="line">  para.appendChild(text_1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-5d46cb4a7a2ddad1f8f81aac97231905.png" alt="Image"></p>
</li>
</ol>
<h4 id="图片库"><a href="#图片库" class="headerlink" title="图片库"></a>图片库</h4><p>里面只有一个图片和一段文字是为<code>show_pic</code>服务，这很些元素的存在是为了让 DOM 处理它们，那么使用 DOM 来创建它们是最合适的。</p>
<ol>
<li><p>先把文档里的相关元素删掉。</p>
</li>
<li><p>先编写一个函数 <code>prepare_placeholder</code> 并把它放进 <code>show_pic.js</code>文件，然后在文档加载时调用此函数。</p>
</li>
<li><p>函数的任务：</p>
<ol>
<li>创建一个 img 元素节点；</li>
<li>设置这个节点的 id 属性；</li>
<li>设置这个节点的 src 属性；</li>
<li>设置这个节点的 alt 属性；</li>
<li>创建一个 p 元素节点；</li>
<li>设置这个节点的 id 属性；</li>
<li>创建一个文本节点；</li>
<li>把这个文本节点追加到 p 元素上；</li>
<li>把 p 元素和 img 元素插入到 gallery.html 文档里。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建img元素</span></span><br><span class="line"><span class="keyword">var</span> placeholder = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">placeholder.setAttribute(<span class="string">"id"</span>, <span class="string">"default"</span>);</span><br><span class="line">placeholder.setAttribute(<span class="string">"src"</span>, <span class="string">"images/default.jpg"</span>);</span><br><span class="line">placeholder.setAttribute(<span class="string">"alt"</span>, <span class="string">"my image gallery"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建p元素</span></span><br><span class="line"><span class="keyword">var</span> description = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">description.setAttribute(<span class="string">"id"</span>, <span class="string">"description"</span>);</span><br><span class="line"><span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="string">"choose an image"</span>);</span><br><span class="line">description.appendChild(txt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入到文档中</span></span><br><span class="line"><span class="keyword">var</span> body_element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>];</span><br><span class="line">body_element.appendChild(placeholder);</span><br><span class="line">body_element.appendChild(description);</span><br></pre></td></tr></table></figure>

<p>上述代码有一个完成工作了，但是一切都是依赖于这些元素刚好在 body 标签的末尾。如果在中间的话，就需要用到其它方法了。</p>
</li>
<li><p>已有元素前插入元素<br>DOM 提供了名为 <code>insertBefore()</code> 方法。使用此方法时，必须告诉它三件事：</p>
<ol>
<li>新元素：你想插入的元素；</li>
<li>目标元素：你想反把这个元素插入到哪个元素之前；</li>
<li>父元素：目标元素的父元素。</li>
</ol>
<p>语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentElement.insertBefore(newElement, targetElement);</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">gallery.parentElement.insertBefore(placeholder, gallery);</span><br></pre></td></tr></table></figure>

<p>这样就把元素插入到图片元素之前了。</p>
</li>
<li><p>元素后插入元素<br>DOM 没有提供这个方法，但是可以自己写一个 <code>insertAtfer</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newElement, targetElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取父元素</span></span><br><span class="line">  <span class="keyword">var</span> parent = targetElement.parentNode;</span><br><span class="line">  <span class="comment">// 如果最后一个结点元素与目标结点相同</span></span><br><span class="line">  <span class="keyword">if</span> (parent.lastChild == targetElement) &#123;</span><br><span class="line">    <span class="comment">// 直接加到末尾</span></span><br><span class="line">    parent.appendChild(newElement);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 找到目标结点的下一个结点，再插入到结点前</span></span><br><span class="line">    parent.insertBefore(newElement, targetElement.nextSibling);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法和<code>insertAfter</code>一样。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">parentElement.insertAfter(newElement, targetElement);</span><br></pre></td></tr></table></figure>

<p>还需要测试浏览器是否支持，所以最终代码清单为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepare_placeholder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.createElement) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.createTextNode) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建img元素</span></span><br><span class="line">  <span class="keyword">var</span> placeholder = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">  placeholder.setAttribute(<span class="string">"id"</span>, <span class="string">"default"</span>);</span><br><span class="line">  placeholder.setAttribute(<span class="string">"src"</span>, <span class="string">"images/default.jpg"</span>);</span><br><span class="line">  placeholder.setAttribute(<span class="string">"alt"</span>, <span class="string">"my image gallery"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建p元素</span></span><br><span class="line">  <span class="keyword">var</span> description = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">  description.setAttribute(<span class="string">"id"</span>, <span class="string">"description"</span>);</span><br><span class="line">  <span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(<span class="string">"choose an image"</span>);</span><br><span class="line">  description.appendChild(txt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> gallery = <span class="built_in">document</span>.getElementById(<span class="string">"image_gallery"</span>);</span><br><span class="line">  insertAfter(placeholder, gallery);</span><br><span class="line">  insertAfter(description, placeholder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目前为止，创建的这些新内容对这个页面来说并不算是新的，比如，页面加载后，标记中就已经存在 title 属性了。通过<code>createElement</code>添加的新段落也是基于嵌入在脚本中的标记添加的，实际上，我们创建的所有一切都包含在初始页面。</p>
</li>
</ol>
<p>那么怎么才能真正得到原来不存在初始页面的内容呢？</p>
<h4 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h4><p>使用 Ajax 就可以做到只更新页面中的一小部分，其它内容都不需要重新加载。<br>Ajax 的主要优势是对页面的请求以异步方式发送到服务器。</p>
<ol>
<li><p>XMLHttpRequest 对象<br>将下面的代码放进 ajax.html。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"new"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./scripts/addLoadEvent.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./scripts/getHTTPObject.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./scripts/getNewContent.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 addLoadEvent.js、getHTTPObject.js 和 getNewContent.js 都位于 scripts 的文件夹中。<br>为了模拟服务器响应，在 ajax.html 同目录下创建一个 example.txt 文件，包含以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This was loaded as asynchronously!</span><br></pre></td></tr></table></figure>

<p>该文件充当服务器的输出。</p>
<p>为了兼容不同 IE 版本的浏览器，需要写很多兼容代码，不过 IE 早就应该扫进历史的垃圾堆里了，所以就不兼容了。<br>创建一个 XMLHttpRequest 对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHTTPObject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request = getHTTPObject();</span><br></pre></td></tr></table></figure>

<p>XMLHttpRequest 对象有许多方法，其中最有用的是 open 方法，它用来指定服务器上将要访问的文件，指定请求的类型：GET、POST 或 SEND。该方法第三个参数用于指定请求是否以异步方式发送和处理。</p>
<p>在 getNewContent.js 文件中添加以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewContent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = getHTTPObject();</span><br><span class="line">  <span class="keyword">if</span> (request) &#123;</span><br><span class="line">    <span class="comment">// 发起请求同一目录下的文件</span></span><br><span class="line">    request.open(<span class="string">"GET"</span>, <span class="string">"example.txt"</span>, <span class="literal">true</span>);</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 取出并保存数据</span></span><br><span class="line">        <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">        <span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(request.responseText);</span><br><span class="line">        para.appendChild(txt);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"new"</span>).appendChild(para);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    request.send(<span class="literal">null</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Sorry, your browser doesn't support XMLHttpRequest"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>request.readyState</code> 有 5 个可能的值：</p>
<ul>
<li>0 表示初始化</li>
<li>1 表示正在加载</li>
<li>2 表示加载完毕</li>
<li>3 表示正在交互</li>
<li>4 表示完成</li>
</ul>
<p>只要 readyState 属性的值变成了 4，就可以访问服务器发送回来的数据。<br>responseText 是保存文本字符串的数据，responseXML 属性是保存 Content-Type 头部中指定为“text/xml”的数据，一个是 DocumentFragment 对象。</p>
<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-199048ce82aa77a1efe6ff8bc57269c6.png" alt="Image"></p>
<p>异步请求有一个异步性的问题，脚本发送 XMLHttpRequest 请求之后，仍会继续执行，不会等待响应返回。<br>可以试着加两个警告框，在函数结尾和 onreadystateChange 后添加。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewContent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> request = getHTTPObject();</span><br><span class="line">  <span class="keyword">if</span> (request) &#123;</span><br><span class="line">    <span class="comment">// 发起请求同一目录下的文件</span></span><br><span class="line">    request.open(<span class="string">"GET"</span>, <span class="string">"example.txt"</span>, <span class="literal">true</span>);</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (request.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        alert(<span class="string">"respose received"</span>);</span><br><span class="line">        <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">        <span class="keyword">var</span> txt = <span class="built_in">document</span>.createTextNode(request.responseText);</span><br><span class="line">        para.appendChild(txt);</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"new"</span>).appendChild(para);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    request.send(<span class="literal">null</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"Sorry, your browser doesn't support XMLHttpRequest"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  alert(<span class="string">"function done"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果显示在函数结尾处的弹窗更快。</p>
</li>
<li><p>Hijax，渐进增强地使用 Ajax。<br>登录表单添加 Ajax 功能，需要拦截提交表单的请求（Hijax），让 XMLHttpRequest 请求代为发送，再取消 onsubmit 的默认请求。这样登录就更方便，用户感觉就更快了。</p>
</li>
</ol>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>本次学习了几种不同的向浏览器里的文档动态添加标记的方法。<br>传统：</p>
<ul>
<li>document.write 方法</li>
<li>innerHTML 属性</li>
</ul>
<p>DOM 方法：</p>
<ul>
<li>createElement 方法</li>
<li>createTextNode 方法</li>
<li>appendChild 方法</li>
<li>insertBefore 方法</li>
</ul>
<p>用 createElement 和 createTextNode 创造的只是孤儿，要用 appendChild 和 insertBefore 才能把这些孤儿插入到文档的节点树，呈现在浏览器的窗口。</p>
<p>对图片库的改进和 insertAfter 方法的创建，还有 Ajax 和 异步请求。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑有哪些可以提升体验的软件？</title>
    <url>/2020/07/18/window-soft/</url>
    <content><![CDATA[<p>以下这些都是可以提升电脑使用体验的 10 款软件。</p>
<h4 id="1-截图软件：Snipaste"><a href="#1-截图软件：Snipaste" class="headerlink" title="1. 截图软件：Snipaste"></a>1. 截图软件：Snipaste</h4><p>曾经我是个手机拍屏党，后来被诸多表情大师教会截图后，毅然地转到截图派。<br><img src="https://pic4.zhimg.com/80/v2-a8e78bd7fd888e942cd369fa8128fdf5.jpg" alt="Image"></p>
<p>一开始使用的是 QQ 截图以及微信截图，但是这两个截图方式都要事先打开这俩软件，并且也不够专业/好用，最后找到了这个截图软件——Snipaste。<br>这个号称最好用的的截图软件，目前已经有 win 版、mac beta 版。</p>
<p>它好用在哪里呢？<br>第一，软件轻量，并且无广告。这个软件有免费版和专业版，免费版没有任何广告，提供的功能也足够个人用户使用；<br>第二，功能强：</p>
<blockquote>
<p>自动检测界面元素区域</p>
<p>像素级的鼠标移动控制、截图范围控制</p>
<p>取色器 (试试 F1, C, F3)</p>
<p>历史记录回放 (,/.)</p>
<p>支持多屏</p>
<p>支持高分屏</p>
</blockquote>
<p>第三，无与伦与的贴图功能。当你写文档需要查资料时，把相关截图贴上屏幕后，体验瞬间上一档次；</p>
<p><img src="https://pic4.zhimg.com/80/v2-170c49a04f7547fa4bb5c85fef5b147c.png" alt="Image"></p>
<p>第四，更强的图像标注功能，基本一个常见图片编辑器有的，这个都有；</p>
<p>第五，可自定义截图的分辨率。</p>
<p>更多的功能可以去看<a href="https://docs.snipaste.com/zh-cn/" target="_blank" rel="noopener">官方文档</a>。<br>官网下载<a href="https://zh.snipaste.com/" target="_blank" rel="noopener">地址</a></p>
<h4 id="2-文件查找——Everything"><a href="#2-文件查找——Everything" class="headerlink" title="2. 文件查找——Everything"></a>2. 文件查找——Everything</h4><p><img src="https://pic4.zhimg.com/80/v2-37f70af2050b2a4dab90016cf2eade08.png" alt="Image"></p>
<p>一个轻量级的查找文件的软件，当做好索引后，查找文件的速度是秒计的。<br>不过这个是实在找不到文件时才用的，平时做好文件的分类索引后，就很少有它的用武之地。</p>
<p><a href="https://www.voidtools.com/" target="_blank" rel="noopener">下载地址</a></p>
<h4 id="3-解压缩软件——7z"><a href="#3-解压缩软件——7z" class="headerlink" title="3. 解压缩软件——7z"></a>3. 解压缩软件——7z</h4><p><img src="https://pic4.zhimg.com/80/v2-b8897b531c317f6d1180a27d4856cf95.png" alt="Image"></p>
<p>解压缩软件是电脑里必备的软件之一了。<br>常见的解压缩软件有——winrar、360 压缩、bendzip 等。</p>
<p>7Z 的优点是开源、免费、轻量（安装包仅 1.3Mb），压缩比也高，并且压缩软件该有的功能一个不少。缺点就是颜值一般般，追求这方面的话，推荐另一款同样优秀的压缩软件——Bendzip。</p>
<p><a href="https://sparanoid.com/lab/7z/" target="_blank" rel="noopener">官网下载地址</a></p>
<h4 id="4-阅读-PDF-文件——sumatra"><a href="#4-阅读-PDF-文件——sumatra" class="headerlink" title="4. 阅读 PDF 文件——sumatra"></a>4. 阅读 PDF 文件——sumatra</h4><p><img src="https://pic4.zhimg.com/80/v2-df0a829b4032f0226b887427a201798c.png" alt="Image"><br>说是阅读 PDF 软件，其实还支持 epub、mobi、CHM 等文件的阅读。</p>
<blockquote>
<p>Sumatra PDF is a PDF, ePub, MOBI, CHM, XPS, DjVu, CBZ, CBR reader for Windows.</p>
</blockquote>
<p>优点是轻量、占用内存小、简洁、开源。</p>
<p><a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html" target="_blank" rel="noopener">官网下载地址</a></p>
<h4 id="5-下载软件——IDM"><a href="#5-下载软件——IDM" class="headerlink" title="5. 下载软件——IDM"></a>5. 下载软件——IDM</h4><p><img src="https://pic4.zhimg.com/80/v2-41146ab15375705b71f80c0ba4b59187.png" alt="Image"></p>
<p>一个使用多线程的下载软件，可以接管浏览器里的下载，下载速度非常快。不仅如此，该软件还可以几乎所有网站上的视频，还可以下载百度网盘的文件不过需要一点配置。</p>
<p>曾经写过一篇 IDM 下载的配置，里面有 IDM 的下载链接，<a href="https://jinl1874.xyz/2020/06/28/use-idm/">地址</a>。</p>
<h4 id="6-视频软件——PotPlayer"><a href="#6-视频软件——PotPlayer" class="headerlink" title="6. 视频软件——PotPlayer"></a>6. 视频软件——PotPlayer</h4><p><img src="https://pic4.zhimg.com/80/v2-ee68e61b55fca6dcd2473d322f6f2df8.png" alt="Image"><br>大概是最优秀的视频播放器了，界面简洁美观，没有流氓软件有的一切行为，比如突然修改你的默认播放软件等。<br>功能多，录屏、截 gif 之类的不在话下，支持逐帧跳转，截图非常方便。总之一般视频播放软件有的，它也有；其它播放软件没有的，它也有，比如可以收看电视信号，看直播等，可以去网上搜一下教程。</p>
<p><a href="http://www.potplayercn.com/" target="_blank" rel="noopener">官网下载链接</a></p>
<h4 id="7-记事本替代——notepad3"><a href="#7-记事本替代——notepad3" class="headerlink" title="7. 记事本替代——notepad3"></a>7. 记事本替代——notepad3</h4><p><img src="https://pic4.zhimg.com/80/v2-23c994c8de63a39c0dca508da2e29a06.png" alt="Image"></p>
<p>相信大家在写一些事情或者打开文本文件的时候经常会用到记事本，但是记事本的功能界面实在是太简陋了，比如常见的代码高亮、正则表达式、更改主题等全都没有。<br>然后就找到了这一款软件——notepad3，安装会自动替代系统的 notepad 软件，也就是说你打开 notepad 即是打开 notepad3。基本的使用方式是和 notepad 是一样的，但多了很多配置功能。</p>
<p><a href="https://www.rizonesoft.com/downloads/notepad3/" target="_blank" rel="noopener">下载链接</a></p>
<h4 id="8-window-任务栏透明小软件——TranslucentTB"><a href="#8-window-任务栏透明小软件——TranslucentTB" class="headerlink" title="8. window 任务栏透明小软件——TranslucentTB"></a>8. window 任务栏透明小软件——TranslucentTB</h4><p>任务栏默认是黑色的，有的会随主题颜色改变而改变，不过都不是透明的，并且有点显丑。TranslucentTB，可以使任务栏改变状态。一般有两种<br>模糊<br><img src="https://pic4.zhimg.com/80/v2-c52e293bb1f781b8980476c0961fb64c.png" alt="Image"><br>清晰<br><img src="https://pic4.zhimg.com/80/v2-a51aa1f41395567578f68cc5ea1815b1.png" alt="Image"></p>
<p><a href="https://github.com/TranslucentTB/TranslucentTB" target="_blank" rel="noopener">github 地址</a></p>
<p>该软件已上架微软商店，可以去<a href="https://www.microsoft.com/zh-cn/p/translucenttb/9pf4kz2vn4w9?rtc=1" target="_blank" rel="noopener">该处</a>下载安装。</p>
<h4 id="9-浏览器——Firefox"><a href="#9-浏览器——Firefox" class="headerlink" title="9. 浏览器——Firefox"></a>9. 浏览器——Firefox</h4><p>火狐浏览器一款开源浏览器，可能是仅存的非 chomium 内核浏览器。<br>对比 chrome 的优点是，上扩展商店以及同步数据的时候不用特别的上网方式。</p>
<p>注意下载浏览器的时候不要下载到国内特供版，看准网址，如果域名是(firefox.com.cn)的话，那就是国内特供的了，认准域名(mozilla.org)。国内特供版的数据无法与非国内版的同步，曾经我就是被这个坑过。</p>
<p><a href="https://www.mozilla.org/en-US/firefox/new/" target="_blank" rel="noopener">下载地址</a></p>
<h4 id="10-安全软件——火绒"><a href="#10-安全软件——火绒" class="headerlink" title="10. 安全软件——火绒"></a>10. 安全软件——火绒</h4><p>一个没有任何流氓行为的安全软件，不过我也就是用它来管管弹窗，以及开机自启动软件的，一般的安全问题有 window defense 就够了。<br>如果你的电脑安装有其它国产免费安全软件的话，早卸早安全。</p>
]]></content>
      <categories>
        <category>Window</category>
      </categories>
      <tags>
        <tag>other</tag>
        <tag>soft</tag>
        <tag>window</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（7）：CSS-DOM</title>
    <url>/2020/07/18/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89/</url>
    <content><![CDATA[<p>笔记内容：</p>
<ul>
<li>styele 属性</li>
<li>检索样式</li>
<li>改变样式</li>
</ul>
<h4 id="网页的结构"><a href="#网页的结构" class="headerlink" title="网页的结构"></a>网页的结构</h4><ul>
<li><p>三位一体：</p>
<ul>
<li>结构层：由 HTML 或 XHTML 之类的标记语言负责创建；</li>
<li>表示层：由 CSS 负责完成，CSS 描述页面内容应该如何呈现；</li>
<li>行为层：负责内容应该如何响应事件这一问题，js 和 DOM 主宰的领域。</li>
</ul>
</li>
<li><p>分离：</p>
<ul>
<li>使用（X）HTML 搭建文档的结构；</li>
<li>使用 CSS 去设置文档的呈现效果；</li>
<li>使用 DOM 脚本去实现文档的行为。</li>
</ul>
<p>这三种技术之间存在重叠区域。</p>
</li>
</ul>
<h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p>style 属性 包含元素的样式，查询该属性返蜀犬吠日的是一个对象而不是一个简单的字符串。样式存在对象的属性里：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.style.property;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>获取样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 style 的 color 属性：</span></span><br><span class="line">element.style.color;</span><br><span class="line"><span class="comment">// 获取 style 的 font-family 属性：</span></span><br><span class="line">elements.style.fontFamily;</span><br></pre></td></tr></table></figure>

<p>一般样式属性的返回值与它们的设置值都采用同样的计量单位。如果果 font-size 以 em 为单位，那么返回的值也是以 em 为单位。</p>
<p>style 属性只能能过内嵌的方式来获取，一旦样式在外部，则获取不到。</p>
</li>
<li><p>设置样式<br>style 对象的名个属性是可以读写的，可以使用赋值操作来更新样式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.style.property = value;</span><br></pre></td></tr></table></figure>
<p>赋值操作符可以设置任何一种样式，比如 font 之类的速记属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">para.style.font = <span class="string">"2em 'times', serif"</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="DOM-脚本设置样式"><a href="#DOM-脚本设置样式" class="headerlink" title="DOM 脚本设置样式"></a>DOM 脚本设置样式</h4><p>虽然 DOM 设置样式很容易，但是在大多数场合下，应该使用 CSS 去声明样式。</p>
<ul>
<li><p>根据元素的位置设置样式<br>找到该元素后，直接给该元素的 style 对应的属性赋值即可。</p>
</li>
<li><p>根据条件反复设置样式<br>找到元素后，根据条件设置样式。比如表格里隔一个行设置一个背景色，就需要根据条件设置值。</p>
</li>
<li><p>响应事件<br>一般最好使用 CSS 为文档设置样式，但也有一些 CSS 不能处理或者难以部署的情况，这时需要用上 DOM。比如浏览器不能识别伪类的时候，可以使用 js 来解决。</p>
</li>
<li><p>className 属性<br>之前的都是用 DOM 直接设置或修改样式，这是直接让“行为层”干“表示层”的活。<br>与其让 DOM 直接改变元素的样式，不如能过 js 更新元素的 classic 属性。</p>
</li>
</ul>
<h4 id="对函数进行抽象"><a href="#对函数进行抽象" class="headerlink" title="对函数进行抽象"></a>对函数进行抽象</h4><p>一些函数可以做一些小小的改动可以变得更通用，这个过程叫抽象（abstraction）。<br>比如下面这个函数的对象仅适用于 h1 元素，以及 classname 的值为 intro 。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleHeaderSiblings</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementsByTagName) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> headers = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"h1"</span>);</span><br><span class="line">  <span class="keyword">var</span> elem;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; headers.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 查找下一个元素节点</span></span><br><span class="line">    elem = getNextElement(headers[i].nextSibling);</span><br><span class="line">    elem.className += <span class="string">"intro"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加两个具体的参数，就可以使其成为更通用的函数：添加 tag 和 theclass 两个参数，并把 h1 改为 tag，intro 改为 theclass。为了增加可读性，把 headers 改为 elems.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">styleHeaderSiblings</span>(<span class="params">tag, theclass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementsByTagName) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName(tag);</span><br><span class="line">  alert(theclass);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elems.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 查找下一个元素节点</span></span><br><span class="line">    elem = getNextElement(elems[i].nextSibling);</span><br><span class="line">    elem.className += <span class="string">" "</span> + theclass;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，函数的抽象化就完成了。<br>无论何时，发现函数可以抽象，都应该马上去做，这总是一个好主意。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>CSS-DOM 针对的是如何得到和设置 style 对象的各种属性。<br>style 属性不支持外部 css 设置的样式，不过仍然可以利用 style 属性去改变 html 元素的呈现效果。<br>不过一般都应该选择更新 classname 属性，而不是直接更新 style 对象的相关属性。<br>使用 js 干 css 的活无非就俩原因，一是 css 无法干这种活，二是一些残疾浏览器不支持最新属性。js 能够重复执行一组操作，这是 css 做不了的。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>火狐上有哪些值得安装的扩展</title>
    <url>/2020/07/19/firefox-addons/</url>
    <content><![CDATA[<p>2020 年，主要就是使用下面这些扩展。</p>
<h4 id="1-去广告插件——uBlock-Origin"><a href="#1-去广告插件——uBlock-Origin" class="headerlink" title="1. 去广告插件——uBlock Origin"></a>1. 去广告插件——uBlock Origin</h4><p>一般使用浏览器都需要一个去广告插件，否则浏览网页的体验太差了。<br>这个插件比 Adblock 占用资源低，而且知名度也更低一点，没有那么多网站进行针对。不过一般网站要针对去广告插件的话也不会单针对某一款，除了某乎头上的那个显示。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/ublock-origin/" target="_blank" rel="noopener">地址</a></p>
<h4 id="2-epub-阅读扩展——QiuReader"><a href="#2-epub-阅读扩展——QiuReader" class="headerlink" title="2. epub 阅读扩展——QiuReader"></a>2. epub 阅读扩展——QiuReader</h4><p>在电脑上阅读 epub 文件的体验一直不算好，直到我找到了这款扩展。</p>
<p>清爽的首页：<br><img src="https://pic4.zhimg.com/80/v2-5422bca3ade0602e09d6a706cf82d9b0.png" alt="Image"><br>舒服的界面：<br><img src="https://pic4.zhimg.com/80/v2-d97182a8834c13b00952dfe7fddae58b.png" alt="Image"></p>
<p>配置选项：背景颜色、字体大小、阅读方式、空格等；<br>其它功能：添加书签、高亮某一段文字。<br>美中不足的是不能添加书注，不过也无伤大雅，单是这漂亮的 UI 就足够了。</p>
<p>我单方面宣布这是 window 上最好用 epub 阅读器。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/qiureader/" target="_blank" rel="noopener">地址</a></p>
<h4 id="3-美化网页——Stylus"><a href="#3-美化网页——Stylus" class="headerlink" title="3. 美化网页——Stylus"></a>3. 美化网页——Stylus</h4><p>官方网站上，由于种种限制，导致网站有很多广告和很多大多数人一辈子都用不上的功能，并且 UI 总是有点丑。这时就需要一个美化网页的插件了，把多余的东西去掉，留一个简洁干净的页面。一般有点流量的网站都有很人编写相对应的样式。<br>贴吧使用前：<br><img src="https://pic4.zhimg.com/80/v2-4e7e22ec7c3ed1beedd7b5cd34117fc6.png" alt="Image"><br>使用后：<br><img src="https://pic4.zhimg.com/80/v2-f82e4543a1b75663cd246fd4b0d1cbcd.png" alt="Image"></p>
<p>页面干净了许多。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/styl-us/" target="_blank" rel="noopener">地址</a></p>
<h4 id="4-脚本扩展——暴力猴"><a href="#4-脚本扩展——暴力猴" class="headerlink" title="4. 脚本扩展——暴力猴"></a>4. 脚本扩展——暴力猴</h4><p>脚本扩展在某种程度上也算是必装的一款插件了吧，已经有很多人在 Greasy Fork 等网站写了大量的脚本，有需要就下载安装即可。脚本可以解决相当多的问题，并且也不会占用很多内存。找脚本也很方便，直接点击相应的图标，即跳出一个“为此站点查找脚本”的选项。<br><img src="https://pic4.zhimg.com/80/v2-f98281f8034694dc1b84251328d0544b.png" alt="Image"><br>其它常见的脚本插件有油猴等，不过我还是更喜欢暴力猴，或许是更好看点吧。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/violentmonkey/" target="_blank" rel="noopener">地址</a></p>
<h4 id="5-密码管理——LastPass"><a href="#5-密码管理——LastPass" class="headerlink" title="5. 密码管理——LastPass"></a>5. 密码管理——LastPass</h4><p>跨平台的的密码保存管理扩展，有了它，再也不用担心忘记密码了。<br>该扩展的主要功能是，输入一个新的账号密码时，会提示是否保存；若账号相同，则提示是否更新密码；会在账号密码自动填充最后使用的密码。<br>其它的功能还有生成随机密码之类的。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/lastpass-password-manager/" target="_blank" rel="noopener">地址</a></p>
<h4 id="6-下载管理——IDM"><a href="#6-下载管理——IDM" class="headerlink" title="6. 下载管理——IDM"></a>6. 下载管理——IDM</h4><p>这个插件要搭配 IDM 下载器使用。该插件几乎可以下载所有的网页上的视频、图像等。<br>具体写过一篇文章专门介绍<a href="https://jinl1874.xyz/2020/06/28/use-idm/">如何配置使用 IDM</a>的。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/tonec-idm-integration-module/?src=search" target="_blank" rel="noopener">地址</a></p>
<h4 id="7-操作网页——viumium"><a href="#7-操作网页——viumium" class="headerlink" title="7. 操作网页——viumium"></a>7. 操作网页——viumium</h4><p>不需要用鼠标，仅使用键盘能完成 90%的操作。<br>有很多类似的扩展，为什么推荐这个，只是使用习惯了。</p>
<p>按键功能和 vim 有一定的相似之处。<br>上、下、左、右的移动分别是：k, j, h, l;</p>
<p>向右切换标签页：g+t 或者 K;</p>
<p>向左切换标签页：g+T 或者 J;</p>
<p>跳到顶部：gg;</p>
<p>跳到底部：G;</p>
<p>向上、下翻半页分别是：d, u;</p>
<p>网页前进：L;</p>
<p>页面后退：H;</p>
<p>显示点击链接：f;</p>
<p>新建标签页显示点击链接：F;</p>
<p>搜索：o;</p>
<p>新建标签页搜索：O;</p>
<p>新建空白标签页：t;</p>
<p>新建空白标签页打开链接：T;</p>
<p>关闭标签页：x;</p>
<p>打开上一个关闭的标签页：X;</p>
<p>焦点移到输入框：g+i;</p>
<p>焦点从输入框移走：tab 或者 esc;</p>
<p>值得注意的一点是，上述按键功能只能在常见的网页上生效，在系统标签页是用不了的。比如空白标签页、系统设置页，因此学一些默认的快捷键是有必要的，比如 ctrl + t 是新建空白标签页、ctrl + tab 是向右切换标签页、ctrl + shift + tab 是向左切换，一般加上个 shift 就是相反的功能。</p>
<p>还有一些按键就不一一赘述了。</p>
<p>使用该插件能解放你的鼠标，极大地提高阅读网页浏览体验。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/vimium-ff/?src=search" target="_blank" rel="noopener">地址</a></p>
<h4 id="8-网盘助手——网盘助手"><a href="#8-网盘助手——网盘助手" class="headerlink" title="8. 网盘助手——网盘助手"></a>8. 网盘助手——网盘助手</h4><p>支持主流网盘，如百度网盘以及蓝奏云等。<br>可以自动提取 提取码 。<br><img src="https://pic4.zhimg.com/80/v2-9b7f5dabcf188b46e289a23aaf121b49.png" alt="Image"></p>
<p>大概是最优雅好用的网盘助手了。<br>有使用网盘的都可以试试安装。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/wpzs/" target="_blank" rel="noopener">地址</a></p>
<p>基本就这些比较实用的扩展。</p>
<h4 id="9-切换浏览器头——User-Agent-Switcher-and-Manager"><a href="#9-切换浏览器头——User-Agent-Switcher-and-Manager" class="headerlink" title="9. 切换浏览器头——User-Agent Switcher and Manager"></a>9. 切换浏览器头——User-Agent Switcher and Manager</h4><p>当你需要访问移动版网页或者只有其它浏览器才能访问的网站时，可以用它切换相对应的浏览器头。</p>
<p><a href="https://addons.mozilla.org/zh-CN/firefox/addon/user-agent-string-switcher/?src=search" target="_blank" rel="noopener">地址</a></p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>firefox</tag>
        <tag>addons</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript-学习笔记（8）：动画</title>
    <url>/2020/07/20/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%888%EF%BC%89/</url>
    <content><![CDATA[<h1 id="JavaScript-学习笔记（8）：动画效果"><a href="#JavaScript-学习笔记（8）：动画效果" class="headerlink" title="JavaScript-学习笔记（8）：动画效果"></a>JavaScript-学习笔记（8）：动画效果</h1><p>动画是 CSS-DOM 最具动感的内容，让网页上的元素动起来。</p>
<h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><p>js 可以按照预定的时间重复调用函数，，这意味着我们可以随着时间的失衡而不断改变某个元素的样式。</p>
<ul>
<li><p>位置：网页元素在浏览器窗口里的位置是一种表示性信息，一般由 CSS 负责。例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">element</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面的 DOM 代码实现了同样的效果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">element.style.top = <span class="string">"50px"</span>;</span><br><span class="line">element.style.left = <span class="string">"100px"</span>;</span><br></pre></td></tr></table></figure>

<p>假设有这么一个元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span>Wheel<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再用 js 设置位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加到<code>windows.onload</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = func;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      oldonload();</span><br><span class="line">      func();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">addLoadEvent(positionMessage);</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-1e23b6fa027df6909b85e241f1859807.png" alt="Image"></p>
<p>再编写一个移动的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.left = <span class="string">"200px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-1e3e5ff744e8dfe2761e9107a0015e05.png" alt="Image"></p>
<p>这是立即改变位置，要想获得动画效果，还要让位置随着时间的改变而不断改变。</p>
</li>
<li><p>时间</p>
<p>js 的 setTimeout 能够让某个经过一段预定的时间后才开始执行。<br>用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">variable = setTimeout(<span class="string">"function"</span>, interval);</span><br></pre></td></tr></table></figure>

<p>可以用 clearTimeout 的函数来消 “等待执行”队列的某个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">clearTimeout(variable);</span><br></pre></td></tr></table></figure>

<p>修改 postitonMessage 函数，让其在 5 秒后才调用 moveMessage 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line">  movement = setTimeout(<span class="string">"moveMessage()"</span>, <span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>positionMessage 依旧在加载时调用。</p>
</li>
<li><p>时间递增量</p>
<p>动画应该是一个渐变的过程，元素应该从出发点逐步移动到目的点，而不是一下子跳过去。</p>
<p>更新 moveMessage 函数，让元素以逐渐移动的方式发生。步骤：</p>
<ul>
<li>获得元素的当前位置；</li>
<li>如果元素已经到达目的地，则退出；</li>
<li>如果元素尚未到达它的目的地，则把它向目的地移动；</li>
<li>一段时间后重复上述步骤。</li>
</ul>
<p>获取位置的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left);</span><br><span class="line"><span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.top);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有使用 DOM 脚本或 style 属性分配位置后，这里的 parseInt 才起作用。</p>
</blockquote>
<p>编辑 moveMessage 函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  <span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left);</span><br><span class="line">  <span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.top);</span><br><span class="line">  <span class="comment">// 如果相等就退出递归</span></span><br><span class="line">  <span class="keyword">if</span> (xpos == <span class="number">200</span> &amp;&amp; ypos == <span class="number">100</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 如果不相等就继续加减</span></span><br><span class="line">  <span class="keyword">if</span> (xpos &lt; <span class="number">200</span>) xpos++;</span><br><span class="line">  <span class="keyword">if</span> (xpos &gt; <span class="number">200</span>) xpos--;</span><br><span class="line">  <span class="keyword">if</span> (ypos &lt; <span class="number">100</span>) ypos++;</span><br><span class="line">  <span class="keyword">if</span> (ypos &gt; <span class="number">100</span>) ypos--;</span><br><span class="line">  elem.style.left = xpos + <span class="string">"px"</span>;</span><br><span class="line">  elem.style.top = ypos + <span class="string">"px"</span>;</span><br><span class="line">  <span class="comment">// 每隔10毫秒递归</span></span><br><span class="line">  movement = setTimeout(<span class="string">"moveMessage()"</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象</p>
<p>上面的代码只能完成特定的函数，如果把里面的常数改为变量，那么就通用性就会大大提升。</p>
<p>将移动元素的 ID、元素的目的地的位置，以及停顿间隔改为变量。<br>定义一个新的函数 <code>function moveElement(elementID, final_x, final_y, interval)</code>，具体代码为。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveElement</span>(<span class="params">elementID, final_x, final_y, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(elementID)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(elementID);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left);</span><br><span class="line">  <span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.top);</span><br><span class="line">  <span class="comment">// 如果相等就退出递归</span></span><br><span class="line">  <span class="keyword">if</span> (xpos == final_x &amp;&amp; ypos == final_y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 如果不相等就继续加减</span></span><br><span class="line">  <span class="keyword">if</span> (xpos &lt; final_x) xpos++;</span><br><span class="line">  <span class="keyword">if</span> (xpos &gt; final_x) xpos--;</span><br><span class="line">  <span class="keyword">if</span> (ypos &lt; final_y) ypos++;</span><br><span class="line">  <span class="keyword">if</span> (ypos &gt; final_y) ypos--;</span><br><span class="line">  elem.style.left = xpos + <span class="string">"px"</span>;</span><br><span class="line">  elem.style.top = ypos + <span class="string">"px"</span>;</span><br><span class="line">  <span class="comment">// 每隔 interval 毫秒递归</span></span><br><span class="line">  <span class="keyword">var</span> reqpeat =</span><br><span class="line">    <span class="string">"moveElement('"</span> +</span><br><span class="line">    elementID +</span><br><span class="line">    <span class="string">"',"</span> +</span><br><span class="line">    final_x +</span><br><span class="line">    <span class="string">","</span> +</span><br><span class="line">    final_y +</span><br><span class="line">    <span class="string">","</span> +</span><br><span class="line">    interval +</span><br><span class="line">    <span class="string">")"</span>;</span><br><span class="line">  movement = setTimeout(reqpeat, interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 moveElement 函数。<br>创建一个名为 message.html 的文件，包含一个 <code>id=message</code> 的 p 元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Position<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span>Wheel<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再编写一个 positionMessage.js 的文件，添加 positionMessage() 函数：<br><code>id=message2</code> 的 p 元素，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line">  moveElement(<span class="string">"message"</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addLoadEvent(positionMessage);</span><br></pre></td></tr></table></figure>

<p>再在 HTML 文件上添加相对应的 js 文件，就可以显示出简单的动画效果。<br>改变 interval 的值即可改变动画的速度，改变 x 和 y 的值即可改变最终位置。</p>
<p>添加一个 <code>id=message2</code> 的 p 元素，<code>&lt;p id=&quot;message2&quot;&gt;Whoal&lt;/p&gt;</code>，再在 positionMessage 函数中添加相对应的操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">positionMessage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"message"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">  elem.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem.style.top = <span class="string">"100px"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> elem_2 = <span class="built_in">document</span>.getElementById(<span class="string">"message2"</span>);</span><br><span class="line">  elem_2.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  elem_2.style.left = <span class="string">"50px"</span>;</span><br><span class="line">  elem_2.style.top = <span class="string">"50px"</span>;</span><br><span class="line"></span><br><span class="line">  moveElement(<span class="string">"message"</span>, <span class="number">125</span>, <span class="number">25</span>, <span class="number">10</span>);</span><br><span class="line">  moveElement(<span class="string">"message2"</span>, <span class="number">125</span>, <span class="number">125</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：<br><img src="https://pic4.zhimg.com/80/v2-ca5004a8c28eeed4108b85f6fafd05ab.png" alt="Image"></p>
</li>
</ul>
<h4 id="实用的动画"><a href="#实用的动画" class="headerlink" title="实用的动画"></a>实用的动画</h4><p>上面的动画用处不大，还有可能使用户厌烦。</p>
<ul>
<li><p>提出问题：有一个怨念一系列链接的网页。当用用户的鼠标指针悬停在某个链接上时，展示预览一张图片。<br>添加一个文件 list.html，代码为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Web Design<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Web Design<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>These are the things you should know:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"linklist"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./structure.html"</span>&gt;</span>structure<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./presentation.html"</span>&gt;</span>presentation<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./behavior.html"</span>&gt;</span>behavior<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这次需要在 onmouseover 事件被触发时显示一张图片。</p>
</li>
<li><p>解决问题：</p>
<ul>
<li>为所有的预览图片生成一张“集体照”形式的图片；</li>
<li>隐藏这张集体照图片的绝大部分。</li>
<li>当用户把鼠标指针悬停在某个链接上方时，只显示这张“集体照”图片相应的部分。</li>
</ul>
<p>集体照：<br><img src="https://pic4.zhimg.com/80/v2-488b3f4eef617e261baf1f1d07cb26ce.png" alt="Image"><br>添加到 list.html 最后面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./topic.png"</span> <span class="attr">alt</span>=<span class="string">"building blocks of web Design"</span> <span class="attr">id</span>=<span class="string">"preview"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>CSS</p>
<p>css 的 overflow 属性用来处理一个元素的尺寸超出其容器尺寸的情况。<br>overflow 属性有 4 种取值：visible（不作任何改动）、hidden（将溢出部分隐藏）、scroll（隐藏，但提供一个滚动条）和 auto（类似 scroll，但只有溢出时才显示滚动条）。</p>
<p>这里选取 hidden 属性。</p>
<p>添加 div，将 img 包进去，再添加对应的样式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"slideshow"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./topic.png"</span> <span class="attr">alt</span>=<span class="string">"building blocks of web Design"</span> <span class="attr">id</span>=<span class="string">"preview"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#slideshow</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来解决的时，让网页对用户的操作做出正确响应，当鼠标指针指在某个地方时，把对应的图片显示出来。</p>
</li>
<li><p>JavaScript</p>
<p>编写一个 prepareSlideshow 来完成工作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareSlideshow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementsByTagName) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"linklist"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(<span class="string">"preview"</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为图片应用样式</span></span><br><span class="line">  <span class="keyword">var</span> preview = <span class="built_in">document</span>.getElementById(<span class="string">"preview"</span>);</span><br><span class="line">  preview.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">  preview.style.left = <span class="string">"0px"</span>;</span><br><span class="line">  preview.style.top = <span class="string">"0px"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"linklist"</span>);</span><br><span class="line">  <span class="keyword">var</span> links = list.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line"></span><br><span class="line">  links[<span class="number">0</span>].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    moveElement(<span class="string">"preview"</span>, <span class="number">-100</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  links[<span class="number">1</span>].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    moveElement(<span class="string">"preview"</span>, <span class="number">-200</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  links[<span class="number">2</span>].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    moveElement(<span class="string">"preview"</span>, <span class="number">-300</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addLoadEvent(prepareSlideshow);</span><br></pre></td></tr></table></figure>

<p>将 js 文件添加到 html 文件，运行后将鼠标移到对应的链接上会出来动画效果：<br><img src="https://pic4.zhimg.com/80/v2-86d44aa0dc6cffbe084a325a91092499.png" alt="Image"></p>
<p>但是来回移动时会出现混乱的情况。</p>
</li>
<li><p>变量的作用域</p>
<p>动画效果出错是由全局变量引起的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">movement = setTimeout(reqpeat, interval);</span><br></pre></td></tr></table></figure>

<p>但是直接使用局部变量也会出错，需要一种介乎二者之间的东西，也就是属性。<br>js 允许为元素创建属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.property = value;</span><br></pre></td></tr></table></figure>

<p>所以更改为属性即可解决问题：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">elem.movement = setTimeout(reqpeat, interval);</span><br></pre></td></tr></table></figure>
</li>
<li><p>改进动画效果：<br>每次移动 1px，速度未免过慢。<br>可以设置每次前进这个距离的十分之一。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dist = (final_x - xpos) / <span class="number">10</span>;</span><br><span class="line">xpos = xpos + dist;</span><br></pre></td></tr></table></figure>

<p>当差距小于 10 的时候，用这个差距除 10 的结果小于 1，将移动不了。<br>解决方法是使用 Math 对象的 ceil 函数，它可以返回一个不小于 dist 的值的一个整数，用法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil(number);</span><br></pre></td></tr></table></figure>

<p>最终代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">moveElement</span>(<span class="params">elementID, final_x, final_y, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.getElementById(elementID)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementById(elementID);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 声明 dist</span></span><br><span class="line">  <span class="keyword">var</span> dist = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> xpos = <span class="built_in">parseInt</span>(elem.style.left);</span><br><span class="line">  <span class="keyword">var</span> ypos = <span class="built_in">parseInt</span>(elem.style.top);</span><br><span class="line">  <span class="comment">// 如果相等就退出递归</span></span><br><span class="line">  <span class="keyword">if</span> (xpos == final_x &amp;&amp; ypos == final_y) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 如果不相等就继续加减</span></span><br><span class="line">  <span class="keyword">if</span> (xpos &lt; final_x) &#123;</span><br><span class="line">    dist = <span class="built_in">Math</span>.ceil((final_x - xpos) / <span class="number">10</span>);</span><br><span class="line">    xpos = xpos + dist;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (xpos &gt; final_x) &#123;</span><br><span class="line">    dist = <span class="built_in">Math</span>.ceil((xpos - final_x) / <span class="number">10</span>);</span><br><span class="line">    xpos = xpos - dist;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ypos &lt; final_y) &#123;</span><br><span class="line">    dist = <span class="built_in">Math</span>.ceil((final_y - ypos) / <span class="number">10</span>);</span><br><span class="line">    ypos = ypos + dist;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (ypos &gt; final_y) &#123;</span><br><span class="line">    dist = <span class="built_in">Math</span>.ceil((ypos - final_y) / <span class="number">10</span>);</span><br><span class="line">    ypos = ypos - dist;</span><br><span class="line">  &#125;</span><br><span class="line">  elem.style.left = xpos + <span class="string">"px"</span>;</span><br><span class="line">  elem.style.top = ypos + <span class="string">"px"</span>;</span><br><span class="line">  <span class="comment">// 每隔 interval 毫秒递归</span></span><br><span class="line">  <span class="keyword">var</span> reqpeat =</span><br><span class="line">    <span class="string">"moveElement('"</span> +</span><br><span class="line">    elementID +</span><br><span class="line">    <span class="string">"',"</span> +</span><br><span class="line">    final_x +</span><br><span class="line">    <span class="string">","</span> +</span><br><span class="line">    final_y +</span><br><span class="line">    <span class="string">","</span> +</span><br><span class="line">    interval +</span><br><span class="line">    <span class="string">")"</span>;</span><br><span class="line">  <span class="comment">// movement = setTimeout(reqpeat, interval);</span></span><br><span class="line">  elem.movement = setTimeout(reqpeat, interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加安全检查<br>诸如 elem.style.left 是否存在等。</p>
</li>
<li><p>生成 HTML 标记：<br>一些内容是为了存在动画效果而存在的，但是如果不支持 js，那么那些内容留在那里岂不是很尴尬，所以干脆让 js 来生成这些标记。</p>
</li>
</ul>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>实现动画效果并不难，问题是尖不应该使用动画。<br>动画技术可以让我们创建出很多非常酷的效果，但四处移动的元素用处不大。现在有一个通用性的函数，在有必要创建动画效果时帮上大忙。</p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
